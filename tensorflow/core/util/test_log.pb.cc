// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/test_log.proto

#include "tensorflow/core/util/test_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2ftest_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto;
namespace tensorflow {
class EntryValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntryValue> _instance;
  double double_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
} _EntryValue_default_instance_;
class MetricEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricEntry> _instance;
} _MetricEntry_default_instance_;
class BenchmarkEntry_ExtrasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BenchmarkEntry_ExtrasEntry_DoNotUse> _instance;
} _BenchmarkEntry_ExtrasEntry_DoNotUse_default_instance_;
class BenchmarkEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BenchmarkEntry> _instance;
} _BenchmarkEntry_default_instance_;
class BenchmarkEntriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BenchmarkEntries> _instance;
} _BenchmarkEntries_default_instance_;
class BuildConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildConfiguration> _instance;
} _BuildConfiguration_default_instance_;
class CommitIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitId> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 changelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
} _CommitId_default_instance_;
class CPUInfo_CacheSizeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUInfo_CacheSizeEntry_DoNotUse> _instance;
} _CPUInfo_CacheSizeEntry_DoNotUse_default_instance_;
class CPUInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPUInfo> _instance;
} _CPUInfo_default_instance_;
class MemoryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryInfo> _instance;
} _MemoryInfo_default_instance_;
class GPUInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUInfo> _instance;
} _GPUInfo_default_instance_;
class PlatformInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlatformInfo> _instance;
} _PlatformInfo_default_instance_;
class AvailableDeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvailableDeviceInfo> _instance;
} _AvailableDeviceInfo_default_instance_;
class MachineConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MachineConfiguration> _instance;
} _MachineConfiguration_default_instance_;
class RunConfiguration_EnvVarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunConfiguration_EnvVarsEntry_DoNotUse> _instance;
} _RunConfiguration_EnvVarsEntry_DoNotUse_default_instance_;
class RunConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunConfiguration> _instance;
} _RunConfiguration_default_instance_;
class TestResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestResults> _instance;
} _TestResults_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AvailableDeviceInfo_default_instance_;
    new (ptr) ::tensorflow::AvailableDeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AvailableDeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BenchmarkEntries_default_instance_;
    new (ptr) ::tensorflow::BenchmarkEntries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::BenchmarkEntries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BenchmarkEntry_default_instance_;
    new (ptr) ::tensorflow::BenchmarkEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::BenchmarkEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BenchmarkEntry_ExtrasEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse();
  }
  ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BuildConfiguration_default_instance_;
    new (ptr) ::tensorflow::BuildConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::BuildConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CPUInfo_default_instance_;
    new (ptr) ::tensorflow::CPUInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CPUInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CPUInfo_CacheSizeEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse();
  }
  ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CommitId_default_instance_;
    new (ptr) ::tensorflow::CommitId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CommitId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_EntryValue_default_instance_;
    new (ptr) ::tensorflow::EntryValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::EntryValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GPUInfo_default_instance_;
    new (ptr) ::tensorflow::GPUInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GPUInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MachineConfiguration_default_instance_;
    new (ptr) ::tensorflow::MachineConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MachineConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryInfo_default_instance_;
    new (ptr) ::tensorflow::MemoryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetricEntry_default_instance_;
    new (ptr) ::tensorflow::MetricEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MetricEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_PlatformInfo_default_instance_;
    new (ptr) ::tensorflow::PlatformInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::PlatformInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RunConfiguration_default_instance_;
    new (ptr) ::tensorflow::RunConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RunConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static void InitDefaultsscc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RunConfiguration_EnvVarsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse();
  }
  ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {}};

static void InitDefaultsscc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TestResults_default_instance_;
    new (ptr) ::tensorflow::TestResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TestResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto}, {
      &scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
      &scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2futil_2ftest_5flog_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2futil_2ftest_5flog_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2futil_2ftest_5flog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2futil_2ftest_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::EntryValueDefaultTypeInternal, double_value_),
  offsetof(::tensorflow::EntryValueDefaultTypeInternal, string_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, min_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, max_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, iters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, cpu_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, throughput_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, extras_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntries, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, cc_flags_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::CommitIdDefaultTypeInternal, changelist_),
  offsetof(::tensorflow::CommitIdDefaultTypeInternal, hash_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, snapshot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, pending_changelist_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, kind_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, num_cores_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, num_cores_allowed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, mhz_per_cpu_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, cpu_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, cpu_governor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, cache_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, total_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, model_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, uuid_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, bus_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, linkage_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, machine_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, release_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, system_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, memory_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, physical_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, hostname_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, serial_identifier_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, platform_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, cpu_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, device_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, available_device_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, memory_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, argument_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, env_vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, target_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, entries_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, build_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, commit_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, start_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, run_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, machine_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, run_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, benchmark_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, run_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, tf_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::EntryValue)},
  { 8, -1, sizeof(::tensorflow::MetricEntry)},
  { 17, 24, sizeof(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse)},
  { 26, -1, sizeof(::tensorflow::BenchmarkEntry)},
  { 38, -1, sizeof(::tensorflow::BenchmarkEntries)},
  { 44, -1, sizeof(::tensorflow::BuildConfiguration)},
  { 52, -1, sizeof(::tensorflow::CommitId)},
  { 62, 69, sizeof(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse)},
  { 71, -1, sizeof(::tensorflow::CPUInfo)},
  { 82, -1, sizeof(::tensorflow::MemoryInfo)},
  { 89, -1, sizeof(::tensorflow::GPUInfo)},
  { 97, -1, sizeof(::tensorflow::PlatformInfo)},
  { 108, -1, sizeof(::tensorflow::AvailableDeviceInfo)},
  { 117, -1, sizeof(::tensorflow::MachineConfiguration)},
  { 129, 136, sizeof(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse)},
  { 138, -1, sizeof(::tensorflow::RunConfiguration)},
  { 145, -1, sizeof(::tensorflow::TestResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_EntryValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetricEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_BenchmarkEntry_ExtrasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_BenchmarkEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_BenchmarkEntries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_BuildConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CommitId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CPUInfo_CacheSizeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CPUInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GPUInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_PlatformInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AvailableDeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MachineConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RunConfiguration_EnvVarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RunConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TestResults_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2futil_2ftest_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#tensorflow/core/util/test_log.proto\022\nt"
  "ensorflow\032\031google/protobuf/any.proto\032\036go"
  "ogle/protobuf/wrappers.proto\"D\n\nEntryVal"
  "ue\022\026\n\014double_value\030\001 \001(\001H\000\022\026\n\014string_val"
  "ue\030\002 \001(\tH\000B\006\n\004kind\"\214\001\n\013MetricEntry\022\014\n\004na"
  "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022/\n\tmin_value\030\003 \001"
  "(\0132\034.google.protobuf.DoubleValue\022/\n\tmax_"
  "value\030\004 \001(\0132\034.google.protobuf.DoubleValu"
  "e\"\217\002\n\016BenchmarkEntry\022\014\n\004name\030\001 \001(\t\022\r\n\005it"
  "ers\030\002 \001(\003\022\020\n\010cpu_time\030\003 \001(\001\022\021\n\twall_time"
  "\030\004 \001(\001\022\022\n\nthroughput\030\005 \001(\001\0226\n\006extras\030\006 \003"
  "(\0132&.tensorflow.BenchmarkEntry.ExtrasEnt"
  "ry\022(\n\007metrics\030\007 \003(\0132\027.tensorflow.MetricE"
  "ntry\032E\n\013ExtrasEntry\022\013\n\003key\030\001 \001(\t\022%\n\005valu"
  "e\030\002 \001(\0132\026.tensorflow.EntryValue:\0028\001\"=\n\020B"
  "enchmarkEntries\022)\n\005entry\030\001 \003(\0132\032.tensorf"
  "low.BenchmarkEntry\"B\n\022BuildConfiguration"
  "\022\014\n\004mode\030\001 \001(\t\022\020\n\010cc_flags\030\002 \003(\t\022\014\n\004opts"
  "\030\003 \003(\t\"f\n\010CommitId\022\024\n\nchangelist\030\001 \001(\003H\000"
  "\022\016\n\004hash\030\002 \001(\tH\000\022\020\n\010snapshot\030\003 \001(\t\022\032\n\022pe"
  "nding_changelist\030\004 \001(\003B\006\n\004kind\"\336\001\n\007CPUIn"
  "fo\022\021\n\tnum_cores\030\001 \001(\003\022\031\n\021num_cores_allow"
  "ed\030\002 \001(\003\022\023\n\013mhz_per_cpu\030\003 \001(\001\022\020\n\010cpu_inf"
  "o\030\004 \001(\t\022\024\n\014cpu_governor\030\005 \001(\t\0226\n\ncache_s"
  "ize\030\006 \003(\0132\".tensorflow.CPUInfo.CacheSize"
  "Entry\0320\n\016CacheSizeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\003:\0028\001\".\n\nMemoryInfo\022\r\n\005total\030\001"
  " \001(\003\022\021\n\tavailable\030\002 \001(\003\"6\n\007GPUInfo\022\r\n\005mo"
  "del\030\001 \001(\t\022\014\n\004uuid\030\002 \001(\t\022\016\n\006bus_id\030\003 \001(\t\""
  "p\n\014PlatformInfo\022\014\n\004bits\030\001 \001(\t\022\017\n\007linkage"
  "\030\002 \001(\t\022\017\n\007machine\030\003 \001(\t\022\017\n\007release\030\004 \001(\t"
  "\022\016\n\006system\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\"e\n\023Ava"
  "ilableDeviceInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002"
  " \001(\t\022\024\n\014memory_limit\030\003 \001(\003\022\034\n\024physical_d"
  "escription\030\004 \001(\t\"\263\002\n\024MachineConfiguratio"
  "n\022\020\n\010hostname\030\001 \001(\t\022\031\n\021serial_identifier"
  "\030\007 \001(\t\022/\n\rplatform_info\030\002 \001(\0132\030.tensorfl"
  "ow.PlatformInfo\022%\n\010cpu_info\030\003 \001(\0132\023.tens"
  "orflow.CPUInfo\022)\n\013device_info\030\004 \003(\0132\024.go"
  "ogle.protobuf.Any\022>\n\025available_device_in"
  "fo\030\005 \003(\0132\037.tensorflow.AvailableDeviceInf"
  "o\022+\n\013memory_info\030\006 \001(\0132\026.tensorflow.Memo"
  "ryInfo\"\221\001\n\020RunConfiguration\022\020\n\010argument\030"
  "\001 \003(\t\022;\n\010env_vars\030\002 \003(\0132).tensorflow.Run"
  "Configuration.EnvVarsEntry\032.\n\014EnvVarsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\274\004\n\013T"
  "estResults\022\016\n\006target\030\001 \001(\t\022-\n\007entries\030\002 "
  "\001(\0132\034.tensorflow.BenchmarkEntries\022;\n\023bui"
  "ld_configuration\030\003 \001(\0132\036.tensorflow.Buil"
  "dConfiguration\022\'\n\tcommit_id\030\004 \001(\0132\024.tens"
  "orflow.CommitId\022\022\n\nstart_time\030\005 \001(\003\022\020\n\010r"
  "un_time\030\006 \001(\001\022\?\n\025machine_configuration\030\007"
  " \001(\0132 .tensorflow.MachineConfiguration\0227"
  "\n\021run_configuration\030\010 \001(\0132\034.tensorflow.R"
  "unConfiguration\022\014\n\004name\030\t \001(\t\022=\n\016benchma"
  "rk_type\030\n \001(\0162%.tensorflow.TestResults.B"
  "enchmarkType\022\020\n\010run_mode\030\013 \001(\t\022\022\n\ntf_ver"
  "sion\030\014 \001(\t\"u\n\rBenchmarkType\022\013\n\007UNKNOWN\020\000"
  "\022\026\n\022CPP_MICROBENCHMARK\020\001\022\024\n\020PYTHON_BENCH"
  "MARK\020\002\022\025\n\021ANDROID_BENCHMARK\020\003\022\022\n\016EDGE_BE"
  "NCHMARK\020\004B1\n\033org.tensorflow.util.testlog"
  "B\rTestLogProtosP\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_sccs[17] = {
  &scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_BenchmarkEntry_ExtrasEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_CPUInfo_CacheSizeEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_RunConfiguration_EnvVarsEntry_DoNotUse_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
  &scc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto = {
  &descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2futil_2ftest_5flog_2eproto, "tensorflow/core/util/test_log.proto", 2468,
  &descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once, descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_sccs, descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_deps, 17, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2futil_2ftest_5flog_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2futil_2ftest_5flog_2eproto, 17, file_level_enum_descriptors_tensorflow_2fcore_2futil_2ftest_5flog_2eproto, file_level_service_descriptors_tensorflow_2fcore_2futil_2ftest_5flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2futil_2ftest_5flog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestResults_BenchmarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2ftest_5flog_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2futil_2ftest_5flog_2eproto[0];
}
bool TestResults_BenchmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestResults_BenchmarkType TestResults::UNKNOWN;
constexpr TestResults_BenchmarkType TestResults::CPP_MICROBENCHMARK;
constexpr TestResults_BenchmarkType TestResults::PYTHON_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::ANDROID_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::EDGE_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::BenchmarkType_MIN;
constexpr TestResults_BenchmarkType TestResults::BenchmarkType_MAX;
constexpr int TestResults::BenchmarkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EntryValue::InitAsDefaultInstance() {
  ::tensorflow::_EntryValue_default_instance_.double_value_ = 0;
  ::tensorflow::_EntryValue_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class EntryValue::_Internal {
 public:
};

EntryValue::EntryValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.EntryValue)
}
EntryValue::EntryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.EntryValue)
}
EntryValue::EntryValue(const EntryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.EntryValue)
}

void EntryValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  clear_has_kind();
}

EntryValue::~EntryValue() {
  // @@protoc_insertion_point(destructor:tensorflow.EntryValue)
  SharedDtor();
}

void EntryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void EntryValue::ArenaDtor(void* object) {
  EntryValue* _this = reinterpret_cast< EntryValue* >(object);
  (void)_this;
}
void EntryValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntryValue& EntryValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntryValue_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void EntryValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.EntryValue)
  switch (kind_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      kind_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void EntryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EntryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

const char* EntryValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_string_value(), ptr, ctx, "tensorflow.EntryValue.string_value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntryValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EntryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double double_value = 1;
  if (_internal_has_double_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // string string_value = 2;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EntryValue.string_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EntryValue)
  return target;
}

size_t EntryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EntryValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // double double_value = 1;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntryValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EntryValue)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntryValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EntryValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EntryValue)
    MergeFrom(*source);
  }
}

void EntryValue::MergeFrom(const EntryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EntryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void EntryValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EntryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryValue::CopyFrom(const EntryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EntryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryValue::IsInitialized() const {
  return true;
}

void EntryValue::InternalSwap(EntryValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricEntry::InitAsDefaultInstance() {
  ::tensorflow::_MetricEntry_default_instance_._instance.get_mutable()->min_value_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::tensorflow::_MetricEntry_default_instance_._instance.get_mutable()->max_value_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class MetricEntry::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& min_value(const MetricEntry* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& max_value(const MetricEntry* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
MetricEntry::_Internal::min_value(const MetricEntry* msg) {
  return *msg->min_value_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
MetricEntry::_Internal::max_value(const MetricEntry* msg) {
  return *msg->max_value_;
}
void MetricEntry::unsafe_arena_set_allocated_min_value(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete min_value_;
  }
  min_value_ = min_value;
  if (min_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetricEntry.min_value)
}
void MetricEntry::clear_min_value() {
  if (GetArenaNoVirtual() == nullptr && min_value_ != nullptr) {
    delete min_value_;
  }
  min_value_ = nullptr;
}
void MetricEntry::unsafe_arena_set_allocated_max_value(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete max_value_;
  }
  max_value_ = max_value;
  if (max_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetricEntry.max_value)
}
void MetricEntry::clear_max_value() {
  if (GetArenaNoVirtual() == nullptr && max_value_ != nullptr) {
    delete max_value_;
  }
  max_value_ = nullptr;
}
MetricEntry::MetricEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MetricEntry)
}
MetricEntry::MetricEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MetricEntry)
}
MetricEntry::MetricEntry(const MetricEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_min_value()) {
    min_value_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.min_value_);
  } else {
    min_value_ = nullptr;
  }
  if (from._internal_has_max_value()) {
    max_value_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_value_);
  } else {
    max_value_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MetricEntry)
}

void MetricEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(value_));
}

MetricEntry::~MetricEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.MetricEntry)
  SharedDtor();
}

void MetricEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_value_;
  if (this != internal_default_instance()) delete max_value_;
}

void MetricEntry::ArenaDtor(void* object) {
  MetricEntry* _this = reinterpret_cast< MetricEntry* >(object);
  (void)_this;
}
void MetricEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricEntry& MetricEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void MetricEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MetricEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && min_value_ != nullptr) {
    delete min_value_;
  }
  min_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_value_ != nullptr) {
    delete max_value_;
  }
  max_value_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* MetricEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.MetricEntry.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue min_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MetricEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetricEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // .google.protobuf.DoubleValue min_value = 3;
  if (this->has_min_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::min_value(this), target, stream);
  }

  // .google.protobuf.DoubleValue max_value = 4;
  if (this->has_max_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::max_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MetricEntry)
  return target;
}

size_t MetricEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MetricEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.DoubleValue min_value = 3;
  if (this->has_min_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_value_);
  }

  // .google.protobuf.DoubleValue max_value = 4;
  if (this->has_max_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_value_);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MetricEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MetricEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MetricEntry)
    MergeFrom(*source);
  }
}

void MetricEntry::MergeFrom(const MetricEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MetricEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_min_value()) {
    _internal_mutable_min_value()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_min_value());
  }
  if (from.has_max_value()) {
    _internal_mutable_max_value()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_value());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void MetricEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MetricEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricEntry::CopyFrom(const MetricEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MetricEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricEntry::IsInitialized() const {
  return true;
}

void MetricEntry::InternalSwap(MetricEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BenchmarkEntry_ExtrasEntry_DoNotUse::BenchmarkEntry_ExtrasEntry_DoNotUse() {}
BenchmarkEntry_ExtrasEntry_DoNotUse::BenchmarkEntry_ExtrasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BenchmarkEntry_ExtrasEntry_DoNotUse::MergeFrom(const BenchmarkEntry_ExtrasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntry_ExtrasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BenchmarkEntry_ExtrasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BenchmarkEntry::InitAsDefaultInstance() {
}
class BenchmarkEntry::_Internal {
 public:
};

BenchmarkEntry::BenchmarkEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BenchmarkEntry)
}
BenchmarkEntry::BenchmarkEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  extras_(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntry)
}
BenchmarkEntry::BenchmarkEntry(const BenchmarkEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extras_.MergeFrom(from.extras_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&iters_, &from.iters_,
    static_cast<size_t>(reinterpret_cast<char*>(&throughput_) -
    reinterpret_cast<char*>(&iters_)) + sizeof(throughput_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntry)
}

void BenchmarkEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&iters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throughput_) -
      reinterpret_cast<char*>(&iters_)) + sizeof(throughput_));
}

BenchmarkEntry::~BenchmarkEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntry)
  SharedDtor();
}

void BenchmarkEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BenchmarkEntry::ArenaDtor(void* object) {
  BenchmarkEntry* _this = reinterpret_cast< BenchmarkEntry* >(object);
  (void)_this;
}
void BenchmarkEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BenchmarkEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BenchmarkEntry& BenchmarkEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BenchmarkEntry_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void BenchmarkEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extras_.Clear();
  metrics_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&iters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throughput_) -
      reinterpret_cast<char*>(&iters_)) + sizeof(throughput_));
  _internal_metadata_.Clear();
}

const char* BenchmarkEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.BenchmarkEntry.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpu_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cpu_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wall_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double throughput = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          throughput_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.EntryValue> extras = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extras_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.MetricEntry metrics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BenchmarkEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BenchmarkEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 iters = 2;
  if (this->iters() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_iters(), target);
  }

  // double cpu_time = 3;
  if (!(this->cpu_time() <= 0 && this->cpu_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_time(), target);
  }

  // double wall_time = 4;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_wall_time(), target);
  }

  // double throughput = 5;
  if (!(this->throughput() <= 0 && this->throughput() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_throughput(), target);
  }

  // map<string, .tensorflow.EntryValue> extras = 6;
  if (!this->_internal_extras().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.BenchmarkEntry.ExtrasEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extras().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extras().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->_internal_extras().begin();
          it != this->_internal_extras().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BenchmarkEntry_ExtrasEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->_internal_extras().begin();
          it != this->_internal_extras().end(); ++it) {
        target = BenchmarkEntry_ExtrasEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .tensorflow.MetricEntry metrics = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntry)
  return target;
}

size_t BenchmarkEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.EntryValue> extras = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extras_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::const_iterator
      it = this->_internal_extras().begin();
      it != this->_internal_extras().end(); ++it) {
    total_size += BenchmarkEntry_ExtrasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tensorflow.MetricEntry metrics = 7;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 iters = 2;
  if (this->iters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iters());
  }

  // double cpu_time = 3;
  if (!(this->cpu_time() <= 0 && this->cpu_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double wall_time = 4;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double throughput = 5;
  if (!(this->throughput() <= 0 && this->throughput() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BenchmarkEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BenchmarkEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BenchmarkEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BenchmarkEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BenchmarkEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BenchmarkEntry)
    MergeFrom(*source);
  }
}

void BenchmarkEntry::MergeFrom(const BenchmarkEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extras_.MergeFrom(from.extras_);
  metrics_.MergeFrom(from.metrics_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.iters() != 0) {
    _internal_set_iters(from._internal_iters());
  }
  if (!(from.cpu_time() <= 0 && from.cpu_time() >= 0)) {
    _internal_set_cpu_time(from._internal_cpu_time());
  }
  if (!(from.wall_time() <= 0 && from.wall_time() >= 0)) {
    _internal_set_wall_time(from._internal_wall_time());
  }
  if (!(from.throughput() <= 0 && from.throughput() >= 0)) {
    _internal_set_throughput(from._internal_throughput());
  }
}

void BenchmarkEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BenchmarkEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchmarkEntry::CopyFrom(const BenchmarkEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkEntry::IsInitialized() const {
  return true;
}

void BenchmarkEntry::InternalSwap(BenchmarkEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extras_.Swap(&other->extras_);
  metrics_.InternalSwap(&other->metrics_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iters_, other->iters_);
  swap(cpu_time_, other->cpu_time_);
  swap(wall_time_, other->wall_time_);
  swap(throughput_, other->throughput_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BenchmarkEntries::InitAsDefaultInstance() {
}
class BenchmarkEntries::_Internal {
 public:
};

BenchmarkEntries::BenchmarkEntries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BenchmarkEntries)
}
BenchmarkEntries::BenchmarkEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntries)
}
BenchmarkEntries::BenchmarkEntries(const BenchmarkEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntries)
}

void BenchmarkEntries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
}

BenchmarkEntries::~BenchmarkEntries() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntries)
  SharedDtor();
}

void BenchmarkEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BenchmarkEntries::ArenaDtor(void* object) {
  BenchmarkEntries* _this = reinterpret_cast< BenchmarkEntries* >(object);
  (void)_this;
}
void BenchmarkEntries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BenchmarkEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BenchmarkEntries& BenchmarkEntries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BenchmarkEntries_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void BenchmarkEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear();
}

const char* BenchmarkEntries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.BenchmarkEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BenchmarkEntries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.BenchmarkEntry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntries)
  return target;
}

size_t BenchmarkEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.BenchmarkEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BenchmarkEntries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BenchmarkEntries)
  GOOGLE_DCHECK_NE(&from, this);
  const BenchmarkEntries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BenchmarkEntries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BenchmarkEntries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BenchmarkEntries)
    MergeFrom(*source);
  }
}

void BenchmarkEntries::MergeFrom(const BenchmarkEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void BenchmarkEntries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BenchmarkEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchmarkEntries::CopyFrom(const BenchmarkEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkEntries::IsInitialized() const {
  return true;
}

void BenchmarkEntries::InternalSwap(BenchmarkEntries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildConfiguration::InitAsDefaultInstance() {
}
class BuildConfiguration::_Internal {
 public:
};

BuildConfiguration::BuildConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BuildConfiguration)
}
BuildConfiguration::BuildConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  cc_flags_(arena),
  opts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BuildConfiguration)
}
BuildConfiguration::BuildConfiguration(const BuildConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cc_flags_(from.cc_flags_),
      opts_(from.opts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.BuildConfiguration)
}

void BuildConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuildConfiguration::~BuildConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.BuildConfiguration)
  SharedDtor();
}

void BuildConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildConfiguration::ArenaDtor(void* object) {
  BuildConfiguration* _this = reinterpret_cast< BuildConfiguration* >(object);
  (void)_this;
}
void BuildConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildConfiguration& BuildConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void BuildConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BuildConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_flags_.Clear();
  opts_.Clear();
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* BuildConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_mode(), ptr, ctx, "tensorflow.BuildConfiguration.mode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cc_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_cc_flags(), ptr, ctx, "tensorflow.BuildConfiguration.cc_flags");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string opts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_opts(), ptr, ctx, "tensorflow.BuildConfiguration.opts");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BuildConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode(), target);
  }

  // repeated string cc_flags = 2;
  for (int i = 0, n = this->_internal_cc_flags_size(); i < n; i++) {
    const auto& s = this->_internal_cc_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.cc_flags");
    target = stream->WriteString(2, s, target);
  }

  // repeated string opts = 3;
  for (int i = 0, n = this->_internal_opts_size(); i < n; i++) {
    const auto& s = this->_internal_opts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.opts");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BuildConfiguration)
  return target;
}

size_t BuildConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BuildConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cc_flags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cc_flags_.size());
  for (int i = 0, n = cc_flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cc_flags_.Get(i));
  }

  // repeated string opts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(opts_.size());
  for (int i = 0, n = opts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      opts_.Get(i));
  }

  // string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BuildConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BuildConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BuildConfiguration)
    MergeFrom(*source);
  }
}

void BuildConfiguration::MergeFrom(const BuildConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BuildConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cc_flags_.MergeFrom(from.cc_flags_);
  opts_.MergeFrom(from.opts_);
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void BuildConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BuildConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildConfiguration::CopyFrom(const BuildConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BuildConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildConfiguration::IsInitialized() const {
  return true;
}

void BuildConfiguration::InternalSwap(BuildConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cc_flags_.InternalSwap(&other->cc_flags_);
  opts_.InternalSwap(&other->opts_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitId::InitAsDefaultInstance() {
  ::tensorflow::_CommitId_default_instance_.changelist_ = PROTOBUF_LONGLONG(0);
  ::tensorflow::_CommitId_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class CommitId::_Internal {
 public:
};

CommitId::CommitId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CommitId)
}
CommitId::CommitId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CommitId)
}
CommitId::CommitId(const CommitId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot().empty()) {
    snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snapshot(),
      GetArenaNoVirtual());
  }
  pending_changelist_ = from.pending_changelist_;
  clear_has_kind();
  switch (from.kind_case()) {
    case kChangelist: {
      _internal_set_changelist(from._internal_changelist());
      break;
    }
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CommitId)
}

void CommitId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_changelist_ = PROTOBUF_LONGLONG(0);
  clear_has_kind();
}

CommitId::~CommitId() {
  // @@protoc_insertion_point(destructor:tensorflow.CommitId)
  SharedDtor();
}

void CommitId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  snapshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_kind()) {
    clear_kind();
  }
}

void CommitId::ArenaDtor(void* object) {
  CommitId* _this = reinterpret_cast< CommitId* >(object);
  (void)_this;
}
void CommitId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitId& CommitId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitId_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void CommitId::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.CommitId)
  switch (kind_case()) {
    case kChangelist: {
      // No need to clear
      break;
    }
    case kHash: {
      kind_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CommitId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CommitId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  pending_changelist_ = PROTOBUF_LONGLONG(0);
  clear_kind();
  _internal_metadata_.Clear();
}

const char* CommitId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 changelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_changelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hash(), ptr, ctx, "tensorflow.CommitId.hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshot(), ptr, ctx, "tensorflow.CommitId.snapshot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pending_changelist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pending_changelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CommitId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 changelist = 1;
  if (_internal_has_changelist()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_changelist(), target);
  }

  // string hash = 2;
  if (_internal_has_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // string snapshot = 3;
  if (this->snapshot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot().data(), static_cast<int>(this->_internal_snapshot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.snapshot");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshot(), target);
  }

  // int64 pending_changelist = 4;
  if (this->pending_changelist() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_pending_changelist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CommitId)
  return target;
}

size_t CommitId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CommitId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 3;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot());
  }

  // int64 pending_changelist = 4;
  if (this->pending_changelist() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pending_changelist());
  }

  switch (kind_case()) {
    // int64 changelist = 1;
    case kChangelist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_changelist());
      break;
    }
    // string hash = 2;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CommitId)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CommitId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CommitId)
    MergeFrom(*source);
  }
}

void CommitId::MergeFrom(const CommitId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CommitId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    _internal_set_snapshot(from._internal_snapshot());
  }
  if (from.pending_changelist() != 0) {
    _internal_set_pending_changelist(from._internal_pending_changelist());
  }
  switch (from.kind_case()) {
    case kChangelist: {
      _internal_set_changelist(from._internal_changelist());
      break;
    }
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void CommitId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CommitId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitId::CopyFrom(const CommitId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CommitId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitId::IsInitialized() const {
  return true;
}

void CommitId::InternalSwap(CommitId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshot_.Swap(&other->snapshot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pending_changelist_, other->pending_changelist_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CPUInfo_CacheSizeEntry_DoNotUse::CPUInfo_CacheSizeEntry_DoNotUse() {}
CPUInfo_CacheSizeEntry_DoNotUse::CPUInfo_CacheSizeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CPUInfo_CacheSizeEntry_DoNotUse::MergeFrom(const CPUInfo_CacheSizeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo_CacheSizeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CPUInfo_CacheSizeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CPUInfo::InitAsDefaultInstance() {
}
class CPUInfo::_Internal {
 public:
};

CPUInfo::CPUInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CPUInfo)
}
CPUInfo::CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  cache_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CPUInfo)
}
CPUInfo::CPUInfo(const CPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_size_.MergeFrom(from.cache_size_);
  cpu_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_info().empty()) {
    cpu_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_info(),
      GetArenaNoVirtual());
  }
  cpu_governor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_governor().empty()) {
    cpu_governor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cpu_governor(),
      GetArenaNoVirtual());
  }
  ::memcpy(&num_cores_, &from.num_cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&mhz_per_cpu_) -
    reinterpret_cast<char*>(&num_cores_)) + sizeof(mhz_per_cpu_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CPUInfo)
}

void CPUInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  cpu_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_governor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mhz_per_cpu_) -
      reinterpret_cast<char*>(&num_cores_)) + sizeof(mhz_per_cpu_));
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CPUInfo)
  SharedDtor();
}

void CPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  cpu_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_governor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUInfo::ArenaDtor(void* object) {
  CPUInfo* _this = reinterpret_cast< CPUInfo* >(object);
  (void)_this;
}
void CPUInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPUInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPUInfo& CPUInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void CPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cache_size_.Clear();
  cpu_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  cpu_governor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&num_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mhz_per_cpu_) -
      reinterpret_cast<char*>(&num_cores_)) + sizeof(mhz_per_cpu_));
  _internal_metadata_.Clear();
}

const char* CPUInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 num_cores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_cores_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_cores_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mhz_per_cpu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          mhz_per_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string cpu_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cpu_info(), ptr, ctx, "tensorflow.CPUInfo.cpu_info");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu_governor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cpu_governor(), ptr, ctx, "tensorflow.CPUInfo.cpu_governor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> cache_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cache_size_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPUInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_cores = 1;
  if (this->num_cores() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_cores(), target);
  }

  // int64 num_cores_allowed = 2;
  if (this->num_cores_allowed() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_cores_allowed(), target);
  }

  // double mhz_per_cpu = 3;
  if (!(this->mhz_per_cpu() <= 0 && this->mhz_per_cpu() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mhz_per_cpu(), target);
  }

  // string cpu_info = 4;
  if (this->cpu_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_info().data(), static_cast<int>(this->_internal_cpu_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpu_info(), target);
  }

  // string cpu_governor = 5;
  if (this->cpu_governor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_governor().data(), static_cast<int>(this->_internal_cpu_governor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_governor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cpu_governor(), target);
  }

  // map<string, int64> cache_size = 6;
  if (!this->_internal_cache_size().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CPUInfo.CacheSizeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cache_size().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cache_size().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_cache_size().begin();
          it != this->_internal_cache_size().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CPUInfo_CacheSizeEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_cache_size().begin();
          it != this->_internal_cache_size().end(); ++it) {
        target = CPUInfo_CacheSizeEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CPUInfo)
  return target;
}

size_t CPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CPUInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> cache_size = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cache_size_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_cache_size().begin();
      it != this->_internal_cache_size().end(); ++it) {
    total_size += CPUInfo_CacheSizeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string cpu_info = 4;
  if (this->cpu_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_info());
  }

  // string cpu_governor = 5;
  if (this->cpu_governor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_governor());
  }

  // int64 num_cores = 1;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_cores());
  }

  // int64 num_cores_allowed = 2;
  if (this->num_cores_allowed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_cores_allowed());
  }

  // double mhz_per_cpu = 3;
  if (!(this->mhz_per_cpu() <= 0 && this->mhz_per_cpu() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPUInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPUInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPUInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CPUInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CPUInfo)
    MergeFrom(*source);
  }
}

void CPUInfo::MergeFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cache_size_.MergeFrom(from.cache_size_);
  if (from.cpu_info().size() > 0) {
    _internal_set_cpu_info(from._internal_cpu_info());
  }
  if (from.cpu_governor().size() > 0) {
    _internal_set_cpu_governor(from._internal_cpu_governor());
  }
  if (from.num_cores() != 0) {
    _internal_set_num_cores(from._internal_num_cores());
  }
  if (from.num_cores_allowed() != 0) {
    _internal_set_num_cores_allowed(from._internal_num_cores_allowed());
  }
  if (!(from.mhz_per_cpu() <= 0 && from.mhz_per_cpu() >= 0)) {
    _internal_set_mhz_per_cpu(from._internal_mhz_per_cpu());
  }
}

void CPUInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUInfo::IsInitialized() const {
  return true;
}

void CPUInfo::InternalSwap(CPUInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cache_size_.Swap(&other->cache_size_);
  cpu_info_.Swap(&other->cpu_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpu_governor_.Swap(&other->cpu_governor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_cores_, other->num_cores_);
  swap(num_cores_allowed_, other->num_cores_allowed_);
  swap(mhz_per_cpu_, other->mhz_per_cpu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryInfo::InitAsDefaultInstance() {
}
class MemoryInfo::_Internal {
 public:
};

MemoryInfo::MemoryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryInfo)
}
MemoryInfo::MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryInfo)
}
MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&total_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryInfo)
}

void MemoryInfo::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&total_)) + sizeof(available_));
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryInfo)
  SharedDtor();
}

void MemoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MemoryInfo::ArenaDtor(void* object) {
  MemoryInfo* _this = reinterpret_cast< MemoryInfo* >(object);
  (void)_this;
}
void MemoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryInfo& MemoryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&total_)) + sizeof(available_));
  _internal_metadata_.Clear();
}

const char* MemoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->total() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total(), target);
  }

  // int64 available = 2;
  if (this->available() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  // int64 available = 2;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_available());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryInfo)
    MergeFrom(*source);
  }
}

void MemoryInfo::MergeFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
}

void MemoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {
  return true;
}

void MemoryInfo::InternalSwap(MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(total_, other->total_);
  swap(available_, other->available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUInfo::InitAsDefaultInstance() {
}
class GPUInfo::_Internal {
 public:
};

GPUInfo::GPUInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GPUInfo)
}
GPUInfo::GPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUInfo)
}
GPUInfo::GPUInfo(const GPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model(),
      GetArenaNoVirtual());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArenaNoVirtual());
  }
  bus_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bus_id().empty()) {
    bus_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bus_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUInfo)
}

void GPUInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bus_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GPUInfo::~GPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUInfo)
  SharedDtor();
}

void GPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bus_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUInfo::ArenaDtor(void* object) {
  GPUInfo* _this = reinterpret_cast< GPUInfo* >(object);
  (void)_this;
}
void GPUInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUInfo& GPUInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void GPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bus_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GPUInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_model(), ptr, ctx, "tensorflow.GPUInfo.model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uuid(), ptr, ctx, "tensorflow.GPUInfo.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bus_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_bus_id(), ptr, ctx, "tensorflow.GPUInfo.bus_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // string bus_id = 3;
  if (this->bus_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_id().data(), static_cast<int>(this->_internal_bus_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.bus_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bus_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUInfo)
  return target;
}

size_t GPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string bus_id = 3;
  if (this->bus_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GPUInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GPUInfo)
    MergeFrom(*source);
  }
}

void GPUInfo::MergeFrom(const GPUInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.bus_id().size() > 0) {
    _internal_set_bus_id(from._internal_bus_id());
  }
}

void GPUInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUInfo::CopyFrom(const GPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUInfo::IsInitialized() const {
  return true;
}

void GPUInfo::InternalSwap(GPUInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bus_id_.Swap(&other->bus_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlatformInfo::InitAsDefaultInstance() {
}
class PlatformInfo::_Internal {
 public:
};

PlatformInfo::PlatformInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PlatformInfo)
}
PlatformInfo::PlatformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PlatformInfo)
}
PlatformInfo::PlatformInfo(const PlatformInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bits().empty()) {
    bits_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bits(),
      GetArenaNoVirtual());
  }
  linkage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_linkage().empty()) {
    linkage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linkage(),
      GetArenaNoVirtual());
  }
  machine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machine().empty()) {
    machine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_machine(),
      GetArenaNoVirtual());
  }
  release_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_release().empty()) {
    release_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release(),
      GetArenaNoVirtual());
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system(),
      GetArenaNoVirtual());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PlatformInfo)
}

void PlatformInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  bits_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlatformInfo::~PlatformInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.PlatformInfo)
  SharedDtor();
}

void PlatformInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  bits_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlatformInfo::ArenaDtor(void* object) {
  PlatformInfo* _this = reinterpret_cast< PlatformInfo* >(object);
  (void)_this;
}
void PlatformInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlatformInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlatformInfo& PlatformInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlatformInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void PlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PlatformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bits_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  linkage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  machine_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  release_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* PlatformInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_bits(), ptr, ctx, "tensorflow.PlatformInfo.bits");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string linkage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_linkage(), ptr, ctx, "tensorflow.PlatformInfo.linkage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_machine(), ptr, ctx, "tensorflow.PlatformInfo.machine");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_release(), ptr, ctx, "tensorflow.PlatformInfo.release");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "tensorflow.PlatformInfo.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_version(), ptr, ctx, "tensorflow.PlatformInfo.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlatformInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PlatformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bits = 1;
  if (this->bits().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bits().data(), static_cast<int>(this->_internal_bits().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.bits");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bits(), target);
  }

  // string linkage = 2;
  if (this->linkage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkage().data(), static_cast<int>(this->_internal_linkage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.linkage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_linkage(), target);
  }

  // string machine = 3;
  if (this->machine().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine().data(), static_cast<int>(this->_internal_machine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.machine");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine(), target);
  }

  // string release = 4;
  if (this->release().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_release().data(), static_cast<int>(this->_internal_release().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.release");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_release(), target);
  }

  // string system = 5;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.system");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_system(), target);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PlatformInfo)
  return target;
}

size_t PlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PlatformInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bits = 1;
  if (this->bits().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bits());
  }

  // string linkage = 2;
  if (this->linkage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkage());
  }

  // string machine = 3;
  if (this->machine().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine());
  }

  // string release = 4;
  if (this->release().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_release());
  }

  // string system = 5;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlatformInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlatformInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlatformInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PlatformInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PlatformInfo)
    MergeFrom(*source);
  }
}

void PlatformInfo::MergeFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bits().size() > 0) {
    _internal_set_bits(from._internal_bits());
  }
  if (from.linkage().size() > 0) {
    _internal_set_linkage(from._internal_linkage());
  }
  if (from.machine().size() > 0) {
    _internal_set_machine(from._internal_machine());
  }
  if (from.release().size() > 0) {
    _internal_set_release(from._internal_release());
  }
  if (from.system().size() > 0) {
    _internal_set_system(from._internal_system());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void PlatformInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformInfo::CopyFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformInfo::IsInitialized() const {
  return true;
}

void PlatformInfo::InternalSwap(PlatformInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bits_.Swap(&other->bits_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  linkage_.Swap(&other->linkage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  machine_.Swap(&other->machine_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  release_.Swap(&other->release_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatformInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvailableDeviceInfo::InitAsDefaultInstance() {
}
class AvailableDeviceInfo::_Internal {
 public:
};

AvailableDeviceInfo::AvailableDeviceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AvailableDeviceInfo)
}
AvailableDeviceInfo::AvailableDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AvailableDeviceInfo)
}
AvailableDeviceInfo::AvailableDeviceInfo(const AvailableDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArenaNoVirtual());
  }
  physical_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physical_description().empty()) {
    physical_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_physical_description(),
      GetArenaNoVirtual());
  }
  memory_limit_ = from.memory_limit_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.AvailableDeviceInfo)
}

void AvailableDeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physical_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_limit_ = PROTOBUF_LONGLONG(0);
}

AvailableDeviceInfo::~AvailableDeviceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.AvailableDeviceInfo)
  SharedDtor();
}

void AvailableDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physical_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AvailableDeviceInfo::ArenaDtor(void* object) {
  AvailableDeviceInfo* _this = reinterpret_cast< AvailableDeviceInfo* >(object);
  (void)_this;
}
void AvailableDeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvailableDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvailableDeviceInfo& AvailableDeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvailableDeviceInfo_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void AvailableDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AvailableDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  physical_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  memory_limit_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AvailableDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.AvailableDeviceInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "tensorflow.AvailableDeviceInfo.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string physical_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_physical_description(), ptr, ctx, "tensorflow.AvailableDeviceInfo.physical_description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvailableDeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AvailableDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // int64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_memory_limit(), target);
  }

  // string physical_description = 4;
  if (this->physical_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_description().data(), static_cast<int>(this->_internal_physical_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.physical_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_physical_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AvailableDeviceInfo)
  return target;
}

size_t AvailableDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AvailableDeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string physical_description = 4;
  if (this->physical_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_description());
  }

  // int64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvailableDeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AvailableDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvailableDeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvailableDeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AvailableDeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AvailableDeviceInfo)
    MergeFrom(*source);
  }
}

void AvailableDeviceInfo::MergeFrom(const AvailableDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AvailableDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.physical_description().size() > 0) {
    _internal_set_physical_description(from._internal_physical_description());
  }
  if (from.memory_limit() != 0) {
    _internal_set_memory_limit(from._internal_memory_limit());
  }
}

void AvailableDeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AvailableDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableDeviceInfo::CopyFrom(const AvailableDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AvailableDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableDeviceInfo::IsInitialized() const {
  return true;
}

void AvailableDeviceInfo::InternalSwap(AvailableDeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  physical_description_.Swap(&other->physical_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(memory_limit_, other->memory_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailableDeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MachineConfiguration::InitAsDefaultInstance() {
  ::tensorflow::_MachineConfiguration_default_instance_._instance.get_mutable()->platform_info_ = const_cast< ::tensorflow::PlatformInfo*>(
      ::tensorflow::PlatformInfo::internal_default_instance());
  ::tensorflow::_MachineConfiguration_default_instance_._instance.get_mutable()->cpu_info_ = const_cast< ::tensorflow::CPUInfo*>(
      ::tensorflow::CPUInfo::internal_default_instance());
  ::tensorflow::_MachineConfiguration_default_instance_._instance.get_mutable()->memory_info_ = const_cast< ::tensorflow::MemoryInfo*>(
      ::tensorflow::MemoryInfo::internal_default_instance());
}
class MachineConfiguration::_Internal {
 public:
  static const ::tensorflow::PlatformInfo& platform_info(const MachineConfiguration* msg);
  static const ::tensorflow::CPUInfo& cpu_info(const MachineConfiguration* msg);
  static const ::tensorflow::MemoryInfo& memory_info(const MachineConfiguration* msg);
};

const ::tensorflow::PlatformInfo&
MachineConfiguration::_Internal::platform_info(const MachineConfiguration* msg) {
  return *msg->platform_info_;
}
const ::tensorflow::CPUInfo&
MachineConfiguration::_Internal::cpu_info(const MachineConfiguration* msg) {
  return *msg->cpu_info_;
}
const ::tensorflow::MemoryInfo&
MachineConfiguration::_Internal::memory_info(const MachineConfiguration* msg) {
  return *msg->memory_info_;
}
void MachineConfiguration::unsafe_arena_set_allocated_platform_info(
    ::tensorflow::PlatformInfo* platform_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete platform_info_;
  }
  platform_info_ = platform_info;
  if (platform_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.platform_info)
}
void MachineConfiguration::unsafe_arena_set_allocated_cpu_info(
    ::tensorflow::CPUInfo* cpu_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete cpu_info_;
  }
  cpu_info_ = cpu_info;
  if (cpu_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.cpu_info)
}
void MachineConfiguration::clear_device_info() {
  device_info_.Clear();
}
void MachineConfiguration::unsafe_arena_set_allocated_memory_info(
    ::tensorflow::MemoryInfo* memory_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete memory_info_;
  }
  memory_info_ = memory_info;
  if (memory_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.memory_info)
}
MachineConfiguration::MachineConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MachineConfiguration)
}
MachineConfiguration::MachineConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  device_info_(arena),
  available_device_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MachineConfiguration)
}
MachineConfiguration::MachineConfiguration(const MachineConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_info_(from.device_info_),
      available_device_info_(from.available_device_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArenaNoVirtual());
  }
  serial_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial_identifier().empty()) {
    serial_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serial_identifier(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_platform_info()) {
    platform_info_ = new ::tensorflow::PlatformInfo(*from.platform_info_);
  } else {
    platform_info_ = nullptr;
  }
  if (from._internal_has_cpu_info()) {
    cpu_info_ = new ::tensorflow::CPUInfo(*from.cpu_info_);
  } else {
    cpu_info_ = nullptr;
  }
  if (from._internal_has_memory_info()) {
    memory_info_ = new ::tensorflow::MemoryInfo(*from.memory_info_);
  } else {
    memory_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MachineConfiguration)
}

void MachineConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&platform_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_info_) -
      reinterpret_cast<char*>(&platform_info_)) + sizeof(memory_info_));
}

MachineConfiguration::~MachineConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.MachineConfiguration)
  SharedDtor();
}

void MachineConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete platform_info_;
  if (this != internal_default_instance()) delete cpu_info_;
  if (this != internal_default_instance()) delete memory_info_;
}

void MachineConfiguration::ArenaDtor(void* object) {
  MachineConfiguration* _this = reinterpret_cast< MachineConfiguration* >(object);
  (void)_this;
}
void MachineConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MachineConfiguration& MachineConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MachineConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void MachineConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MachineConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_info_.Clear();
  available_device_info_.Clear();
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  serial_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && platform_info_ != nullptr) {
    delete platform_info_;
  }
  platform_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cpu_info_ != nullptr) {
    delete cpu_info_;
  }
  cpu_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && memory_info_ != nullptr) {
    delete memory_info_;
  }
  memory_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MachineConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hostname(), ptr, ctx, "tensorflow.MachineConfiguration.hostname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.PlatformInfo platform_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_platform_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CPUInfo cpu_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any device_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_device_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.MemoryInfo memory_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serial_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_serial_identifier(), ptr, ctx, "tensorflow.MachineConfiguration.serial_identifier");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MachineConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MachineConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .tensorflow.PlatformInfo platform_info = 2;
  if (this->has_platform_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::platform_info(this), target, stream);
  }

  // .tensorflow.CPUInfo cpu_info = 3;
  if (this->has_cpu_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::cpu_info(this), target, stream);
  }

  // repeated .google.protobuf.Any device_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_info_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_device_info(i), target, stream);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_available_device_info_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_available_device_info(i), target, stream);
  }

  // .tensorflow.MemoryInfo memory_info = 6;
  if (this->has_memory_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::memory_info(this), target, stream);
  }

  // string serial_identifier = 7;
  if (this->serial_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_identifier().data(), static_cast<int>(this->_internal_serial_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.serial_identifier");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_serial_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MachineConfiguration)
  return target;
}

size_t MachineConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MachineConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any device_info = 4;
  total_size += 1UL * this->_internal_device_info_size();
  for (const auto& msg : this->device_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  total_size += 1UL * this->_internal_available_device_info_size();
  for (const auto& msg : this->available_device_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string serial_identifier = 7;
  if (this->serial_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_identifier());
  }

  // .tensorflow.PlatformInfo platform_info = 2;
  if (this->has_platform_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *platform_info_);
  }

  // .tensorflow.CPUInfo cpu_info = 3;
  if (this->has_cpu_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_info_);
  }

  // .tensorflow.MemoryInfo memory_info = 6;
  if (this->has_memory_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MachineConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MachineConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MachineConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MachineConfiguration)
    MergeFrom(*source);
  }
}

void MachineConfiguration::MergeFrom(const MachineConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MachineConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_info_.MergeFrom(from.device_info_);
  available_device_info_.MergeFrom(from.available_device_info_);
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.serial_identifier().size() > 0) {
    _internal_set_serial_identifier(from._internal_serial_identifier());
  }
  if (from.has_platform_info()) {
    _internal_mutable_platform_info()->::tensorflow::PlatformInfo::MergeFrom(from._internal_platform_info());
  }
  if (from.has_cpu_info()) {
    _internal_mutable_cpu_info()->::tensorflow::CPUInfo::MergeFrom(from._internal_cpu_info());
  }
  if (from.has_memory_info()) {
    _internal_mutable_memory_info()->::tensorflow::MemoryInfo::MergeFrom(from._internal_memory_info());
  }
}

void MachineConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MachineConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineConfiguration::CopyFrom(const MachineConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MachineConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineConfiguration::IsInitialized() const {
  return true;
}

void MachineConfiguration::InternalSwap(MachineConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_info_.InternalSwap(&other->device_info_);
  available_device_info_.InternalSwap(&other->available_device_info_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_identifier_.Swap(&other->serial_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(platform_info_, other->platform_info_);
  swap(cpu_info_, other->cpu_info_);
  swap(memory_info_, other->memory_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RunConfiguration_EnvVarsEntry_DoNotUse::RunConfiguration_EnvVarsEntry_DoNotUse() {}
RunConfiguration_EnvVarsEntry_DoNotUse::RunConfiguration_EnvVarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RunConfiguration_EnvVarsEntry_DoNotUse::MergeFrom(const RunConfiguration_EnvVarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RunConfiguration_EnvVarsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RunConfiguration_EnvVarsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RunConfiguration::InitAsDefaultInstance() {
}
class RunConfiguration::_Internal {
 public:
};

RunConfiguration::RunConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunConfiguration)
}
RunConfiguration::RunConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  argument_(arena),
  env_vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunConfiguration)
}
RunConfiguration::RunConfiguration(const RunConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      argument_(from.argument_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  env_vars_.MergeFrom(from.env_vars_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunConfiguration)
}

void RunConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
}

RunConfiguration::~RunConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.RunConfiguration)
  SharedDtor();
}

void RunConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void RunConfiguration::ArenaDtor(void* object) {
  RunConfiguration* _this = reinterpret_cast< RunConfiguration* >(object);
  (void)_this;
}
void RunConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunConfiguration& RunConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunConfiguration_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void RunConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_.Clear();
  env_vars_.Clear();
  _internal_metadata_.Clear();
}

const char* RunConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_argument(), ptr, ctx, "tensorflow.RunConfiguration.argument");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> env_vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&env_vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string argument = 1;
  for (int i = 0, n = this->_internal_argument_size(); i < n; i++) {
    const auto& s = this->_internal_argument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunConfiguration.argument");
    target = stream->WriteString(1, s, target);
  }

  // map<string, string> env_vars = 2;
  if (!this->_internal_env_vars().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RunConfiguration.EnvVarsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RunConfiguration.EnvVarsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_env_vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_env_vars().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env_vars().begin();
          it != this->_internal_env_vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RunConfiguration_EnvVarsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env_vars().begin();
          it != this->_internal_env_vars().end(); ++it) {
        target = RunConfiguration_EnvVarsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunConfiguration)
  return target;
}

size_t RunConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string argument = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(argument_.size());
  for (int i = 0, n = argument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      argument_.Get(i));
  }

  // map<string, string> env_vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env_vars().begin();
      it != this->_internal_env_vars().end(); ++it) {
    total_size += RunConfiguration_EnvVarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RunConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunConfiguration)
    MergeFrom(*source);
  }
}

void RunConfiguration::MergeFrom(const RunConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argument_.MergeFrom(from.argument_);
  env_vars_.MergeFrom(from.env_vars_);
}

void RunConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunConfiguration::CopyFrom(const RunConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunConfiguration::IsInitialized() const {
  return true;
}

void RunConfiguration::InternalSwap(RunConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  argument_.InternalSwap(&other->argument_);
  env_vars_.Swap(&other->env_vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestResults::InitAsDefaultInstance() {
  ::tensorflow::_TestResults_default_instance_._instance.get_mutable()->entries_ = const_cast< ::tensorflow::BenchmarkEntries*>(
      ::tensorflow::BenchmarkEntries::internal_default_instance());
  ::tensorflow::_TestResults_default_instance_._instance.get_mutable()->build_configuration_ = const_cast< ::tensorflow::BuildConfiguration*>(
      ::tensorflow::BuildConfiguration::internal_default_instance());
  ::tensorflow::_TestResults_default_instance_._instance.get_mutable()->commit_id_ = const_cast< ::tensorflow::CommitId*>(
      ::tensorflow::CommitId::internal_default_instance());
  ::tensorflow::_TestResults_default_instance_._instance.get_mutable()->machine_configuration_ = const_cast< ::tensorflow::MachineConfiguration*>(
      ::tensorflow::MachineConfiguration::internal_default_instance());
  ::tensorflow::_TestResults_default_instance_._instance.get_mutable()->run_configuration_ = const_cast< ::tensorflow::RunConfiguration*>(
      ::tensorflow::RunConfiguration::internal_default_instance());
}
class TestResults::_Internal {
 public:
  static const ::tensorflow::BenchmarkEntries& entries(const TestResults* msg);
  static const ::tensorflow::BuildConfiguration& build_configuration(const TestResults* msg);
  static const ::tensorflow::CommitId& commit_id(const TestResults* msg);
  static const ::tensorflow::MachineConfiguration& machine_configuration(const TestResults* msg);
  static const ::tensorflow::RunConfiguration& run_configuration(const TestResults* msg);
};

const ::tensorflow::BenchmarkEntries&
TestResults::_Internal::entries(const TestResults* msg) {
  return *msg->entries_;
}
const ::tensorflow::BuildConfiguration&
TestResults::_Internal::build_configuration(const TestResults* msg) {
  return *msg->build_configuration_;
}
const ::tensorflow::CommitId&
TestResults::_Internal::commit_id(const TestResults* msg) {
  return *msg->commit_id_;
}
const ::tensorflow::MachineConfiguration&
TestResults::_Internal::machine_configuration(const TestResults* msg) {
  return *msg->machine_configuration_;
}
const ::tensorflow::RunConfiguration&
TestResults::_Internal::run_configuration(const TestResults* msg) {
  return *msg->run_configuration_;
}
void TestResults::unsafe_arena_set_allocated_entries(
    ::tensorflow::BenchmarkEntries* entries) {
  if (GetArenaNoVirtual() == nullptr) {
    delete entries_;
  }
  entries_ = entries;
  if (entries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.entries)
}
void TestResults::unsafe_arena_set_allocated_build_configuration(
    ::tensorflow::BuildConfiguration* build_configuration) {
  if (GetArenaNoVirtual() == nullptr) {
    delete build_configuration_;
  }
  build_configuration_ = build_configuration;
  if (build_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.build_configuration)
}
void TestResults::unsafe_arena_set_allocated_commit_id(
    ::tensorflow::CommitId* commit_id) {
  if (GetArenaNoVirtual() == nullptr) {
    delete commit_id_;
  }
  commit_id_ = commit_id;
  if (commit_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.commit_id)
}
void TestResults::unsafe_arena_set_allocated_machine_configuration(
    ::tensorflow::MachineConfiguration* machine_configuration) {
  if (GetArenaNoVirtual() == nullptr) {
    delete machine_configuration_;
  }
  machine_configuration_ = machine_configuration;
  if (machine_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.machine_configuration)
}
void TestResults::unsafe_arena_set_allocated_run_configuration(
    ::tensorflow::RunConfiguration* run_configuration) {
  if (GetArenaNoVirtual() == nullptr) {
    delete run_configuration_;
  }
  run_configuration_ = run_configuration;
  if (run_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.run_configuration)
}
TestResults::TestResults()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TestResults)
}
TestResults::TestResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TestResults)
}
TestResults::TestResults(const TestResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  run_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_mode().empty()) {
    run_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_run_mode(),
      GetArenaNoVirtual());
  }
  tf_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tf_version().empty()) {
    tf_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tf_version(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_entries()) {
    entries_ = new ::tensorflow::BenchmarkEntries(*from.entries_);
  } else {
    entries_ = nullptr;
  }
  if (from._internal_has_build_configuration()) {
    build_configuration_ = new ::tensorflow::BuildConfiguration(*from.build_configuration_);
  } else {
    build_configuration_ = nullptr;
  }
  if (from._internal_has_commit_id()) {
    commit_id_ = new ::tensorflow::CommitId(*from.commit_id_);
  } else {
    commit_id_ = nullptr;
  }
  if (from._internal_has_machine_configuration()) {
    machine_configuration_ = new ::tensorflow::MachineConfiguration(*from.machine_configuration_);
  } else {
    machine_configuration_ = nullptr;
  }
  if (from._internal_has_run_configuration()) {
    run_configuration_ = new ::tensorflow::RunConfiguration(*from.run_configuration_);
  } else {
    run_configuration_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&benchmark_type_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(benchmark_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TestResults)
}

void TestResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&benchmark_type_) -
      reinterpret_cast<char*>(&entries_)) + sizeof(benchmark_type_));
}

TestResults::~TestResults() {
  // @@protoc_insertion_point(destructor:tensorflow.TestResults)
  SharedDtor();
}

void TestResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tf_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entries_;
  if (this != internal_default_instance()) delete build_configuration_;
  if (this != internal_default_instance()) delete commit_id_;
  if (this != internal_default_instance()) delete machine_configuration_;
  if (this != internal_default_instance()) delete run_configuration_;
}

void TestResults::ArenaDtor(void* object) {
  TestResults* _this = reinterpret_cast< TestResults* >(object);
  (void)_this;
}
void TestResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestResults& TestResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestResults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto.base);
  return *internal_default_instance();
}


void TestResults::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TestResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  run_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tf_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && entries_ != nullptr) {
    delete entries_;
  }
  entries_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && build_configuration_ != nullptr) {
    delete build_configuration_;
  }
  build_configuration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && commit_id_ != nullptr) {
    delete commit_id_;
  }
  commit_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && machine_configuration_ != nullptr) {
    delete machine_configuration_;
  }
  machine_configuration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && run_configuration_ != nullptr) {
    delete run_configuration_;
  }
  run_configuration_ = nullptr;
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&benchmark_type_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(benchmark_type_));
  _internal_metadata_.Clear();
}

const char* TestResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_target(), ptr, ctx, "tensorflow.TestResults.target");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.BenchmarkEntries entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entries(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.BuildConfiguration build_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CommitId commit_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double run_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tensorflow.MachineConfiguration machine_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunConfiguration run_configuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.TestResults.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_benchmark_type(static_cast<::tensorflow::TestResults_BenchmarkType>(val));
        } else goto handle_unusual;
        continue;
      // string run_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_run_mode(), ptr, ctx, "tensorflow.TestResults.run_mode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tf_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_tf_version(), ptr, ctx, "tensorflow.TestResults.tf_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestResults::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TestResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // .tensorflow.BenchmarkEntries entries = 2;
  if (this->has_entries()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::entries(this), target, stream);
  }

  // .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->has_build_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::build_configuration(this), target, stream);
  }

  // .tensorflow.CommitId commit_id = 4;
  if (this->has_commit_id()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::commit_id(this), target, stream);
  }

  // int64 start_time = 5;
  if (this->start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_start_time(), target);
  }

  // double run_time = 6;
  if (!(this->run_time() <= 0 && this->run_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_run_time(), target);
  }

  // .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->has_machine_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::machine_configuration(this), target, stream);
  }

  // .tensorflow.RunConfiguration run_configuration = 8;
  if (this->has_run_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::run_configuration(this), target, stream);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->benchmark_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_benchmark_type(), target);
  }

  // string run_mode = 11;
  if (this->run_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_mode().data(), static_cast<int>(this->_internal_run_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.run_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_run_mode(), target);
  }

  // string tf_version = 12;
  if (this->tf_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tf_version().data(), static_cast<int>(this->_internal_tf_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.tf_version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tf_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TestResults)
  return target;
}

size_t TestResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TestResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string run_mode = 11;
  if (this->run_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_mode());
  }

  // string tf_version = 12;
  if (this->tf_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tf_version());
  }

  // .tensorflow.BenchmarkEntries entries = 2;
  if (this->has_entries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entries_);
  }

  // .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->has_build_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_configuration_);
  }

  // .tensorflow.CommitId commit_id = 4;
  if (this->has_commit_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_id_);
  }

  // .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->has_machine_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_configuration_);
  }

  // .tensorflow.RunConfiguration run_configuration = 8;
  if (this->has_run_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_configuration_);
  }

  // int64 start_time = 5;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // double run_time = 6;
  if (!(this->run_time() <= 0 && this->run_time() >= 0)) {
    total_size += 1 + 8;
  }

  // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->benchmark_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_benchmark_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TestResults)
  GOOGLE_DCHECK_NE(&from, this);
  const TestResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TestResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TestResults)
    MergeFrom(*source);
  }
}

void TestResults::MergeFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TestResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.run_mode().size() > 0) {
    _internal_set_run_mode(from._internal_run_mode());
  }
  if (from.tf_version().size() > 0) {
    _internal_set_tf_version(from._internal_tf_version());
  }
  if (from.has_entries()) {
    _internal_mutable_entries()->::tensorflow::BenchmarkEntries::MergeFrom(from._internal_entries());
  }
  if (from.has_build_configuration()) {
    _internal_mutable_build_configuration()->::tensorflow::BuildConfiguration::MergeFrom(from._internal_build_configuration());
  }
  if (from.has_commit_id()) {
    _internal_mutable_commit_id()->::tensorflow::CommitId::MergeFrom(from._internal_commit_id());
  }
  if (from.has_machine_configuration()) {
    _internal_mutable_machine_configuration()->::tensorflow::MachineConfiguration::MergeFrom(from._internal_machine_configuration());
  }
  if (from.has_run_configuration()) {
    _internal_mutable_run_configuration()->::tensorflow::RunConfiguration::MergeFrom(from._internal_run_configuration());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!(from.run_time() <= 0 && from.run_time() >= 0)) {
    _internal_set_run_time(from._internal_run_time());
  }
  if (from.benchmark_type() != 0) {
    _internal_set_benchmark_type(from._internal_benchmark_type());
  }
}

void TestResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResults::CopyFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResults::IsInitialized() const {
  return true;
}

void TestResults::InternalSwap(TestResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  run_mode_.Swap(&other->run_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tf_version_.Swap(&other->tf_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entries_, other->entries_);
  swap(build_configuration_, other->build_configuration_);
  swap(commit_id_, other->commit_id_);
  swap(machine_configuration_, other->machine_configuration_);
  swap(run_configuration_, other->run_configuration_);
  swap(start_time_, other->start_time_);
  swap(run_time_, other->run_time_);
  swap(benchmark_type_, other->benchmark_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::EntryValue* Arena::CreateMaybeMessage< ::tensorflow::EntryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::EntryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetricEntry* Arena::CreateMaybeMessage< ::tensorflow::MetricEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetricEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntry* Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntries* Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BuildConfiguration* Arena::CreateMaybeMessage< ::tensorflow::BuildConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BuildConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CommitId* Arena::CreateMaybeMessage< ::tensorflow::CommitId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CommitId >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CPUInfo* Arena::CreateMaybeMessage< ::tensorflow::CPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryInfo* Arena::CreateMaybeMessage< ::tensorflow::MemoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GPUInfo* Arena::CreateMaybeMessage< ::tensorflow::GPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PlatformInfo* Arena::CreateMaybeMessage< ::tensorflow::PlatformInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::PlatformInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AvailableDeviceInfo* Arena::CreateMaybeMessage< ::tensorflow::AvailableDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AvailableDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MachineConfiguration* Arena::CreateMaybeMessage< ::tensorflow::MachineConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MachineConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunConfiguration* Arena::CreateMaybeMessage< ::tensorflow::RunConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TestResults* Arena::CreateMaybeMessage< ::tensorflow::TestResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TestResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
