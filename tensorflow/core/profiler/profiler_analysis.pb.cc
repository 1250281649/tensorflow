// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profiler_analysis.proto

#include "tensorflow/core/profiler/profiler_analysis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto;
namespace tensorflow {
class NewProfileSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewProfileSessionRequest> _instance;
} _NewProfileSessionRequest_default_instance_;
class NewProfileSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewProfileSessionResponse> _instance;
} _NewProfileSessionResponse_default_instance_;
class EnumProfileSessionsAndToolsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnumProfileSessionsAndToolsRequest> _instance;
} _EnumProfileSessionsAndToolsRequest_default_instance_;
class ProfileSessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileSessionInfo> _instance;
} _ProfileSessionInfo_default_instance_;
class EnumProfileSessionsAndToolsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnumProfileSessionsAndToolsResponse> _instance;
} _EnumProfileSessionsAndToolsResponse_default_instance_;
class ProfileSessionDataRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileSessionDataRequest_ParametersEntry_DoNotUse> _instance;
} _ProfileSessionDataRequest_ParametersEntry_DoNotUse_default_instance_;
class ProfileSessionDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileSessionDataRequest> _instance;
} _ProfileSessionDataRequest_default_instance_;
class ProfileSessionDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileSessionDataResponse> _instance;
} _ProfileSessionDataResponse_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_EnumProfileSessionsAndToolsRequest_default_instance_;
    new (ptr) ::tensorflow::EnumProfileSessionsAndToolsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::EnumProfileSessionsAndToolsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {}};

static void InitDefaultsscc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_EnumProfileSessionsAndToolsResponse_default_instance_;
    new (ptr) ::tensorflow::EnumProfileSessionsAndToolsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::EnumProfileSessionsAndToolsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {
      &scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,}};

static void InitDefaultsscc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_NewProfileSessionRequest_default_instance_;
    new (ptr) ::tensorflow::NewProfileSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::NewProfileSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {
      &scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_NewProfileSessionResponse_default_instance_;
    new (ptr) ::tensorflow::NewProfileSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::NewProfileSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {}};

static void InitDefaultsscc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileSessionDataRequest_default_instance_;
    new (ptr) ::tensorflow::ProfileSessionDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileSessionDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {
      &scc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,}};

static void InitDefaultsscc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileSessionDataRequest_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse();
  }
  ::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {}};

static void InitDefaultsscc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileSessionDataResponse_default_instance_;
    new (ptr) ::tensorflow::ProfileSessionDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileSessionDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {}};

static void InitDefaultsscc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileSessionInfo_default_instance_;
    new (ptr) ::tensorflow::ProfileSessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileSessionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionRequest, request_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionRequest, repository_root_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionRequest, hosts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionRequest, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewProfileSessionResponse, empty_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EnumProfileSessionsAndToolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EnumProfileSessionsAndToolsRequest, repository_root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionInfo, session_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionInfo, available_tools_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EnumProfileSessionsAndToolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EnumProfileSessionsAndToolsResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::EnumProfileSessionsAndToolsResponse, sessions_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, repository_root_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, host_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, tool_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataRequest, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataResponse, output_format_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileSessionDataResponse, output_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::NewProfileSessionRequest)},
  { 9, -1, sizeof(::tensorflow::NewProfileSessionResponse)},
  { 16, -1, sizeof(::tensorflow::EnumProfileSessionsAndToolsRequest)},
  { 22, -1, sizeof(::tensorflow::ProfileSessionInfo)},
  { 29, -1, sizeof(::tensorflow::EnumProfileSessionsAndToolsResponse)},
  { 36, 43, sizeof(::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse)},
  { 45, -1, sizeof(::tensorflow::ProfileSessionDataRequest)},
  { 55, -1, sizeof(::tensorflow::ProfileSessionDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NewProfileSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NewProfileSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_EnumProfileSessionsAndToolsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileSessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_EnumProfileSessionsAndToolsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileSessionDataRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileSessionDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileSessionDataResponse_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow/core/profiler/profiler_anal"
  "ysis.proto\022\ntensorflow\032/tensorflow/core/"
  "profiler/profiler_service.proto\"\203\001\n\030NewP"
  "rofileSessionRequest\022+\n\007request\030\001 \001(\0132\032."
  "tensorflow.ProfileRequest\022\027\n\017repository_"
  "root\030\002 \001(\t\022\r\n\005hosts\030\003 \003(\t\022\022\n\nsession_id\030"
  "\004 \001(\t\"G\n\031NewProfileSessionResponse\022\025\n\rer"
  "ror_message\030\001 \001(\t\022\023\n\013empty_trace\030\002 \001(\010\"="
  "\n\"EnumProfileSessionsAndToolsRequest\022\027\n\017"
  "repository_root\030\001 \001(\t\"A\n\022ProfileSessionI"
  "nfo\022\022\n\nsession_id\030\001 \001(\t\022\027\n\017available_too"
  "ls\030\002 \003(\t\"n\n#EnumProfileSessionsAndToolsR"
  "esponse\022\025\n\rerror_message\030\001 \001(\t\0220\n\010sessio"
  "ns\030\002 \003(\0132\036.tensorflow.ProfileSessionInfo"
  "\"\354\001\n\031ProfileSessionDataRequest\022\027\n\017reposi"
  "tory_root\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\021\n\th"
  "ost_name\030\005 \001(\t\022\021\n\ttool_name\030\003 \001(\t\022I\n\npar"
  "ameters\030\004 \003(\01325.tensorflow.ProfileSessio"
  "nDataRequest.ParametersEntry\0321\n\017Paramete"
  "rsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "Z\n\032ProfileSessionDataResponse\022\025\n\rerror_m"
  "essage\030\001 \001(\t\022\025\n\routput_format\030\002 \001(\t\022\016\n\006o"
  "utput\030\003 \001(\0142\310\002\n\017ProfileAnalysis\022[\n\nNewSe"
  "ssion\022$.tensorflow.NewProfileSessionRequ"
  "est\032%.tensorflow.NewProfileSessionRespon"
  "se\"\000\022q\n\014EnumSessions\022..tensorflow.EnumPr"
  "ofileSessionsAndToolsRequest\032/.tensorflo"
  "w.EnumProfileSessionsAndToolsResponse\"\000\022"
  "e\n\022GetSessionToolData\022%.tensorflow.Profi"
  "leSessionDataRequest\032&.tensorflow.Profil"
  "eSessionDataResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_sccs[8] = {
  &scc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_ProfileSessionDataRequest_ParametersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
  &scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto, "tensorflow/core/profiler/profiler_analysis.proto", 1230,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto, 8, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto), true);
namespace tensorflow {

// ===================================================================

void NewProfileSessionRequest::InitAsDefaultInstance() {
  ::tensorflow::_NewProfileSessionRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::tensorflow::ProfileRequest*>(
      ::tensorflow::ProfileRequest::internal_default_instance());
}
class NewProfileSessionRequest::_Internal {
 public:
  static const ::tensorflow::ProfileRequest& request(const NewProfileSessionRequest* msg);
};

const ::tensorflow::ProfileRequest&
NewProfileSessionRequest::_Internal::request(const NewProfileSessionRequest* msg) {
  return *msg->request_;
}
void NewProfileSessionRequest::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
NewProfileSessionRequest::NewProfileSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NewProfileSessionRequest)
}
NewProfileSessionRequest::NewProfileSessionRequest(const NewProfileSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hosts_(from.hosts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_root().empty()) {
    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from._internal_has_request()) {
    request_ = new ::tensorflow::ProfileRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NewProfileSessionRequest)
}

void NewProfileSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = nullptr;
}

NewProfileSessionRequest::~NewProfileSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.NewProfileSessionRequest)
  SharedDtor();
}

void NewProfileSessionRequest::SharedDtor() {
  repository_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void NewProfileSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewProfileSessionRequest& NewProfileSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewProfileSessionRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void NewProfileSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewProfileSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  repository_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

const char* NewProfileSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.ProfileRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repository_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_repository_root(), ptr, ctx, "tensorflow.NewProfileSessionRequest.repository_root");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string hosts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_hosts(), ptr, ctx, "tensorflow.NewProfileSessionRequest.hosts");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_session_id(), ptr, ctx, "tensorflow.NewProfileSessionRequest.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewProfileSessionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewProfileSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ProfileRequest request = 1;
  if (this->has_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::request(this), target, stream);
  }

  // string repository_root = 2;
  if (this->repository_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_root().data(), static_cast<int>(this->_internal_repository_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewProfileSessionRequest.repository_root");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_repository_root(), target);
  }

  // repeated string hosts = 3;
  for (int i = 0, n = this->_internal_hosts_size(); i < n; i++) {
    const auto& s = this->_internal_hosts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewProfileSessionRequest.hosts");
    target = stream->WriteString(3, s, target);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewProfileSessionRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewProfileSessionRequest)
  return target;
}

size_t NewProfileSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NewProfileSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hosts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hosts_.size());
  for (int i = 0, n = hosts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hosts_.Get(i));
  }

  // string repository_root = 2;
  if (this->repository_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_root());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .tensorflow.ProfileRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewProfileSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NewProfileSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewProfileSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewProfileSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NewProfileSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NewProfileSessionRequest)
    MergeFrom(*source);
  }
}

void NewProfileSessionRequest::MergeFrom(const NewProfileSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewProfileSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  if (from.repository_root().size() > 0) {

    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_request()) {
    _internal_mutable_request()->::tensorflow::ProfileRequest::MergeFrom(from._internal_request());
  }
}

void NewProfileSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NewProfileSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewProfileSessionRequest::CopyFrom(const NewProfileSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewProfileSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewProfileSessionRequest::IsInitialized() const {
  return true;
}

void NewProfileSessionRequest::InternalSwap(NewProfileSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hosts_.InternalSwap(&other->hosts_);
  repository_root_.Swap(&other->repository_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewProfileSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewProfileSessionResponse::InitAsDefaultInstance() {
}
class NewProfileSessionResponse::_Internal {
 public:
};

NewProfileSessionResponse::NewProfileSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NewProfileSessionResponse)
}
NewProfileSessionResponse::NewProfileSessionResponse(const NewProfileSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  empty_trace_ = from.empty_trace_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.NewProfileSessionResponse)
}

void NewProfileSessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  empty_trace_ = false;
}

NewProfileSessionResponse::~NewProfileSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.NewProfileSessionResponse)
  SharedDtor();
}

void NewProfileSessionResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewProfileSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewProfileSessionResponse& NewProfileSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewProfileSessionResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void NewProfileSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewProfileSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  empty_trace_ = false;
  _internal_metadata_.Clear();
}

const char* NewProfileSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "tensorflow.NewProfileSessionResponse.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool empty_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          empty_trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewProfileSessionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewProfileSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewProfileSessionResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // bool empty_trace = 2;
  if (this->empty_trace() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_empty_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewProfileSessionResponse)
  return target;
}

size_t NewProfileSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NewProfileSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool empty_trace = 2;
  if (this->empty_trace() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewProfileSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NewProfileSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewProfileSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewProfileSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NewProfileSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NewProfileSessionResponse)
    MergeFrom(*source);
  }
}

void NewProfileSessionResponse::MergeFrom(const NewProfileSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewProfileSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.empty_trace() != 0) {
    _internal_set_empty_trace(from._internal_empty_trace());
  }
}

void NewProfileSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NewProfileSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewProfileSessionResponse::CopyFrom(const NewProfileSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewProfileSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewProfileSessionResponse::IsInitialized() const {
  return true;
}

void NewProfileSessionResponse::InternalSwap(NewProfileSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(empty_trace_, other->empty_trace_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewProfileSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnumProfileSessionsAndToolsRequest::InitAsDefaultInstance() {
}
class EnumProfileSessionsAndToolsRequest::_Internal {
 public:
};

EnumProfileSessionsAndToolsRequest::EnumProfileSessionsAndToolsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.EnumProfileSessionsAndToolsRequest)
}
EnumProfileSessionsAndToolsRequest::EnumProfileSessionsAndToolsRequest(const EnumProfileSessionsAndToolsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_root().empty()) {
    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.EnumProfileSessionsAndToolsRequest)
}

void EnumProfileSessionsAndToolsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnumProfileSessionsAndToolsRequest::~EnumProfileSessionsAndToolsRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.EnumProfileSessionsAndToolsRequest)
  SharedDtor();
}

void EnumProfileSessionsAndToolsRequest::SharedDtor() {
  repository_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnumProfileSessionsAndToolsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnumProfileSessionsAndToolsRequest& EnumProfileSessionsAndToolsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnumProfileSessionsAndToolsRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void EnumProfileSessionsAndToolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repository_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EnumProfileSessionsAndToolsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string repository_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_repository_root(), ptr, ctx, "tensorflow.EnumProfileSessionsAndToolsRequest.repository_root");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnumProfileSessionsAndToolsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repository_root = 1;
  if (this->repository_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_root().data(), static_cast<int>(this->_internal_repository_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EnumProfileSessionsAndToolsRequest.repository_root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repository_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EnumProfileSessionsAndToolsRequest)
  return target;
}

size_t EnumProfileSessionsAndToolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repository_root = 1;
  if (this->repository_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumProfileSessionsAndToolsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumProfileSessionsAndToolsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnumProfileSessionsAndToolsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EnumProfileSessionsAndToolsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EnumProfileSessionsAndToolsRequest)
    MergeFrom(*source);
  }
}

void EnumProfileSessionsAndToolsRequest::MergeFrom(const EnumProfileSessionsAndToolsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.repository_root().size() > 0) {

    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
}

void EnumProfileSessionsAndToolsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumProfileSessionsAndToolsRequest::CopyFrom(const EnumProfileSessionsAndToolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EnumProfileSessionsAndToolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumProfileSessionsAndToolsRequest::IsInitialized() const {
  return true;
}

void EnumProfileSessionsAndToolsRequest::InternalSwap(EnumProfileSessionsAndToolsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repository_root_.Swap(&other->repository_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnumProfileSessionsAndToolsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileSessionInfo::InitAsDefaultInstance() {
}
class ProfileSessionInfo::_Internal {
 public:
};

ProfileSessionInfo::ProfileSessionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileSessionInfo)
}
ProfileSessionInfo::ProfileSessionInfo(const ProfileSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      available_tools_(from.available_tools_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileSessionInfo)
}

void ProfileSessionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileSessionInfo::~ProfileSessionInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileSessionInfo)
  SharedDtor();
}

void ProfileSessionInfo::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileSessionInfo& ProfileSessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileSessionInfo_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void ProfileSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_tools_.Clear();
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProfileSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_session_id(), ptr, ctx, "tensorflow.ProfileSessionInfo.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string available_tools = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_available_tools(), ptr, ctx, "tensorflow.ProfileSessionInfo.available_tools");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileSessionInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // repeated string available_tools = 2;
  for (int i = 0, n = this->_internal_available_tools_size(); i < n; i++) {
    const auto& s = this->_internal_available_tools(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionInfo.available_tools");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileSessionInfo)
  return target;
}

size_t ProfileSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string available_tools = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(available_tools_.size());
  for (int i = 0, n = available_tools_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      available_tools_.Get(i));
  }

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileSessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileSessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileSessionInfo)
    MergeFrom(*source);
  }
}

void ProfileSessionInfo::MergeFrom(const ProfileSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_tools_.MergeFrom(from.available_tools_);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void ProfileSessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSessionInfo::CopyFrom(const ProfileSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSessionInfo::IsInitialized() const {
  return true;
}

void ProfileSessionInfo::InternalSwap(ProfileSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  available_tools_.InternalSwap(&other->available_tools_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileSessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnumProfileSessionsAndToolsResponse::InitAsDefaultInstance() {
}
class EnumProfileSessionsAndToolsResponse::_Internal {
 public:
};

EnumProfileSessionsAndToolsResponse::EnumProfileSessionsAndToolsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.EnumProfileSessionsAndToolsResponse)
}
EnumProfileSessionsAndToolsResponse::EnumProfileSessionsAndToolsResponse(const EnumProfileSessionsAndToolsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.EnumProfileSessionsAndToolsResponse)
}

void EnumProfileSessionsAndToolsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnumProfileSessionsAndToolsResponse::~EnumProfileSessionsAndToolsResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.EnumProfileSessionsAndToolsResponse)
  SharedDtor();
}

void EnumProfileSessionsAndToolsResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnumProfileSessionsAndToolsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnumProfileSessionsAndToolsResponse& EnumProfileSessionsAndToolsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnumProfileSessionsAndToolsResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void EnumProfileSessionsAndToolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EnumProfileSessionsAndToolsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "tensorflow.EnumProfileSessionsAndToolsResponse.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.ProfileSessionInfo sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnumProfileSessionsAndToolsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EnumProfileSessionsAndToolsResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // repeated .tensorflow.ProfileSessionInfo sessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EnumProfileSessionsAndToolsResponse)
  return target;
}

size_t EnumProfileSessionsAndToolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.ProfileSessionInfo sessions = 2;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumProfileSessionsAndToolsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumProfileSessionsAndToolsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnumProfileSessionsAndToolsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EnumProfileSessionsAndToolsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EnumProfileSessionsAndToolsResponse)
    MergeFrom(*source);
  }
}

void EnumProfileSessionsAndToolsResponse::MergeFrom(const EnumProfileSessionsAndToolsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void EnumProfileSessionsAndToolsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumProfileSessionsAndToolsResponse::CopyFrom(const EnumProfileSessionsAndToolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EnumProfileSessionsAndToolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumProfileSessionsAndToolsResponse::IsInitialized() const {
  return true;
}

void EnumProfileSessionsAndToolsResponse::InternalSwap(EnumProfileSessionsAndToolsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessions_.InternalSwap(&other->sessions_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnumProfileSessionsAndToolsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProfileSessionDataRequest_ParametersEntry_DoNotUse::ProfileSessionDataRequest_ParametersEntry_DoNotUse() {}
ProfileSessionDataRequest_ParametersEntry_DoNotUse::ProfileSessionDataRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileSessionDataRequest_ParametersEntry_DoNotUse::MergeFrom(const ProfileSessionDataRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileSessionDataRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileSessionDataRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProfileSessionDataRequest::InitAsDefaultInstance() {
}
class ProfileSessionDataRequest::_Internal {
 public:
};

ProfileSessionDataRequest::ProfileSessionDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileSessionDataRequest)
}
ProfileSessionDataRequest::ProfileSessionDataRequest(const ProfileSessionDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_root().empty()) {
    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  tool_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tool_name().empty()) {
    tool_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tool_name_);
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_name().empty()) {
    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileSessionDataRequest)
}

void ProfileSessionDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tool_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileSessionDataRequest::~ProfileSessionDataRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileSessionDataRequest)
  SharedDtor();
}

void ProfileSessionDataRequest::SharedDtor() {
  repository_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tool_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileSessionDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileSessionDataRequest& ProfileSessionDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileSessionDataRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void ProfileSessionDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileSessionDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  repository_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tool_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProfileSessionDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string repository_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_repository_root(), ptr, ctx, "tensorflow.ProfileSessionDataRequest.repository_root");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_session_id(), ptr, ctx, "tensorflow.ProfileSessionDataRequest.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tool_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_tool_name(), ptr, ctx, "tensorflow.ProfileSessionDataRequest.tool_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string host_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host_name(), ptr, ctx, "tensorflow.ProfileSessionDataRequest.host_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileSessionDataRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileSessionDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repository_root = 1;
  if (this->repository_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_root().data(), static_cast<int>(this->_internal_repository_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataRequest.repository_root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repository_root(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string tool_name = 3;
  if (this->tool_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataRequest.tool_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tool_name(), target);
  }

  // map<string, string> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ProfileSessionDataRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ProfileSessionDataRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileSessionDataRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = ProfileSessionDataRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string host_name = 5;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataRequest.host_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_host_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileSessionDataRequest)
  return target;
}

size_t ProfileSessionDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileSessionDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ProfileSessionDataRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string repository_root = 1;
  if (this->repository_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_root());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string tool_name = 3;
  if (this->tool_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tool_name());
  }

  // string host_name = 5;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileSessionDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileSessionDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSessionDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileSessionDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileSessionDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileSessionDataRequest)
    MergeFrom(*source);
  }
}

void ProfileSessionDataRequest::MergeFrom(const ProfileSessionDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileSessionDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.repository_root().size() > 0) {

    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.tool_name().size() > 0) {

    tool_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tool_name_);
  }
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
}

void ProfileSessionDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileSessionDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSessionDataRequest::CopyFrom(const ProfileSessionDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileSessionDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSessionDataRequest::IsInitialized() const {
  return true;
}

void ProfileSessionDataRequest::InternalSwap(ProfileSessionDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  repository_root_.Swap(&other->repository_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tool_name_.Swap(&other->tool_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileSessionDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileSessionDataResponse::InitAsDefaultInstance() {
}
class ProfileSessionDataResponse::_Internal {
 public:
};

ProfileSessionDataResponse::ProfileSessionDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileSessionDataResponse)
}
ProfileSessionDataResponse::ProfileSessionDataResponse(const ProfileSessionDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_format().empty()) {
    output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileSessionDataResponse)
}

void ProfileSessionDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileSessionDataResponse::~ProfileSessionDataResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileSessionDataResponse)
  SharedDtor();
}

void ProfileSessionDataResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileSessionDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileSessionDataResponse& ProfileSessionDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileSessionDataResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fanalysis_2eproto.base);
  return *internal_default_instance();
}


void ProfileSessionDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileSessionDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProfileSessionDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error_message(), ptr, ctx, "tensorflow.ProfileSessionDataResponse.error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string output_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_output_format(), ptr, ctx, "tensorflow.ProfileSessionDataResponse.output_format");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_output(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileSessionDataResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileSessionDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // string output_format = 2;
  if (this->output_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_format().data(), static_cast<int>(this->_internal_output_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileSessionDataResponse.output_format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_format(), target);
  }

  // bytes output = 3;
  if (this->output().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileSessionDataResponse)
  return target;
}

size_t ProfileSessionDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileSessionDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string output_format = 2;
  if (this->output_format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_format());
  }

  // bytes output = 3;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileSessionDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileSessionDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSessionDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileSessionDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileSessionDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileSessionDataResponse)
    MergeFrom(*source);
  }
}

void ProfileSessionDataResponse::MergeFrom(const ProfileSessionDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileSessionDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.output_format().size() > 0) {

    output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void ProfileSessionDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileSessionDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSessionDataResponse::CopyFrom(const ProfileSessionDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileSessionDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSessionDataResponse::IsInitialized() const {
  return true;
}

void ProfileSessionDataResponse::InternalSwap(ProfileSessionDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_format_.Swap(&other->output_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileSessionDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::NewProfileSessionRequest* Arena::CreateMaybeMessage< ::tensorflow::NewProfileSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::NewProfileSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NewProfileSessionResponse* Arena::CreateMaybeMessage< ::tensorflow::NewProfileSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::NewProfileSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::EnumProfileSessionsAndToolsRequest* Arena::CreateMaybeMessage< ::tensorflow::EnumProfileSessionsAndToolsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::EnumProfileSessionsAndToolsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileSessionInfo* Arena::CreateMaybeMessage< ::tensorflow::ProfileSessionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::EnumProfileSessionsAndToolsResponse* Arena::CreateMaybeMessage< ::tensorflow::EnumProfileSessionsAndToolsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::EnumProfileSessionsAndToolsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileSessionDataRequest* Arena::CreateMaybeMessage< ::tensorflow::ProfileSessionDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileSessionDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileSessionDataResponse* Arena::CreateMaybeMessage< ::tensorflow::ProfileSessionDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileSessionDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
