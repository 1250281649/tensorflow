// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_log.proto

#include "tensorflow/core/profiler/tfprof_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocationRecord_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto;
namespace tensorflow {
namespace tfprof {
class CodeDef_TraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodeDef_Trace> _instance;
} _CodeDef_Trace_default_instance_;
class CodeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodeDef> _instance;
} _CodeDef_default_instance_;
class OpLogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpLogEntry> _instance;
} _OpLogEntry_default_instance_;
class OpLogProto_IdToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpLogProto_IdToStringEntry_DoNotUse> _instance;
} _OpLogProto_IdToStringEntry_DoNotUse_default_instance_;
class OpLogProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpLogProto> _instance;
} _OpLogProto_default_instance_;
class ProfileProto_NodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileProto_NodesEntry_DoNotUse> _instance;
} _ProfileProto_NodesEntry_DoNotUse_default_instance_;
class ProfileProto_IdToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileProto_IdToStringEntry_DoNotUse> _instance;
} _ProfileProto_IdToStringEntry_DoNotUse_default_instance_;
class ProfileProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileProto> _instance;
} _ProfileProto_default_instance_;
class ProfileNode_InputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_InputsEntry_DoNotUse> _instance;
} _ProfileNode_InputsEntry_DoNotUse_default_instance_;
class ProfileNode_InputShapesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_InputShapesEntry_DoNotUse> _instance;
} _ProfileNode_InputShapesEntry_DoNotUse_default_instance_;
class ProfileNode_OutputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_OutputsEntry_DoNotUse> _instance;
} _ProfileNode_OutputsEntry_DoNotUse_default_instance_;
class ProfileNode_OutputShapesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_OutputShapesEntry_DoNotUse> _instance;
} _ProfileNode_OutputShapesEntry_DoNotUse_default_instance_;
class ProfileNode_SrcOutputIndexEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_SrcOutputIndexEntry_DoNotUse> _instance;
} _ProfileNode_SrcOutputIndexEntry_DoNotUse_default_instance_;
class ProfileNode_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_AttrsEntry_DoNotUse> _instance;
} _ProfileNode_AttrsEntry_DoNotUse_default_instance_;
class ProfileNode_ExecsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode_ExecsEntry_DoNotUse> _instance;
} _ProfileNode_ExecsEntry_DoNotUse_default_instance_;
class ProfileNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNode> _instance;
} _ProfileNode_default_instance_;
class ExecProfile_AcceleratorExecsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecProfile_AcceleratorExecsEntry_DoNotUse> _instance;
} _ExecProfile_AcceleratorExecsEntry_DoNotUse_default_instance_;
class ExecProfile_CpuExecsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecProfile_CpuExecsEntry_DoNotUse> _instance;
} _ExecProfile_CpuExecsEntry_DoNotUse_default_instance_;
class ExecProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecProfile> _instance;
} _ExecProfile_default_instance_;
class ExecTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecTime> _instance;
} _ExecTime_default_instance_;
class ExecMemory_OutputMemoryEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecMemory_OutputMemoryEntry_DoNotUse> _instance;
} _ExecMemory_OutputMemoryEntry_DoNotUse_default_instance_;
class ExecMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecMemory> _instance;
} _ExecMemory_default_instance_;
class TupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tuple> _instance;
} _Tuple_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memory> _instance;
} _Memory_default_instance_;
}  // namespace tfprof
}  // namespace tensorflow
static void InitDefaultsscc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_CodeDef_default_instance_;
    new (ptr) ::tensorflow::tfprof::CodeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::CodeDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_CodeDef_Trace_default_instance_;
    new (ptr) ::tensorflow::tfprof::CodeDef_Trace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::CodeDef_Trace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecMemory_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::ExecMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecMemory_OutputMemoryEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecProfile_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::ExecProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_AllocationRecord_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecProfile_AcceleratorExecsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecProfile_CpuExecsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ExecTime_default_instance_;
    new (ptr) ::tensorflow::tfprof::ExecTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::ExecTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_Memory_default_instance_;
    new (ptr) ::tensorflow::tfprof::Memory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::Memory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_OpLogEntry_default_instance_;
    new (ptr) ::tensorflow::tfprof::OpLogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::OpLogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_OpLogProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::OpLogProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::OpLogProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_OpLogProto_IdToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse();
  }
  ::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::ProfileNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_ExecsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_InputShapesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_InputsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_OutputShapesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_OutputsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileNode_SrcOutputIndexEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::ProfileProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
      &scc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileProto_IdToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static void InitDefaultsscc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_ProfileProto_NodesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse();
  }
  ::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {
      &scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,}};

static void InitDefaultsscc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_Tuple_default_instance_;
    new (ptr) ::tensorflow::tfprof::Tuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::Tuple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, file_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, file_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, lineno_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, function_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, function_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, line_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, line_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef_Trace, func_start_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::CodeDef, traces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogEntry, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogEntry, float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogEntry, types_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogEntry, code_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto, log_entries_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OpLogProto, id_to_string_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, nodes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, has_trace_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, miss_accelerator_stream_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, steps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileProto, id_to_string_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, input_shapes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, output_shapes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, src_output_index_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, op_types_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, canonical_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, host_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, trace_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, attrs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ProfileNode, execs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, run_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, all_start_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, latest_end_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, accelerator_execs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, cpu_execs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, memory_execs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, allocations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecProfile, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecTime, times_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, memory_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, host_temp_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, host_persistent_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, accelerator_temp_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, accelerator_persistent_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, allocator_bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::ExecMemory, output_memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::Tuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::Tuple, int64_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::Memory, bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::Memory, ptr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::tfprof::CodeDef_Trace)},
  { 13, -1, sizeof(::tensorflow::tfprof::CodeDef)},
  { 19, -1, sizeof(::tensorflow::tfprof::OpLogEntry)},
  { 28, 35, sizeof(::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse)},
  { 37, -1, sizeof(::tensorflow::tfprof::OpLogProto)},
  { 44, 51, sizeof(::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse)},
  { 53, 60, sizeof(::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse)},
  { 62, -1, sizeof(::tensorflow::tfprof::ProfileProto)},
  { 72, 79, sizeof(::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse)},
  { 81, 88, sizeof(::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse)},
  { 90, 97, sizeof(::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse)},
  { 99, 106, sizeof(::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse)},
  { 108, 115, sizeof(::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse)},
  { 117, 124, sizeof(::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse)},
  { 126, 133, sizeof(::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse)},
  { 135, -1, sizeof(::tensorflow::tfprof::ProfileNode)},
  { 156, 163, sizeof(::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse)},
  { 165, 172, sizeof(::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse)},
  { 174, -1, sizeof(::tensorflow::tfprof::ExecProfile)},
  { 187, -1, sizeof(::tensorflow::tfprof::ExecTime)},
  { 193, 200, sizeof(::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse)},
  { 202, -1, sizeof(::tensorflow::tfprof::ExecMemory)},
  { 218, -1, sizeof(::tensorflow::tfprof::Tuple)},
  { 224, -1, sizeof(::tensorflow::tfprof::Memory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_CodeDef_Trace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_CodeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_OpLogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_OpLogProto_IdToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_OpLogProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileProto_NodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileProto_IdToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_InputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_InputShapesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_OutputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_OutputShapesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_SrcOutputIndexEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_ExecsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ProfileNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecProfile_AcceleratorExecsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecProfile_CpuExecsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecMemory_OutputMemoryEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_ExecMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_Tuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_Memory_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)tensorflow/core/profiler/tfprof_log.pr"
  "oto\022\021tensorflow.tfprof\032*tensorflow/core/"
  "framework/attr_value.proto\032*tensorflow/c"
  "ore/framework/step_stats.proto\"\337\001\n\007CodeD"
  "ef\0220\n\006traces\030\001 \003(\0132 .tensorflow.tfprof.C"
  "odeDef.Trace\032\241\001\n\005Trace\022\020\n\004file\030\001 \001(\tB\002\030\001"
  "\022\017\n\007file_id\030\006 \001(\003\022\016\n\006lineno\030\002 \001(\005\022\024\n\010fun"
  "ction\030\003 \001(\tB\002\030\001\022\023\n\013function_id\030\007 \001(\003\022\020\n\004"
  "line\030\004 \001(\tB\002\030\001\022\017\n\007line_id\030\010 \001(\003\022\027\n\017func_"
  "start_line\030\005 \001(\005\"j\n\nOpLogEntry\022\014\n\004name\030\001"
  " \001(\t\022\021\n\tfloat_ops\030\002 \001(\003\022\r\n\005types\030\003 \003(\t\022,"
  "\n\010code_def\030\004 \001(\0132\032.tensorflow.tfprof.Cod"
  "eDef\"\270\001\n\nOpLogProto\0222\n\013log_entries\030\001 \003(\013"
  "2\035.tensorflow.tfprof.OpLogEntry\022C\n\014id_to"
  "_string\030\002 \003(\0132-.tensorflow.tfprof.OpLogP"
  "roto.IdToStringEntry\0321\n\017IdToStringEntry\022"
  "\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\"\324\002\n\014Prof"
  "ileProto\0229\n\005nodes\030\001 \003(\0132*.tensorflow.tfp"
  "rof.ProfileProto.NodesEntry\022\021\n\thas_trace"
  "\030\002 \001(\010\022\037\n\027miss_accelerator_stream\030\005 \001(\010\022"
  "\r\n\005steps\030\003 \003(\003\022E\n\014id_to_string\030\004 \003(\0132/.t"
  "ensorflow.tfprof.ProfileProto.IdToString"
  "Entry\032L\n\nNodesEntry\022\013\n\003key\030\001 \001(\003\022-\n\005valu"
  "e\030\002 \001(\0132\036.tensorflow.tfprof.ProfileNode:"
  "\0028\001\0321\n\017IdToStringEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"\323\010\n\013ProfileNode\022\014\n\004name\030\001"
  " \001(\t\022\n\n\002op\030\t \001(\t\022\n\n\002id\030\r \001(\003\022:\n\006inputs\030\002"
  " \003(\0132*.tensorflow.tfprof.ProfileNode.Inp"
  "utsEntry\022E\n\014input_shapes\030\020 \003(\0132/.tensorf"
  "low.tfprof.ProfileNode.InputShapesEntry\022"
  "<\n\007outputs\030\003 \003(\0132+.tensorflow.tfprof.Pro"
  "fileNode.OutputsEntry\022G\n\routput_shapes\030\017"
  " \003(\01320.tensorflow.tfprof.ProfileNode.Out"
  "putShapesEntry\022L\n\020src_output_index\030\016 \003(\013"
  "22.tensorflow.tfprof.ProfileNode.SrcOutp"
  "utIndexEntry\022\r\n\005shape\030\004 \003(\003\022\020\n\010op_types\030"
  "\005 \003(\t\022\030\n\020canonical_device\030\006 \001(\t\022\023\n\013host_"
  "device\030\007 \001(\t\022\021\n\tfloat_ops\030\010 \001(\003\022)\n\005trace"
  "\030\n \001(\0132\032.tensorflow.tfprof.CodeDef\0228\n\005at"
  "trs\030\013 \003(\0132).tensorflow.tfprof.ProfileNod"
  "e.AttrsEntry\0228\n\005execs\030\014 \003(\0132).tensorflow"
  ".tfprof.ProfileNode.ExecsEntry\032-\n\013Inputs"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:\0028\001\032L\n"
  "\020InputShapesEntry\022\013\n\003key\030\001 \001(\005\022\'\n\005value\030"
  "\002 \001(\0132\030.tensorflow.tfprof.Tuple:\0028\001\032.\n\014O"
  "utputsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:"
  "\0028\001\032M\n\021OutputShapesEntry\022\013\n\003key\030\001 \001(\005\022\'\n"
  "\005value\030\002 \001(\0132\030.tensorflow.tfprof.Tuple:\002"
  "8\001\0325\n\023SrcOutputIndexEntry\022\013\n\003key\030\001 \001(\003\022\r"
  "\n\005value\030\002 \001(\005:\0028\001\032C\n\nAttrsEntry\022\013\n\003key\030\001"
  " \001(\t\022$\n\005value\030\002 \001(\0132\025.tensorflow.AttrVal"
  "ue:\0028\001\032L\n\nExecsEntry\022\013\n\003key\030\001 \001(\003\022-\n\005val"
  "ue\030\002 \001(\0132\036.tensorflow.tfprof.ExecProfile"
  ":\0028\001\"\204\004\n\013ExecProfile\022\021\n\trun_count\030\001 \001(\003\022"
  "\030\n\020all_start_micros\030\002 \001(\003\022\031\n\021latest_end_"
  "micros\030\003 \001(\003\022O\n\021accelerator_execs\030\004 \003(\0132"
  "4.tensorflow.tfprof.ExecProfile.Accelera"
  "torExecsEntry\022\?\n\tcpu_execs\030\005 \003(\0132,.tenso"
  "rflow.tfprof.ExecProfile.CpuExecsEntry\0223"
  "\n\014memory_execs\030\007 \003(\0132\035.tensorflow.tfprof"
  ".ExecMemory\0221\n\013allocations\030\013 \003(\0132\034.tenso"
  "rflow.AllocationRecord\022\017\n\007devices\030\006 \003(\t\032"
  "T\n\025AcceleratorExecsEntry\022\013\n\003key\030\001 \001(\t\022*\n"
  "\005value\030\002 \001(\0132\033.tensorflow.tfprof.ExecTim"
  "e:\0028\001\032L\n\rCpuExecsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005v"
  "alue\030\002 \001(\0132\033.tensorflow.tfprof.ExecTime:"
  "\0028\001\"3\n\010ExecTime\022\'\n\005times\030\001 \003(\0132\030.tensorf"
  "low.tfprof.Tuple\"\264\003\n\nExecMemory\022\025\n\rmemor"
  "y_micros\030\001 \001(\003\022\027\n\017host_temp_bytes\030\002 \001(\003\022"
  "\035\n\025host_persistent_bytes\030\003 \001(\003\022\036\n\026accele"
  "rator_temp_bytes\030\004 \001(\003\022$\n\034accelerator_pe"
  "rsistent_bytes\030\005 \001(\003\022\027\n\017requested_bytes\030"
  "\006 \001(\003\022\022\n\npeak_bytes\030\007 \001(\003\022\026\n\016residual_by"
  "tes\030\010 \001(\003\022\024\n\014output_bytes\030\t \001(\003\022\036\n\026alloc"
  "ator_bytes_in_use\030\n \001(\003\022F\n\routput_memory"
  "\030\013 \003(\0132/.tensorflow.tfprof.ExecMemory.Ou"
  "tputMemoryEntry\032N\n\021OutputMemoryEntry\022\013\n\003"
  "key\030\001 \001(\005\022(\n\005value\030\002 \001(\0132\031.tensorflow.tf"
  "prof.Memory:\0028\001\"\035\n\005Tuple\022\024\n\014int64_values"
  "\030\001 \003(\003\"$\n\006Memory\022\r\n\005bytes\030\001 \001(\003\022\013\n\003ptr\030\002"
  " \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_sccs[24] = {
  &scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecMemory_OutputMemoryEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecProfile_AcceleratorExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecProfile_CpuExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_OpLogProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_ExecsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_InputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_OutputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileNode_SrcOutputIndexEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileProto_IdToStringEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_ProfileProto_NodesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
  &scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto, "tensorflow/core/profiler/tfprof_log.proto", 3212,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_deps, 24, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto, 24, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto), true);
namespace tensorflow {
namespace tfprof {

// ===================================================================

void CodeDef_Trace::InitAsDefaultInstance() {
}
class CodeDef_Trace::_Internal {
 public:
};

CodeDef_Trace::CodeDef_Trace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef.Trace)
}
CodeDef_Trace::CodeDef_Trace(const CodeDef_Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function().empty()) {
    function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line().empty()) {
    line_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  ::memcpy(&lineno_, &from.lineno_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_id_) -
    reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef.Trace)
}

void CodeDef_Trace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lineno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
}

CodeDef_Trace::~CodeDef_Trace() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef.Trace)
  SharedDtor();
}

void CodeDef_Trace::SharedDtor() {
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CodeDef_Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodeDef_Trace& CodeDef_Trace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodeDef_Trace_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void CodeDef_Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lineno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
  _internal_metadata_.Clear();
}

const char* CodeDef_Trace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_file(), ptr, ctx, "tensorflow.tfprof.CodeDef.Trace.file");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lineno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lineno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_function(), ptr, ctx, "tensorflow.tfprof.CodeDef.Trace.function");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string line = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_line(), ptr, ctx, "tensorflow.tfprof.CodeDef.Trace.line");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 func_start_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          func_start_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 file_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 function_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          function_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 line_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          line_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodeDef_Trace::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1 [deprecated = true];
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file(), target);
  }

  // int32 lineno = 2;
  if (this->lineno() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lineno(), target);
  }

  // string function = 3 [deprecated = true];
  if (this->function().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.function");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_function(), target);
  }

  // string line = 4 [deprecated = true];
  if (this->line().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.line");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_line(), target);
  }

  // int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_func_start_line(), target);
  }

  // int64 file_id = 6;
  if (this->file_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_file_id(), target);
  }

  // int64 function_id = 7;
  if (this->function_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_function_id(), target);
  }

  // int64 line_id = 8;
  if (this->line_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_line_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef.Trace)
  return target;
}

size_t CodeDef_Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef.Trace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 1 [deprecated = true];
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string function = 3 [deprecated = true];
  if (this->function().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  // string line = 4 [deprecated = true];
  if (this->line().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_line());
  }

  // int32 lineno = 2;
  if (this->lineno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineno());
  }

  // int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_func_start_line());
  }

  // int64 file_id = 6;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_file_id());
  }

  // int64 function_id = 7;
  if (this->function_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_function_id());
  }

  // int64 line_id = 8;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_line_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodeDef_Trace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeDef_Trace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodeDef_Trace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef.Trace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef.Trace)
    MergeFrom(*source);
  }
}

void CodeDef_Trace::MergeFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.function().size() > 0) {

    function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.lineno() != 0) {
    _internal_set_lineno(from._internal_lineno());
  }
  if (from.func_start_line() != 0) {
    _internal_set_func_start_line(from._internal_func_start_line());
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.function_id() != 0) {
    _internal_set_function_id(from._internal_function_id());
  }
  if (from.line_id() != 0) {
    _internal_set_line_id(from._internal_line_id());
  }
}

void CodeDef_Trace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef_Trace::CopyFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeDef_Trace::IsInitialized() const {
  return true;
}

void CodeDef_Trace::InternalSwap(CodeDef_Trace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_.Swap(&other->line_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lineno_, other->lineno_);
  swap(func_start_line_, other->func_start_line_);
  swap(file_id_, other->file_id_);
  swap(function_id_, other->function_id_);
  swap(line_id_, other->line_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeDef_Trace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CodeDef::InitAsDefaultInstance() {
}
class CodeDef::_Internal {
 public:
};

CodeDef::CodeDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef)
}
CodeDef::CodeDef(const CodeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      traces_(from.traces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef)
}

void CodeDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
}

CodeDef::~CodeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef)
  SharedDtor();
}

void CodeDef::SharedDtor() {
}

void CodeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodeDef& CodeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodeDef_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void CodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traces_.Clear();
  _internal_metadata_.Clear();
}

const char* CodeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodeDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traces_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_traces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef)
  return target;
}

size_t CodeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  total_size += 1UL * this->_internal_traces_size();
  for (const auto& msg : this->traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef)
    MergeFrom(*source);
  }
}

void CodeDef::MergeFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
}

void CodeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef::CopyFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeDef::IsInitialized() const {
  return true;
}

void CodeDef::InternalSwap(CodeDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  traces_.InternalSwap(&other->traces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpLogEntry::InitAsDefaultInstance() {
  ::tensorflow::tfprof::_OpLogEntry_default_instance_._instance.get_mutable()->code_def_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
}
class OpLogEntry::_Internal {
 public:
  static const ::tensorflow::tfprof::CodeDef& code_def(const OpLogEntry* msg);
};

const ::tensorflow::tfprof::CodeDef&
OpLogEntry::_Internal::code_def(const OpLogEntry* msg) {
  return *msg->code_def_;
}
OpLogEntry::OpLogEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogEntry)
}
OpLogEntry::OpLogEntry(const OpLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_code_def()) {
    code_def_ = new ::tensorflow::tfprof::CodeDef(*from.code_def_);
  } else {
    code_def_ = nullptr;
  }
  float_ops_ = from.float_ops_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogEntry)
}

void OpLogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_ops_) -
      reinterpret_cast<char*>(&code_def_)) + sizeof(float_ops_));
}

OpLogEntry::~OpLogEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogEntry)
  SharedDtor();
}

void OpLogEntry::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_def_;
}

void OpLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpLogEntry& OpLogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpLogEntry_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void OpLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_def_ != nullptr) {
    delete code_def_;
  }
  code_def_ = nullptr;
  float_ops_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* OpLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.tfprof.OpLogEntry.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 float_ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_types(), ptr, ctx, "tensorflow.tfprof.OpLogEntry.types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.tfprof.CodeDef code_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpLogEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 float_ops = 2;
  if (this->float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_float_ops(), target);
  }

  // repeated string types = 3;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    const auto& s = this->_internal_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.types");
    target = stream->WriteString(3, s, target);
  }

  // .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::code_def(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogEntry)
  return target;
}

size_t OpLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(types_.size());
  for (int i = 0, n = types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      types_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_def_);
  }

  // int64 float_ops = 2;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_float_ops());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpLogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpLogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogEntry)
    MergeFrom(*source);
  }
}

void OpLogEntry::MergeFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_code_def()) {
    _internal_mutable_code_def()->::tensorflow::tfprof::CodeDef::MergeFrom(from._internal_code_def());
  }
  if (from.float_ops() != 0) {
    _internal_set_float_ops(from._internal_float_ops());
  }
}

void OpLogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogEntry::CopyFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogEntry::IsInitialized() const {
  return true;
}

void OpLogEntry::InternalSwap(OpLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_def_, other->code_def_);
  swap(float_ops_, other->float_ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpLogProto_IdToStringEntry_DoNotUse::OpLogProto_IdToStringEntry_DoNotUse() {}
OpLogProto_IdToStringEntry_DoNotUse::OpLogProto_IdToStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpLogProto_IdToStringEntry_DoNotUse::MergeFrom(const OpLogProto_IdToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpLogProto_IdToStringEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpLogProto_IdToStringEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpLogProto::InitAsDefaultInstance() {
}
class OpLogProto::_Internal {
 public:
};

OpLogProto::OpLogProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogProto)
}
OpLogProto::OpLogProto(const OpLogProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      log_entries_(from.log_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_to_string_.MergeFrom(from.id_to_string_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogProto)
}

void OpLogProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
}

OpLogProto::~OpLogProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogProto)
  SharedDtor();
}

void OpLogProto::SharedDtor() {
}

void OpLogProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpLogProto& OpLogProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpLogProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void OpLogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_entries_.Clear();
  id_to_string_.Clear();
  _internal_metadata_.Clear();
}

const char* OpLogProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, string> id_to_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&id_to_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpLogProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_entries_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_log_entries(i), target, stream);
  }

  // map<int64, string> id_to_string = 2;
  if (!this->_internal_id_to_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.OpLogProto.IdToStringEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_id_to_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_id_to_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_id_to_string().begin();
          it != this->_internal_id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpLogProto_IdToStringEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_id_to_string().begin();
          it != this->_internal_id_to_string().end(); ++it) {
        target = OpLogProto_IdToStringEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogProto)
  return target;
}

size_t OpLogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  total_size += 1UL * this->_internal_log_entries_size();
  for (const auto& msg : this->log_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, string> id_to_string = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_id_to_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
      it = this->_internal_id_to_string().begin();
      it != this->_internal_id_to_string().end(); ++it) {
    total_size += OpLogProto_IdToStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpLogProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpLogProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogProto)
    MergeFrom(*source);
  }
}

void OpLogProto::MergeFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_entries_.MergeFrom(from.log_entries_);
  id_to_string_.MergeFrom(from.id_to_string_);
}

void OpLogProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogProto::CopyFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogProto::IsInitialized() const {
  return true;
}

void OpLogProto::InternalSwap(OpLogProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  log_entries_.InternalSwap(&other->log_entries_);
  id_to_string_.Swap(&other->id_to_string_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLogProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProfileProto_NodesEntry_DoNotUse::ProfileProto_NodesEntry_DoNotUse() {}
ProfileProto_NodesEntry_DoNotUse::ProfileProto_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileProto_NodesEntry_DoNotUse::MergeFrom(const ProfileProto_NodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileProto_NodesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileProto_NodesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileProto_IdToStringEntry_DoNotUse::ProfileProto_IdToStringEntry_DoNotUse() {}
ProfileProto_IdToStringEntry_DoNotUse::ProfileProto_IdToStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileProto_IdToStringEntry_DoNotUse::MergeFrom(const ProfileProto_IdToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileProto_IdToStringEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileProto_IdToStringEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProfileProto::InitAsDefaultInstance() {
}
class ProfileProto::_Internal {
 public:
};

ProfileProto::ProfileProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileProto)
}
ProfileProto::ProfileProto(const ProfileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  id_to_string_.MergeFrom(from.id_to_string_);
  ::memcpy(&has_trace_, &from.has_trace_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_accelerator_stream_) -
    reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileProto)
}

void ProfileProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  ::memset(&has_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_accelerator_stream_) -
      reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
}

ProfileProto::~ProfileProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileProto)
  SharedDtor();
}

void ProfileProto::SharedDtor() {
}

void ProfileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileProto& ProfileProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileProto_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void ProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  steps_.Clear();
  id_to_string_.Clear();
  ::memset(&has_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_accelerator_stream_) -
      reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
  _internal_metadata_.Clear();
}

const char* ProfileProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 steps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_steps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_steps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, string> id_to_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&id_to_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool miss_accelerator_stream = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          miss_accelerator_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  if (!this->_internal_nodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ProfileNode >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ProfileNode >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileProto_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it) {
        target = ProfileProto_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // bool has_trace = 2;
  if (this->has_trace() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_trace(), target);
  }

  // repeated int64 steps = 3;
  {
    int byte_size = _steps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_steps(), byte_size, target);
    }
  }

  // map<int64, string> id_to_string = 4;
  if (!this->_internal_id_to_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileProto.IdToStringEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_id_to_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_id_to_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_id_to_string().begin();
          it != this->_internal_id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileProto_IdToStringEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_id_to_string().begin();
          it != this->_internal_id_to_string().end(); ++it) {
        target = ProfileProto_IdToStringEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool miss_accelerator_stream = 5;
  if (this->miss_accelerator_stream() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_miss_accelerator_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileProto)
  return target;
}

size_t ProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
      it = this->_internal_nodes().begin();
      it != this->_internal_nodes().end(); ++it) {
    total_size += ProfileProto_NodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int64 steps = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->steps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _steps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int64, string> id_to_string = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_id_to_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
      it = this->_internal_id_to_string().begin();
      it != this->_internal_id_to_string().end(); ++it) {
    total_size += ProfileProto_IdToStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool has_trace = 2;
  if (this->has_trace() != 0) {
    total_size += 1 + 1;
  }

  // bool miss_accelerator_stream = 5;
  if (this->miss_accelerator_stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileProto)
    MergeFrom(*source);
  }
}

void ProfileProto::MergeFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  steps_.MergeFrom(from.steps_);
  id_to_string_.MergeFrom(from.id_to_string_);
  if (from.has_trace() != 0) {
    _internal_set_has_trace(from._internal_has_trace());
  }
  if (from.miss_accelerator_stream() != 0) {
    _internal_set_miss_accelerator_stream(from._internal_miss_accelerator_stream());
  }
}

void ProfileProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileProto::CopyFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileProto::IsInitialized() const {
  return true;
}

void ProfileProto::InternalSwap(ProfileProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.Swap(&other->nodes_);
  steps_.InternalSwap(&other->steps_);
  id_to_string_.Swap(&other->id_to_string_);
  swap(has_trace_, other->has_trace_);
  swap(miss_accelerator_stream_, other->miss_accelerator_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProfileNode_InputsEntry_DoNotUse::ProfileNode_InputsEntry_DoNotUse() {}
ProfileNode_InputsEntry_DoNotUse::ProfileNode_InputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_InputsEntry_DoNotUse::MergeFrom(const ProfileNode_InputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_InputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_InputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_InputShapesEntry_DoNotUse::ProfileNode_InputShapesEntry_DoNotUse() {}
ProfileNode_InputShapesEntry_DoNotUse::ProfileNode_InputShapesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_InputShapesEntry_DoNotUse::MergeFrom(const ProfileNode_InputShapesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_InputShapesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_InputShapesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_OutputsEntry_DoNotUse::ProfileNode_OutputsEntry_DoNotUse() {}
ProfileNode_OutputsEntry_DoNotUse::ProfileNode_OutputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_OutputsEntry_DoNotUse::MergeFrom(const ProfileNode_OutputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_OutputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_OutputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_OutputShapesEntry_DoNotUse::ProfileNode_OutputShapesEntry_DoNotUse() {}
ProfileNode_OutputShapesEntry_DoNotUse::ProfileNode_OutputShapesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_OutputShapesEntry_DoNotUse::MergeFrom(const ProfileNode_OutputShapesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_OutputShapesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_OutputShapesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_SrcOutputIndexEntry_DoNotUse::ProfileNode_SrcOutputIndexEntry_DoNotUse() {}
ProfileNode_SrcOutputIndexEntry_DoNotUse::ProfileNode_SrcOutputIndexEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_SrcOutputIndexEntry_DoNotUse::MergeFrom(const ProfileNode_SrcOutputIndexEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_SrcOutputIndexEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_SrcOutputIndexEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_AttrsEntry_DoNotUse::ProfileNode_AttrsEntry_DoNotUse() {}
ProfileNode_AttrsEntry_DoNotUse::ProfileNode_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_AttrsEntry_DoNotUse::MergeFrom(const ProfileNode_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_AttrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_AttrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProfileNode_ExecsEntry_DoNotUse::ProfileNode_ExecsEntry_DoNotUse() {}
ProfileNode_ExecsEntry_DoNotUse::ProfileNode_ExecsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileNode_ExecsEntry_DoNotUse::MergeFrom(const ProfileNode_ExecsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode_ExecsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileNode_ExecsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProfileNode::InitAsDefaultInstance() {
  ::tensorflow::tfprof::_ProfileNode_default_instance_._instance.get_mutable()->trace_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
}
class ProfileNode::_Internal {
 public:
  static const ::tensorflow::tfprof::CodeDef& trace(const ProfileNode* msg);
};

const ::tensorflow::tfprof::CodeDef&
ProfileNode::_Internal::trace(const ProfileNode* msg) {
  return *msg->trace_;
}
void ProfileNode::clear_attrs() {
  attrs_.Clear();
}
ProfileNode::ProfileNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileNode)
}
ProfileNode::ProfileNode(const ProfileNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_),
      op_types_(from.op_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  attrs_.MergeFrom(from.attrs_);
  execs_.MergeFrom(from.execs_);
  src_output_index_.MergeFrom(from.src_output_index_);
  output_shapes_.MergeFrom(from.output_shapes_);
  input_shapes_.MergeFrom(from.input_shapes_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  canonical_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_canonical_device().empty()) {
    canonical_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.canonical_device_);
  }
  host_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_device().empty()) {
    host_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_);
  }
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op().empty()) {
    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from._internal_has_trace()) {
    trace_ = new ::tensorflow::tfprof::CodeDef(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  ::memcpy(&float_ops_, &from.float_ops_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&float_ops_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileNode)
}

void ProfileNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&trace_)) + sizeof(id_));
}

ProfileNode::~ProfileNode() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileNode)
  SharedDtor();
}

void ProfileNode::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_;
}

void ProfileNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileNode& ProfileNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileNode_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void ProfileNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  shape_.Clear();
  op_types_.Clear();
  attrs_.Clear();
  execs_.Clear();
  src_output_index_.Clear();
  output_shapes_.Clear();
  input_shapes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  ::memset(&float_ops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&float_ops_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* ProfileNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.tfprof.ProfileNode.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int64> inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&inputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int64> outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&outputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string op_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_op_types(), ptr, ctx, "tensorflow.tfprof.ProfileNode.op_types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string canonical_device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_canonical_device(), ptr, ctx, "tensorflow.tfprof.ProfileNode.canonical_device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host_device(), ptr, ctx, "tensorflow.tfprof.ProfileNode.host_device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 float_ops = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op(), ptr, ctx, "tensorflow.tfprof.ProfileNode.op");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.tfprof.CodeDef trace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> attrs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&execs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, int32> src_output_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&src_output_index_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_shapes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_shapes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int32, int64> inputs = 2;
  if (!this->_internal_inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_inputs().begin();
          it != this->_internal_inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_InputsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_inputs().begin();
          it != this->_internal_inputs().end(); ++it) {
        target = ProfileNode_InputsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, int64> outputs = 3;
  if (!this->_internal_outputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_outputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_outputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_outputs().begin();
          it != this->_internal_outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_OutputsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_outputs().begin();
          it != this->_internal_outputs().end(); ++it) {
        target = ProfileNode_OutputsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // repeated int64 shape = 4;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  // repeated string op_types = 5;
  for (int i = 0, n = this->_internal_op_types_size(); i < n; i++) {
    const auto& s = this->_internal_op_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op_types");
    target = stream->WriteString(5, s, target);
  }

  // string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canonical_device().data(), static_cast<int>(this->_internal_canonical_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.canonical_device");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_canonical_device(), target);
  }

  // string host_device = 7;
  if (this->host_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_device().data(), static_cast<int>(this->_internal_host_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.host_device");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_host_device(), target);
  }

  // int64 float_ops = 8;
  if (this->float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_float_ops(), target);
  }

  // string op = 9;
  if (this->op().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_op(), target);
  }

  // .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::trace(this), target, stream);
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  if (!this->_internal_attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileNode.AttrsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_AttrsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_attrs().begin();
          it != this->_internal_attrs().end(); ++it) {
        target = ProfileNode_AttrsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  if (!this->_internal_execs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ExecProfile >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_execs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_execs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ExecProfile >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->_internal_execs().begin();
          it != this->_internal_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_ExecsEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->_internal_execs().begin();
          it != this->_internal_execs().end(); ++it) {
        target = ProfileNode_ExecsEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
      }
    }
  }

  // int64 id = 13;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_id(), target);
  }

  // map<int64, int32> src_output_index = 14;
  if (!this->_internal_src_output_index().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_src_output_index().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_src_output_index().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_src_output_index().begin();
          it != this->_internal_src_output_index().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_SrcOutputIndexEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_src_output_index().begin();
          it != this->_internal_src_output_index().end(); ++it) {
        target = ProfileNode_SrcOutputIndexEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  if (!this->_internal_output_shapes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_output_shapes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_output_shapes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->_internal_output_shapes().begin();
          it != this->_internal_output_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_OutputShapesEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->_internal_output_shapes().begin();
          it != this->_internal_output_shapes().end(); ++it) {
        target = ProfileNode_OutputShapesEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  if (!this->_internal_input_shapes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_shapes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_shapes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->_internal_input_shapes().begin();
          it != this->_internal_input_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileNode_InputShapesEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->_internal_input_shapes().begin();
          it != this->_internal_input_shapes().end(); ++it) {
        target = ProfileNode_InputShapesEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileNode)
  return target;
}

size_t ProfileNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int64> inputs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_inputs().begin();
      it != this->_internal_inputs().end(); ++it) {
    total_size += ProfileNode_InputsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int64> outputs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_outputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_outputs().begin();
      it != this->_internal_outputs().end(); ++it) {
    total_size += ProfileNode_OutputsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int64 shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string op_types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(op_types_.size());
  for (int i = 0, n = op_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      op_types_.Get(i));
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->_internal_attrs().begin();
      it != this->_internal_attrs().end(); ++it) {
    total_size += ProfileNode_AttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_execs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
      it = this->_internal_execs().begin();
      it != this->_internal_execs().end(); ++it) {
    total_size += ProfileNode_ExecsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int32> src_output_index = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_src_output_index_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_src_output_index().begin();
      it != this->_internal_src_output_index().end(); ++it) {
    total_size += ProfileNode_SrcOutputIndexEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_shapes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
      it = this->_internal_output_shapes().begin();
      it != this->_internal_output_shapes().end(); ++it) {
    total_size += ProfileNode_OutputShapesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_shapes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Tuple >::const_iterator
      it = this->_internal_input_shapes().begin();
      it != this->_internal_input_shapes().end(); ++it) {
    total_size += ProfileNode_InputShapesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canonical_device());
  }

  // string host_device = 7;
  if (this->host_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_device());
  }

  // string op = 9;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // int64 float_ops = 8;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_float_ops());
  }

  // int64 id = 13;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileNode)
    MergeFrom(*source);
  }
}

void ProfileNode::MergeFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  shape_.MergeFrom(from.shape_);
  op_types_.MergeFrom(from.op_types_);
  attrs_.MergeFrom(from.attrs_);
  execs_.MergeFrom(from.execs_);
  src_output_index_.MergeFrom(from.src_output_index_);
  output_shapes_.MergeFrom(from.output_shapes_);
  input_shapes_.MergeFrom(from.input_shapes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.canonical_device().size() > 0) {

    canonical_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.canonical_device_);
  }
  if (from.host_device().size() > 0) {

    host_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_device_);
  }
  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.has_trace()) {
    _internal_mutable_trace()->::tensorflow::tfprof::CodeDef::MergeFrom(from._internal_trace());
  }
  if (from.float_ops() != 0) {
    _internal_set_float_ops(from._internal_float_ops());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ProfileNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileNode::CopyFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileNode::IsInitialized() const {
  return true;
}

void ProfileNode::InternalSwap(ProfileNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.Swap(&other->inputs_);
  outputs_.Swap(&other->outputs_);
  shape_.InternalSwap(&other->shape_);
  op_types_.InternalSwap(&other->op_types_);
  attrs_.Swap(&other->attrs_);
  execs_.Swap(&other->execs_);
  src_output_index_.Swap(&other->src_output_index_);
  output_shapes_.Swap(&other->output_shapes_);
  input_shapes_.Swap(&other->input_shapes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  canonical_device_.Swap(&other->canonical_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_device_.Swap(&other->host_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trace_, other->trace_);
  swap(float_ops_, other->float_ops_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ExecProfile_AcceleratorExecsEntry_DoNotUse::ExecProfile_AcceleratorExecsEntry_DoNotUse() {}
ExecProfile_AcceleratorExecsEntry_DoNotUse::ExecProfile_AcceleratorExecsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecProfile_AcceleratorExecsEntry_DoNotUse::MergeFrom(const ExecProfile_AcceleratorExecsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecProfile_AcceleratorExecsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ExecProfile_AcceleratorExecsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ExecProfile_CpuExecsEntry_DoNotUse::ExecProfile_CpuExecsEntry_DoNotUse() {}
ExecProfile_CpuExecsEntry_DoNotUse::ExecProfile_CpuExecsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecProfile_CpuExecsEntry_DoNotUse::MergeFrom(const ExecProfile_CpuExecsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecProfile_CpuExecsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ExecProfile_CpuExecsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ExecProfile::InitAsDefaultInstance() {
}
class ExecProfile::_Internal {
 public:
};

void ExecProfile::clear_allocations() {
  allocations_.Clear();
}
ExecProfile::ExecProfile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecProfile)
}
ExecProfile::ExecProfile(const ExecProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_),
      memory_execs_(from.memory_execs_),
      allocations_(from.allocations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accelerator_execs_.MergeFrom(from.accelerator_execs_);
  cpu_execs_.MergeFrom(from.cpu_execs_);
  ::memcpy(&run_count_, &from.run_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_end_micros_) -
    reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecProfile)
}

void ExecProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  ::memset(&run_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_end_micros_) -
      reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
}

ExecProfile::~ExecProfile() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecProfile)
  SharedDtor();
}

void ExecProfile::SharedDtor() {
}

void ExecProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecProfile& ExecProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecProfile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void ExecProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accelerator_execs_.Clear();
  cpu_execs_.Clear();
  devices_.Clear();
  memory_execs_.Clear();
  allocations_.Clear();
  ::memset(&run_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_end_micros_) -
      reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
  _internal_metadata_.Clear();
}

const char* ExecProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 run_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          run_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 all_start_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_start_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_end_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latest_end_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&accelerator_execs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cpu_execs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string devices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_devices(), ptr, ctx, "tensorflow.tfprof.ExecProfile.devices");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory_execs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.AllocationRecord allocations = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allocations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecProfile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 run_count = 1;
  if (this->run_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_run_count(), target);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_all_start_micros(), target);
  }

  // int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_latest_end_micros(), target);
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  if (!this->_internal_accelerator_execs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_accelerator_execs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_accelerator_execs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->_internal_accelerator_execs().begin();
          it != this->_internal_accelerator_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ExecProfile_AcceleratorExecsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->_internal_accelerator_execs().begin();
          it != this->_internal_accelerator_execs().end(); ++it) {
        target = ExecProfile_AcceleratorExecsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  if (!this->_internal_cpu_execs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cpu_execs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cpu_execs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->_internal_cpu_execs().begin();
          it != this->_internal_cpu_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ExecProfile_CpuExecsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->_internal_cpu_execs().begin();
          it != this->_internal_cpu_execs().end(); ++it) {
        target = ExecProfile_CpuExecsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string devices = 6;
  for (int i = 0, n = this->_internal_devices_size(); i < n; i++) {
    const auto& s = this->_internal_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ExecProfile.devices");
    target = stream->WriteString(6, s, target);
  }

  // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memory_execs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_memory_execs(i), target, stream);
  }

  // repeated .tensorflow.AllocationRecord allocations = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allocations_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_allocations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecProfile)
  return target;
}

size_t ExecProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_accelerator_execs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
      it = this->_internal_accelerator_execs().begin();
      it != this->_internal_accelerator_execs().end(); ++it) {
    total_size += ExecProfile_AcceleratorExecsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cpu_execs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
      it = this->_internal_cpu_execs().begin();
      it != this->_internal_cpu_execs().end(); ++it) {
    total_size += ExecProfile_CpuExecsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string devices = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(devices_.size());
  for (int i = 0, n = devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      devices_.Get(i));
  }

  // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
  total_size += 1UL * this->_internal_memory_execs_size();
  for (const auto& msg : this->memory_execs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.AllocationRecord allocations = 11;
  total_size += 1UL * this->_internal_allocations_size();
  for (const auto& msg : this->allocations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 run_count = 1;
  if (this->run_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_run_count());
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_all_start_micros());
  }

  // int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latest_end_micros());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecProfile)
    MergeFrom(*source);
  }
}

void ExecProfile::MergeFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accelerator_execs_.MergeFrom(from.accelerator_execs_);
  cpu_execs_.MergeFrom(from.cpu_execs_);
  devices_.MergeFrom(from.devices_);
  memory_execs_.MergeFrom(from.memory_execs_);
  allocations_.MergeFrom(from.allocations_);
  if (from.run_count() != 0) {
    _internal_set_run_count(from._internal_run_count());
  }
  if (from.all_start_micros() != 0) {
    _internal_set_all_start_micros(from._internal_all_start_micros());
  }
  if (from.latest_end_micros() != 0) {
    _internal_set_latest_end_micros(from._internal_latest_end_micros());
  }
}

void ExecProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecProfile::CopyFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProfile::IsInitialized() const {
  return true;
}

void ExecProfile::InternalSwap(ExecProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accelerator_execs_.Swap(&other->accelerator_execs_);
  cpu_execs_.Swap(&other->cpu_execs_);
  devices_.InternalSwap(&other->devices_);
  memory_execs_.InternalSwap(&other->memory_execs_);
  allocations_.InternalSwap(&other->allocations_);
  swap(run_count_, other->run_count_);
  swap(all_start_micros_, other->all_start_micros_);
  swap(latest_end_micros_, other->latest_end_micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecTime::InitAsDefaultInstance() {
}
class ExecTime::_Internal {
 public:
};

ExecTime::ExecTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecTime)
}
ExecTime::ExecTime(const ExecTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      times_(from.times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecTime)
}

void ExecTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
}

ExecTime::~ExecTime() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecTime)
  SharedDtor();
}

void ExecTime::SharedDtor() {
}

void ExecTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecTime& ExecTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecTime_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void ExecTime::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_.Clear();
  _internal_metadata_.Clear();
}

const char* ExecTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.tfprof.Tuple times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_times(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.Tuple times = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_times_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_times(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecTime)
  return target;
}

size_t ExecTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.Tuple times = 1;
  total_size += 1UL * this->_internal_times_size();
  for (const auto& msg : this->times_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecTime)
    MergeFrom(*source);
  }
}

void ExecTime::MergeFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  times_.MergeFrom(from.times_);
}

void ExecTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecTime::CopyFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecTime::IsInitialized() const {
  return true;
}

void ExecTime::InternalSwap(ExecTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  times_.InternalSwap(&other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ExecMemory_OutputMemoryEntry_DoNotUse::ExecMemory_OutputMemoryEntry_DoNotUse() {}
ExecMemory_OutputMemoryEntry_DoNotUse::ExecMemory_OutputMemoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecMemory_OutputMemoryEntry_DoNotUse::MergeFrom(const ExecMemory_OutputMemoryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecMemory_OutputMemoryEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ExecMemory_OutputMemoryEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ExecMemory::InitAsDefaultInstance() {
}
class ExecMemory::_Internal {
 public:
};

ExecMemory::ExecMemory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecMemory)
}
ExecMemory::ExecMemory(const ExecMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_memory_.MergeFrom(from.output_memory_);
  ::memcpy(&memory_micros_, &from.memory_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocator_bytes_in_use_) -
    reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecMemory)
}

void ExecMemory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  ::memset(&memory_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
}

ExecMemory::~ExecMemory() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecMemory)
  SharedDtor();
}

void ExecMemory::SharedDtor() {
}

void ExecMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecMemory& ExecMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecMemory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void ExecMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_memory_.Clear();
  ::memset(&memory_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
  _internal_metadata_.Clear();
}

const char* ExecMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 memory_micros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memory_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 host_temp_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          host_temp_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 host_persistent_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          host_persistent_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 accelerator_temp_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accelerator_temp_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 accelerator_persistent_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accelerator_persistent_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 requested_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 residual_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 output_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allocator_bytes_in_use = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          allocator_bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_memory_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecMemory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 memory_micros = 1;
  if (this->memory_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_memory_micros(), target);
  }

  // int64 host_temp_bytes = 2;
  if (this->host_temp_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_host_temp_bytes(), target);
  }

  // int64 host_persistent_bytes = 3;
  if (this->host_persistent_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_host_persistent_bytes(), target);
  }

  // int64 accelerator_temp_bytes = 4;
  if (this->accelerator_temp_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_accelerator_temp_bytes(), target);
  }

  // int64 accelerator_persistent_bytes = 5;
  if (this->accelerator_persistent_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_accelerator_persistent_bytes(), target);
  }

  // int64 requested_bytes = 6;
  if (this->requested_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_requested_bytes(), target);
  }

  // int64 peak_bytes = 7;
  if (this->peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_peak_bytes(), target);
  }

  // int64 residual_bytes = 8;
  if (this->residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_residual_bytes(), target);
  }

  // int64 output_bytes = 9;
  if (this->output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_output_bytes(), target);
  }

  // int64 allocator_bytes_in_use = 10;
  if (this->allocator_bytes_in_use() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_allocator_bytes_in_use(), target);
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
  if (!this->_internal_output_memory().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Memory >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_output_memory().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_output_memory().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Memory >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->_internal_output_memory().begin();
          it != this->_internal_output_memory().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ExecMemory_OutputMemoryEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->_internal_output_memory().begin();
          it != this->_internal_output_memory().end(); ++it) {
        target = ExecMemory_OutputMemoryEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecMemory)
  return target;
}

size_t ExecMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_memory_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::tfprof::Memory >::const_iterator
      it = this->_internal_output_memory().begin();
      it != this->_internal_output_memory().end(); ++it) {
    total_size += ExecMemory_OutputMemoryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 memory_micros = 1;
  if (this->memory_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_micros());
  }

  // int64 host_temp_bytes = 2;
  if (this->host_temp_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_host_temp_bytes());
  }

  // int64 host_persistent_bytes = 3;
  if (this->host_persistent_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_host_persistent_bytes());
  }

  // int64 accelerator_temp_bytes = 4;
  if (this->accelerator_temp_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accelerator_temp_bytes());
  }

  // int64 accelerator_persistent_bytes = 5;
  if (this->accelerator_persistent_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accelerator_persistent_bytes());
  }

  // int64 requested_bytes = 6;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_requested_bytes());
  }

  // int64 peak_bytes = 7;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_bytes());
  }

  // int64 residual_bytes = 8;
  if (this->residual_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_residual_bytes());
  }

  // int64 output_bytes = 9;
  if (this->output_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_output_bytes());
  }

  // int64 allocator_bytes_in_use = 10;
  if (this->allocator_bytes_in_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_allocator_bytes_in_use());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecMemory)
    MergeFrom(*source);
  }
}

void ExecMemory::MergeFrom(const ExecMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_memory_.MergeFrom(from.output_memory_);
  if (from.memory_micros() != 0) {
    _internal_set_memory_micros(from._internal_memory_micros());
  }
  if (from.host_temp_bytes() != 0) {
    _internal_set_host_temp_bytes(from._internal_host_temp_bytes());
  }
  if (from.host_persistent_bytes() != 0) {
    _internal_set_host_persistent_bytes(from._internal_host_persistent_bytes());
  }
  if (from.accelerator_temp_bytes() != 0) {
    _internal_set_accelerator_temp_bytes(from._internal_accelerator_temp_bytes());
  }
  if (from.accelerator_persistent_bytes() != 0) {
    _internal_set_accelerator_persistent_bytes(from._internal_accelerator_persistent_bytes());
  }
  if (from.requested_bytes() != 0) {
    _internal_set_requested_bytes(from._internal_requested_bytes());
  }
  if (from.peak_bytes() != 0) {
    _internal_set_peak_bytes(from._internal_peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    _internal_set_residual_bytes(from._internal_residual_bytes());
  }
  if (from.output_bytes() != 0) {
    _internal_set_output_bytes(from._internal_output_bytes());
  }
  if (from.allocator_bytes_in_use() != 0) {
    _internal_set_allocator_bytes_in_use(from._internal_allocator_bytes_in_use());
  }
}

void ExecMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecMemory::CopyFrom(const ExecMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecMemory::IsInitialized() const {
  return true;
}

void ExecMemory::InternalSwap(ExecMemory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_memory_.Swap(&other->output_memory_);
  swap(memory_micros_, other->memory_micros_);
  swap(host_temp_bytes_, other->host_temp_bytes_);
  swap(host_persistent_bytes_, other->host_persistent_bytes_);
  swap(accelerator_temp_bytes_, other->accelerator_temp_bytes_);
  swap(accelerator_persistent_bytes_, other->accelerator_persistent_bytes_);
  swap(requested_bytes_, other->requested_bytes_);
  swap(peak_bytes_, other->peak_bytes_);
  swap(residual_bytes_, other->residual_bytes_);
  swap(output_bytes_, other->output_bytes_);
  swap(allocator_bytes_in_use_, other->allocator_bytes_in_use_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tuple::InitAsDefaultInstance() {
}
class Tuple::_Internal {
 public:
};

Tuple::Tuple()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Tuple)
}
Tuple::Tuple(const Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      int64_values_(from.int64_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Tuple)
}

void Tuple::SharedCtor() {
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
}

void Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tuple& Tuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tuple_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int64_values_.Clear();
  _internal_metadata_.Clear();
}

const char* Tuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 int64_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tuple::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 int64_values = 1;
  {
    int byte_size = _int64_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_int64_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Tuple)
  return target;
}

size_t Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Tuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 int64_values = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  const Tuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Tuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Tuple)
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int64_values_.MergeFrom(from.int64_values_);
}

void Tuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {
  return true;
}

void Tuple::InternalSwap(Tuple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  int64_values_.InternalSwap(&other->int64_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tuple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
}
class Memory::_Internal {
 public:
};

Memory::Memory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Memory)
}
Memory::Memory(const Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_, &from.bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptr_) -
    reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Memory)
}

void Memory::SharedCtor() {
  ::memset(&bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptr_) -
      reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memory& Memory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memory_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptr_) -
      reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
  _internal_metadata_.Clear();
}

const char* Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes = 1;
  if (this->bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bytes(), target);
  }

  // uint64 ptr = 2;
  if (this->ptr() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bytes = 1;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes());
  }

  // uint64 ptr = 2;
  if (this->ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ptr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Memory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
  if (from.ptr() != 0) {
    _internal_set_ptr(from._internal_ptr());
  }
}

void Memory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::InternalSwap(Memory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bytes_, other->bytes_);
  swap(ptr_, other->ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Memory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tfprof
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::CodeDef_Trace* Arena::CreateMaybeMessage< ::tensorflow::tfprof::CodeDef_Trace >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::CodeDef_Trace >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::CodeDef* Arena::CreateMaybeMessage< ::tensorflow::tfprof::CodeDef >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::CodeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::OpLogEntry* Arena::CreateMaybeMessage< ::tensorflow::tfprof::OpLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::OpLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::OpLogProto_IdToStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::OpLogProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::OpLogProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::OpLogProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileProto_NodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileProto_IdToStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_InputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_InputShapesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_OutputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_OutputShapesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode_ExecsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ProfileNode* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ProfileNode >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ProfileNode >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecProfile_CpuExecsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecProfile* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecProfile >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecTime* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecTime >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecTime >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecMemory_OutputMemoryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::ExecMemory* Arena::CreateMaybeMessage< ::tensorflow::tfprof::ExecMemory >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::ExecMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::Tuple* Arena::CreateMaybeMessage< ::tensorflow::tfprof::Tuple >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::Tuple >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::Memory* Arena::CreateMaybeMessage< ::tensorflow::tfprof::Memory >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::Memory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
