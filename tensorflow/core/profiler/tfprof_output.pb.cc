// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_output.proto

#include "tensorflow/core/profiler/tfprof_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto;
namespace tensorflow {
namespace tfprof {
class TFProfTensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFProfTensorProto> _instance;
} _TFProfTensorProto_default_instance_;
class GraphNodeProto_InputShapesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphNodeProto_InputShapesEntry_DoNotUse> _instance;
} _GraphNodeProto_InputShapesEntry_DoNotUse_default_instance_;
class GraphNodeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphNodeProto> _instance;
} _GraphNodeProto_default_instance_;
class MultiGraphNodeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiGraphNodeProto> _instance;
} _MultiGraphNodeProto_default_instance_;
class AdviceProto_CheckersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdviceProto_CheckersEntry_DoNotUse> _instance;
} _AdviceProto_CheckersEntry_DoNotUse_default_instance_;
class AdviceProto_CheckerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdviceProto_Checker> _instance;
} _AdviceProto_Checker_default_instance_;
class AdviceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdviceProto> _instance;
} _AdviceProto_default_instance_;
}  // namespace tfprof
}  // namespace tensorflow
static void InitDefaultsscc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdviceProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdviceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::AdviceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {
      &scc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdviceProto_Checker_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdviceProto_Checker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::AdviceProto_Checker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {}};

static void InitDefaultsscc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdviceProto_CheckersEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse();
  }
  ::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {
      &scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_GraphNodeProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::GraphNodeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::GraphNodeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {
      &scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_GraphNodeProto_InputShapesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse();
  }
  ::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,}};

static void InitDefaultsscc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_MultiGraphNodeProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::MultiGraphNodeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::MultiGraphNodeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {
      &scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_TFProfTensorProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::TFProfTensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::TFProfTensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::TFProfTensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::TFProfTensorProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::TFProfTensorProto, value_double_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::TFProfTensorProto, value_int64_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::TFProfTensorProto, value_str_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, tensor_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, run_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, accelerator_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, cpu_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, devices_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_definition_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_run_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_accelerator_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_cpu_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, total_float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, shapes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, input_shapes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::GraphNodeProto, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, accelerator_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, cpu_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_accelerator_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_cpu_exec_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, total_float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, graph_nodes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::MultiGraphNodeProto, children_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_Checker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto_Checker, reports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdviceProto, checkers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::tfprof::TFProfTensorProto)},
  { 9, 16, sizeof(::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse)},
  { 18, -1, sizeof(::tensorflow::tfprof::GraphNodeProto)},
  { 50, -1, sizeof(::tensorflow::tfprof::MultiGraphNodeProto)},
  { 76, 83, sizeof(::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse)},
  { 85, -1, sizeof(::tensorflow::tfprof::AdviceProto_Checker)},
  { 91, -1, sizeof(::tensorflow::tfprof::AdviceProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_TFProfTensorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_GraphNodeProto_InputShapesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_GraphNodeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_MultiGraphNodeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdviceProto_CheckersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdviceProto_Checker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdviceProto_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,tensorflow/core/profiler/tfprof_output"
  ".proto\022\021tensorflow.tfprof\032,tensorflow/co"
  "re/framework/tensor_shape.proto\032%tensorf"
  "low/core/framework/types.proto\"v\n\021TFProf"
  "TensorProto\022#\n\005dtype\030\001 \001(\0162\024.tensorflow."
  "DataType\022\024\n\014value_double\030\002 \003(\001\022\023\n\013value_"
  "int64\030\003 \003(\003\022\021\n\tvalue_str\030\004 \003(\t\"\216\007\n\016Graph"
  "NodeProto\022\014\n\004name\030\001 \001(\t\022:\n\014tensor_value\030"
  "\017 \001(\0132$.tensorflow.tfprof.TFProfTensorPr"
  "oto\022\021\n\trun_count\030\025 \001(\003\022\023\n\013exec_micros\030\002 "
  "\001(\003\022\037\n\027accelerator_exec_micros\030\021 \001(\003\022\027\n\017"
  "cpu_exec_micros\030\022 \001(\003\022\027\n\017requested_bytes"
  "\030\003 \001(\003\022\022\n\npeak_bytes\030\030 \001(\003\022\026\n\016residual_b"
  "ytes\030\031 \001(\003\022\024\n\014output_bytes\030\032 \001(\003\022\022\n\npara"
  "meters\030\004 \001(\003\022\021\n\tfloat_ops\030\r \001(\003\022\017\n\007devic"
  "es\030\n \003(\t\022\036\n\026total_definition_count\030\027 \001(\003"
  "\022\027\n\017total_run_count\030\026 \001(\003\022\031\n\021total_exec_"
  "micros\030\006 \001(\003\022%\n\035total_accelerator_exec_m"
  "icros\030\023 \001(\003\022\035\n\025total_cpu_exec_micros\030\024 \001"
  "(\003\022\035\n\025total_requested_bytes\030\007 \001(\003\022\030\n\020tot"
  "al_peak_bytes\030\033 \001(\003\022\034\n\024total_residual_by"
  "tes\030\034 \001(\003\022\032\n\022total_output_bytes\030\035 \001(\003\022\030\n"
  "\020total_parameters\030\010 \001(\003\022\027\n\017total_float_o"
  "ps\030\016 \001(\003\022,\n\006shapes\030\013 \003(\0132\034.tensorflow.Te"
  "nsorShapeProto\022H\n\014input_shapes\030\020 \003(\01322.t"
  "ensorflow.tfprof.GraphNodeProto.InputSha"
  "pesEntry\0223\n\010children\030\014 \003(\0132!.tensorflow."
  "tfprof.GraphNodeProto\032P\n\020InputShapesEntr"
  "y\022\013\n\003key\030\001 \001(\005\022+\n\005value\030\002 \001(\0132\034.tensorfl"
  "ow.TensorShapeProto:\0028\001\"\355\004\n\023MultiGraphNo"
  "deProto\022\014\n\004name\030\001 \001(\t\022\023\n\013exec_micros\030\002 \001"
  "(\003\022\037\n\027accelerator_exec_micros\030\014 \001(\003\022\027\n\017c"
  "pu_exec_micros\030\r \001(\003\022\027\n\017requested_bytes\030"
  "\003 \001(\003\022\022\n\npeak_bytes\030\020 \001(\003\022\026\n\016residual_by"
  "tes\030\021 \001(\003\022\024\n\014output_bytes\030\022 \001(\003\022\022\n\nparam"
  "eters\030\004 \001(\003\022\021\n\tfloat_ops\030\005 \001(\003\022\031\n\021total_"
  "exec_micros\030\006 \001(\003\022%\n\035total_accelerator_e"
  "xec_micros\030\016 \001(\003\022\035\n\025total_cpu_exec_micro"
  "s\030\017 \001(\003\022\035\n\025total_requested_bytes\030\007 \001(\003\022\030"
  "\n\020total_peak_bytes\030\023 \001(\003\022\034\n\024total_residu"
  "al_bytes\030\024 \001(\003\022\032\n\022total_output_bytes\030\025 \001"
  "(\003\022\030\n\020total_parameters\030\010 \001(\003\022\027\n\017total_fl"
  "oat_ops\030\t \001(\003\0226\n\013graph_nodes\030\n \003(\0132!.ten"
  "sorflow.tfprof.GraphNodeProto\0228\n\010childre"
  "n\030\013 \003(\0132&.tensorflow.tfprof.MultiGraphNo"
  "deProto\"\302\001\n\013AdviceProto\022>\n\010checkers\030\001 \003("
  "\0132,.tensorflow.tfprof.AdviceProto.Checke"
  "rsEntry\032W\n\rCheckersEntry\022\013\n\003key\030\001 \001(\t\0225\n"
  "\005value\030\002 \001(\0132&.tensorflow.tfprof.AdviceP"
  "roto.Checker:\0028\001\032\032\n\007Checker\022\017\n\007reports\030\002"
  " \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_sccs[7] = {
  &scc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_AdviceProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_GraphNodeProto_InputShapesEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
  &scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto, "tensorflow/core/profiler/tfprof_output.proto", 2012,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto, 7, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto), true);
namespace tensorflow {
namespace tfprof {

// ===================================================================

void TFProfTensorProto::InitAsDefaultInstance() {
}
class TFProfTensorProto::_Internal {
 public:
};

TFProfTensorProto::TFProfTensorProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.TFProfTensorProto)
}
TFProfTensorProto::TFProfTensorProto(const TFProfTensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_double_(from.value_double_),
      value_int64_(from.value_int64_),
      value_str_(from.value_str_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.TFProfTensorProto)
}

void TFProfTensorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  dtype_ = 0;
}

TFProfTensorProto::~TFProfTensorProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.TFProfTensorProto)
  SharedDtor();
}

void TFProfTensorProto::SharedDtor() {
}

void TFProfTensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TFProfTensorProto& TFProfTensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFProfTensorProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  return *internal_default_instance();
}


void TFProfTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.TFProfTensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_double_.Clear();
  value_int64_.Clear();
  value_str_.Clear();
  dtype_ = 0;
  _internal_metadata_.Clear();
}

const char* TFProfTensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated double value_double = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_value_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 value_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_value_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_value_str(), ptr, ctx, "tensorflow.tfprof.TFProfTensorProto.value_str");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TFProfTensorProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.TFProfTensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // repeated double value_double = 2;
  if (this->_internal_value_double_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_value_double(), target);
  }

  // repeated int64 value_int64 = 3;
  {
    int byte_size = _value_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_value_int64(), byte_size, target);
    }
  }

  // repeated string value_str = 4;
  for (int i = 0, n = this->_internal_value_str_size(); i < n; i++) {
    const auto& s = this->_internal_value_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.TFProfTensorProto.value_str");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.TFProfTensorProto)
  return target;
}

size_t TFProfTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.TFProfTensorProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value_double = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 value_int64 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->value_int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value_str = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_str_.size());
  for (int i = 0, n = value_str_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_str_.Get(i));
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFProfTensorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TFProfTensorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFProfTensorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.TFProfTensorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.TFProfTensorProto)
    MergeFrom(*source);
  }
}

void TFProfTensorProto::MergeFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.TFProfTensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_double_.MergeFrom(from.value_double_);
  value_int64_.MergeFrom(from.value_int64_);
  value_str_.MergeFrom(from.value_str_);
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void TFProfTensorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFProfTensorProto::CopyFrom(const TFProfTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.TFProfTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFProfTensorProto::IsInitialized() const {
  return true;
}

void TFProfTensorProto::InternalSwap(TFProfTensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_double_.InternalSwap(&other->value_double_);
  value_int64_.InternalSwap(&other->value_int64_);
  value_str_.InternalSwap(&other->value_str_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFProfTensorProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GraphNodeProto_InputShapesEntry_DoNotUse::GraphNodeProto_InputShapesEntry_DoNotUse() {}
GraphNodeProto_InputShapesEntry_DoNotUse::GraphNodeProto_InputShapesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphNodeProto_InputShapesEntry_DoNotUse::MergeFrom(const GraphNodeProto_InputShapesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphNodeProto_InputShapesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GraphNodeProto_InputShapesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GraphNodeProto::InitAsDefaultInstance() {
  ::tensorflow::tfprof::_GraphNodeProto_default_instance_._instance.get_mutable()->tensor_value_ = const_cast< ::tensorflow::tfprof::TFProfTensorProto*>(
      ::tensorflow::tfprof::TFProfTensorProto::internal_default_instance());
}
class GraphNodeProto::_Internal {
 public:
  static const ::tensorflow::tfprof::TFProfTensorProto& tensor_value(const GraphNodeProto* msg);
};

const ::tensorflow::tfprof::TFProfTensorProto&
GraphNodeProto::_Internal::tensor_value(const GraphNodeProto* msg) {
  return *msg->tensor_value_;
}
void GraphNodeProto::clear_shapes() {
  shapes_.Clear();
}
void GraphNodeProto::clear_input_shapes() {
  input_shapes_.Clear();
}
GraphNodeProto::GraphNodeProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.GraphNodeProto)
}
GraphNodeProto::GraphNodeProto(const GraphNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_),
      shapes_(from.shapes_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_shapes_.MergeFrom(from.input_shapes_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_tensor_value()) {
    tensor_value_ = new ::tensorflow::tfprof::TFProfTensorProto(*from.tensor_value_);
  } else {
    tensor_value_ = nullptr;
  }
  ::memcpy(&exec_micros_, &from.exec_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_output_bytes_) -
    reinterpret_cast<char*>(&exec_micros_)) + sizeof(total_output_bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.GraphNodeProto)
}

void GraphNodeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_output_bytes_) -
      reinterpret_cast<char*>(&tensor_value_)) + sizeof(total_output_bytes_));
}

GraphNodeProto::~GraphNodeProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.GraphNodeProto)
  SharedDtor();
}

void GraphNodeProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_value_;
}

void GraphNodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphNodeProto& GraphNodeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  return *internal_default_instance();
}


void GraphNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.GraphNodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  shapes_.Clear();
  children_.Clear();
  input_shapes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tensor_value_ != nullptr) {
    delete tensor_value_;
  }
  tensor_value_ = nullptr;
  ::memset(&exec_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_output_bytes_) -
      reinterpret_cast<char*>(&exec_micros_)) + sizeof(total_output_bytes_));
  _internal_metadata_.Clear();
}

const char* GraphNodeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.tfprof.GraphNodeProto.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exec_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 requested_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_exec_micros = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_requested_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_parameters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string devices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_devices(), ptr, ctx, "tensorflow.tfprof.GraphNodeProto.devices");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorShapeProto shapes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 float_ops = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_float_ops = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          total_float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&input_shapes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 accelerator_exec_micros = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          accelerator_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_exec_micros = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cpu_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_accelerator_exec_micros = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          total_accelerator_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_cpu_exec_micros = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          total_cpu_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 run_count = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          run_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_run_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          total_run_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_definition_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          total_definition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_bytes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 residual_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 output_bytes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_peak_bytes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          total_peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_residual_bytes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          total_residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_output_bytes = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          total_output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphNodeProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.GraphNodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exec_micros(), target);
  }

  // int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_requested_bytes(), target);
  }

  // int64 parameters = 4;
  if (this->parameters() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_parameters(), target);
  }

  // int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_exec_micros(), target);
  }

  // int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_total_requested_bytes(), target);
  }

  // int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_parameters(), target);
  }

  // repeated string devices = 10;
  for (int i = 0, n = this->_internal_devices_size(); i < n; i++) {
    const auto& s = this->_internal_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.GraphNodeProto.devices");
    target = stream->WriteString(10, s, target);
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_shapes(i), target, stream);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_children(i), target, stream);
  }

  // int64 float_ops = 13;
  if (this->float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_float_ops(), target);
  }

  // int64 total_float_ops = 14;
  if (this->total_float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_total_float_ops(), target);
  }

  // .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (this->has_tensor_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::tensor_value(this), target, stream);
  }

  // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
  if (!this->_internal_input_shapes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TensorShapeProto >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_shapes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_shapes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TensorShapeProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->_internal_input_shapes().begin();
          it != this->_internal_input_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphNodeProto_InputShapesEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TensorShapeProto >::const_iterator
          it = this->_internal_input_shapes().begin();
          it != this->_internal_input_shapes().end(); ++it) {
        target = GraphNodeProto_InputShapesEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
      }
    }
  }

  // int64 accelerator_exec_micros = 17;
  if (this->accelerator_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_accelerator_exec_micros(), target);
  }

  // int64 cpu_exec_micros = 18;
  if (this->cpu_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_cpu_exec_micros(), target);
  }

  // int64 total_accelerator_exec_micros = 19;
  if (this->total_accelerator_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_total_accelerator_exec_micros(), target);
  }

  // int64 total_cpu_exec_micros = 20;
  if (this->total_cpu_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_total_cpu_exec_micros(), target);
  }

  // int64 run_count = 21;
  if (this->run_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_run_count(), target);
  }

  // int64 total_run_count = 22;
  if (this->total_run_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_total_run_count(), target);
  }

  // int64 total_definition_count = 23;
  if (this->total_definition_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_total_definition_count(), target);
  }

  // int64 peak_bytes = 24;
  if (this->peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_peak_bytes(), target);
  }

  // int64 residual_bytes = 25;
  if (this->residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_residual_bytes(), target);
  }

  // int64 output_bytes = 26;
  if (this->output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->_internal_output_bytes(), target);
  }

  // int64 total_peak_bytes = 27;
  if (this->total_peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_total_peak_bytes(), target);
  }

  // int64 total_residual_bytes = 28;
  if (this->total_residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->_internal_total_residual_bytes(), target);
  }

  // int64 total_output_bytes = 29;
  if (this->total_output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(29, this->_internal_total_output_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.GraphNodeProto)
  return target;
}

size_t GraphNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.GraphNodeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string devices = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(devices_.size());
  for (int i = 0, n = devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      devices_.Get(i));
  }

  // repeated .tensorflow.TensorShapeProto shapes = 11;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto children = 12;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .tensorflow.TensorShapeProto> input_shapes = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_shapes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TensorShapeProto >::const_iterator
      it = this->_internal_input_shapes().begin();
      it != this->_internal_input_shapes().end(); ++it) {
    total_size += GraphNodeProto_InputShapesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.tfprof.TFProfTensorProto tensor_value = 15;
  if (this->has_tensor_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_value_);
  }

  // int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exec_micros());
  }

  // int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_requested_bytes());
  }

  // int64 parameters = 4;
  if (this->parameters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parameters());
  }

  // int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_exec_micros());
  }

  // int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_requested_bytes());
  }

  // int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_parameters());
  }

  // int64 float_ops = 13;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_float_ops());
  }

  // int64 total_float_ops = 14;
  if (this->total_float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_float_ops());
  }

  // int64 accelerator_exec_micros = 17;
  if (this->accelerator_exec_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accelerator_exec_micros());
  }

  // int64 cpu_exec_micros = 18;
  if (this->cpu_exec_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_exec_micros());
  }

  // int64 total_accelerator_exec_micros = 19;
  if (this->total_accelerator_exec_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_accelerator_exec_micros());
  }

  // int64 total_cpu_exec_micros = 20;
  if (this->total_cpu_exec_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_cpu_exec_micros());
  }

  // int64 run_count = 21;
  if (this->run_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_run_count());
  }

  // int64 total_run_count = 22;
  if (this->total_run_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_run_count());
  }

  // int64 total_definition_count = 23;
  if (this->total_definition_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_definition_count());
  }

  // int64 peak_bytes = 24;
  if (this->peak_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_bytes());
  }

  // int64 residual_bytes = 25;
  if (this->residual_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_residual_bytes());
  }

  // int64 output_bytes = 26;
  if (this->output_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_output_bytes());
  }

  // int64 total_peak_bytes = 27;
  if (this->total_peak_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_peak_bytes());
  }

  // int64 total_residual_bytes = 28;
  if (this->total_residual_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_residual_bytes());
  }

  // int64 total_output_bytes = 29;
  if (this->total_output_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_output_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphNodeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.GraphNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphNodeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphNodeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.GraphNodeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.GraphNodeProto)
    MergeFrom(*source);
  }
}

void GraphNodeProto::MergeFrom(const GraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.GraphNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  shapes_.MergeFrom(from.shapes_);
  children_.MergeFrom(from.children_);
  input_shapes_.MergeFrom(from.input_shapes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_value()) {
    _internal_mutable_tensor_value()->::tensorflow::tfprof::TFProfTensorProto::MergeFrom(from._internal_tensor_value());
  }
  if (from.exec_micros() != 0) {
    _internal_set_exec_micros(from._internal_exec_micros());
  }
  if (from.requested_bytes() != 0) {
    _internal_set_requested_bytes(from._internal_requested_bytes());
  }
  if (from.parameters() != 0) {
    _internal_set_parameters(from._internal_parameters());
  }
  if (from.total_exec_micros() != 0) {
    _internal_set_total_exec_micros(from._internal_total_exec_micros());
  }
  if (from.total_requested_bytes() != 0) {
    _internal_set_total_requested_bytes(from._internal_total_requested_bytes());
  }
  if (from.total_parameters() != 0) {
    _internal_set_total_parameters(from._internal_total_parameters());
  }
  if (from.float_ops() != 0) {
    _internal_set_float_ops(from._internal_float_ops());
  }
  if (from.total_float_ops() != 0) {
    _internal_set_total_float_ops(from._internal_total_float_ops());
  }
  if (from.accelerator_exec_micros() != 0) {
    _internal_set_accelerator_exec_micros(from._internal_accelerator_exec_micros());
  }
  if (from.cpu_exec_micros() != 0) {
    _internal_set_cpu_exec_micros(from._internal_cpu_exec_micros());
  }
  if (from.total_accelerator_exec_micros() != 0) {
    _internal_set_total_accelerator_exec_micros(from._internal_total_accelerator_exec_micros());
  }
  if (from.total_cpu_exec_micros() != 0) {
    _internal_set_total_cpu_exec_micros(from._internal_total_cpu_exec_micros());
  }
  if (from.run_count() != 0) {
    _internal_set_run_count(from._internal_run_count());
  }
  if (from.total_run_count() != 0) {
    _internal_set_total_run_count(from._internal_total_run_count());
  }
  if (from.total_definition_count() != 0) {
    _internal_set_total_definition_count(from._internal_total_definition_count());
  }
  if (from.peak_bytes() != 0) {
    _internal_set_peak_bytes(from._internal_peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    _internal_set_residual_bytes(from._internal_residual_bytes());
  }
  if (from.output_bytes() != 0) {
    _internal_set_output_bytes(from._internal_output_bytes());
  }
  if (from.total_peak_bytes() != 0) {
    _internal_set_total_peak_bytes(from._internal_total_peak_bytes());
  }
  if (from.total_residual_bytes() != 0) {
    _internal_set_total_residual_bytes(from._internal_total_residual_bytes());
  }
  if (from.total_output_bytes() != 0) {
    _internal_set_total_output_bytes(from._internal_total_output_bytes());
  }
}

void GraphNodeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.GraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphNodeProto::CopyFrom(const GraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.GraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphNodeProto::IsInitialized() const {
  return true;
}

void GraphNodeProto::InternalSwap(GraphNodeProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  shapes_.InternalSwap(&other->shapes_);
  children_.InternalSwap(&other->children_);
  input_shapes_.Swap(&other->input_shapes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_value_, other->tensor_value_);
  swap(exec_micros_, other->exec_micros_);
  swap(requested_bytes_, other->requested_bytes_);
  swap(parameters_, other->parameters_);
  swap(total_exec_micros_, other->total_exec_micros_);
  swap(total_requested_bytes_, other->total_requested_bytes_);
  swap(total_parameters_, other->total_parameters_);
  swap(float_ops_, other->float_ops_);
  swap(total_float_ops_, other->total_float_ops_);
  swap(accelerator_exec_micros_, other->accelerator_exec_micros_);
  swap(cpu_exec_micros_, other->cpu_exec_micros_);
  swap(total_accelerator_exec_micros_, other->total_accelerator_exec_micros_);
  swap(total_cpu_exec_micros_, other->total_cpu_exec_micros_);
  swap(run_count_, other->run_count_);
  swap(total_run_count_, other->total_run_count_);
  swap(total_definition_count_, other->total_definition_count_);
  swap(peak_bytes_, other->peak_bytes_);
  swap(residual_bytes_, other->residual_bytes_);
  swap(output_bytes_, other->output_bytes_);
  swap(total_peak_bytes_, other->total_peak_bytes_);
  swap(total_residual_bytes_, other->total_residual_bytes_);
  swap(total_output_bytes_, other->total_output_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphNodeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiGraphNodeProto::InitAsDefaultInstance() {
}
class MultiGraphNodeProto::_Internal {
 public:
};

MultiGraphNodeProto::MultiGraphNodeProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.MultiGraphNodeProto)
}
MultiGraphNodeProto::MultiGraphNodeProto(const MultiGraphNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      graph_nodes_(from.graph_nodes_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&exec_micros_, &from.exec_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_output_bytes_) -
    reinterpret_cast<char*>(&exec_micros_)) + sizeof(total_output_bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.MultiGraphNodeProto)
}

void MultiGraphNodeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exec_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_output_bytes_) -
      reinterpret_cast<char*>(&exec_micros_)) + sizeof(total_output_bytes_));
}

MultiGraphNodeProto::~MultiGraphNodeProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.MultiGraphNodeProto)
  SharedDtor();
}

void MultiGraphNodeProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultiGraphNodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiGraphNodeProto& MultiGraphNodeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiGraphNodeProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  return *internal_default_instance();
}


void MultiGraphNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.MultiGraphNodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_nodes_.Clear();
  children_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exec_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_output_bytes_) -
      reinterpret_cast<char*>(&exec_micros_)) + sizeof(total_output_bytes_));
  _internal_metadata_.Clear();
}

const char* MultiGraphNodeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.tfprof.MultiGraphNodeProto.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exec_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 requested_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 float_ops = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_exec_micros = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_requested_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_parameters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_float_ops = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 accelerator_exec_micros = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          accelerator_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu_exec_micros = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cpu_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_accelerator_exec_micros = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          total_accelerator_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_cpu_exec_micros = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          total_cpu_exec_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_bytes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 residual_bytes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 output_bytes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_peak_bytes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          total_peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_residual_bytes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          total_residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_output_bytes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          total_output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiGraphNodeProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.MultiGraphNodeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.MultiGraphNodeProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exec_micros(), target);
  }

  // int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_requested_bytes(), target);
  }

  // int64 parameters = 4;
  if (this->parameters() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_parameters(), target);
  }

  // int64 float_ops = 5;
  if (this->float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_float_ops(), target);
  }

  // int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_exec_micros(), target);
  }

  // int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_total_requested_bytes(), target);
  }

  // int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_parameters(), target);
  }

  // int64 total_float_ops = 9;
  if (this->total_float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_total_float_ops(), target);
  }

  // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graph_nodes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_graph_nodes(i), target, stream);
  }

  // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_children(i), target, stream);
  }

  // int64 accelerator_exec_micros = 12;
  if (this->accelerator_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_accelerator_exec_micros(), target);
  }

  // int64 cpu_exec_micros = 13;
  if (this->cpu_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_cpu_exec_micros(), target);
  }

  // int64 total_accelerator_exec_micros = 14;
  if (this->total_accelerator_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_total_accelerator_exec_micros(), target);
  }

  // int64 total_cpu_exec_micros = 15;
  if (this->total_cpu_exec_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_total_cpu_exec_micros(), target);
  }

  // int64 peak_bytes = 16;
  if (this->peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_peak_bytes(), target);
  }

  // int64 residual_bytes = 17;
  if (this->residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_residual_bytes(), target);
  }

  // int64 output_bytes = 18;
  if (this->output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_output_bytes(), target);
  }

  // int64 total_peak_bytes = 19;
  if (this->total_peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_total_peak_bytes(), target);
  }

  // int64 total_residual_bytes = 20;
  if (this->total_residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_total_residual_bytes(), target);
  }

  // int64 total_output_bytes = 21;
  if (this->total_output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_total_output_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.MultiGraphNodeProto)
  return target;
}

size_t MultiGraphNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.MultiGraphNodeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.GraphNodeProto graph_nodes = 10;
  total_size += 1UL * this->_internal_graph_nodes_size();
  for (const auto& msg : this->graph_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.tfprof.MultiGraphNodeProto children = 11;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 exec_micros = 2;
  if (this->exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exec_micros());
  }

  // int64 requested_bytes = 3;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_requested_bytes());
  }

  // int64 parameters = 4;
  if (this->parameters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parameters());
  }

  // int64 float_ops = 5;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_float_ops());
  }

  // int64 total_exec_micros = 6;
  if (this->total_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_exec_micros());
  }

  // int64 total_requested_bytes = 7;
  if (this->total_requested_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_requested_bytes());
  }

  // int64 total_parameters = 8;
  if (this->total_parameters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_parameters());
  }

  // int64 total_float_ops = 9;
  if (this->total_float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_float_ops());
  }

  // int64 accelerator_exec_micros = 12;
  if (this->accelerator_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accelerator_exec_micros());
  }

  // int64 cpu_exec_micros = 13;
  if (this->cpu_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu_exec_micros());
  }

  // int64 total_accelerator_exec_micros = 14;
  if (this->total_accelerator_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_accelerator_exec_micros());
  }

  // int64 total_cpu_exec_micros = 15;
  if (this->total_cpu_exec_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_cpu_exec_micros());
  }

  // int64 peak_bytes = 16;
  if (this->peak_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_bytes());
  }

  // int64 residual_bytes = 17;
  if (this->residual_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_residual_bytes());
  }

  // int64 output_bytes = 18;
  if (this->output_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_output_bytes());
  }

  // int64 total_peak_bytes = 19;
  if (this->total_peak_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_peak_bytes());
  }

  // int64 total_residual_bytes = 20;
  if (this->total_residual_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_residual_bytes());
  }

  // int64 total_output_bytes = 21;
  if (this->total_output_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_output_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiGraphNodeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiGraphNodeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiGraphNodeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.MultiGraphNodeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.MultiGraphNodeProto)
    MergeFrom(*source);
  }
}

void MultiGraphNodeProto::MergeFrom(const MultiGraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_nodes_.MergeFrom(from.graph_nodes_);
  children_.MergeFrom(from.children_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.exec_micros() != 0) {
    _internal_set_exec_micros(from._internal_exec_micros());
  }
  if (from.requested_bytes() != 0) {
    _internal_set_requested_bytes(from._internal_requested_bytes());
  }
  if (from.parameters() != 0) {
    _internal_set_parameters(from._internal_parameters());
  }
  if (from.float_ops() != 0) {
    _internal_set_float_ops(from._internal_float_ops());
  }
  if (from.total_exec_micros() != 0) {
    _internal_set_total_exec_micros(from._internal_total_exec_micros());
  }
  if (from.total_requested_bytes() != 0) {
    _internal_set_total_requested_bytes(from._internal_total_requested_bytes());
  }
  if (from.total_parameters() != 0) {
    _internal_set_total_parameters(from._internal_total_parameters());
  }
  if (from.total_float_ops() != 0) {
    _internal_set_total_float_ops(from._internal_total_float_ops());
  }
  if (from.accelerator_exec_micros() != 0) {
    _internal_set_accelerator_exec_micros(from._internal_accelerator_exec_micros());
  }
  if (from.cpu_exec_micros() != 0) {
    _internal_set_cpu_exec_micros(from._internal_cpu_exec_micros());
  }
  if (from.total_accelerator_exec_micros() != 0) {
    _internal_set_total_accelerator_exec_micros(from._internal_total_accelerator_exec_micros());
  }
  if (from.total_cpu_exec_micros() != 0) {
    _internal_set_total_cpu_exec_micros(from._internal_total_cpu_exec_micros());
  }
  if (from.peak_bytes() != 0) {
    _internal_set_peak_bytes(from._internal_peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    _internal_set_residual_bytes(from._internal_residual_bytes());
  }
  if (from.output_bytes() != 0) {
    _internal_set_output_bytes(from._internal_output_bytes());
  }
  if (from.total_peak_bytes() != 0) {
    _internal_set_total_peak_bytes(from._internal_total_peak_bytes());
  }
  if (from.total_residual_bytes() != 0) {
    _internal_set_total_residual_bytes(from._internal_total_residual_bytes());
  }
  if (from.total_output_bytes() != 0) {
    _internal_set_total_output_bytes(from._internal_total_output_bytes());
  }
}

void MultiGraphNodeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiGraphNodeProto::CopyFrom(const MultiGraphNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.MultiGraphNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiGraphNodeProto::IsInitialized() const {
  return true;
}

void MultiGraphNodeProto::InternalSwap(MultiGraphNodeProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  graph_nodes_.InternalSwap(&other->graph_nodes_);
  children_.InternalSwap(&other->children_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exec_micros_, other->exec_micros_);
  swap(requested_bytes_, other->requested_bytes_);
  swap(parameters_, other->parameters_);
  swap(float_ops_, other->float_ops_);
  swap(total_exec_micros_, other->total_exec_micros_);
  swap(total_requested_bytes_, other->total_requested_bytes_);
  swap(total_parameters_, other->total_parameters_);
  swap(total_float_ops_, other->total_float_ops_);
  swap(accelerator_exec_micros_, other->accelerator_exec_micros_);
  swap(cpu_exec_micros_, other->cpu_exec_micros_);
  swap(total_accelerator_exec_micros_, other->total_accelerator_exec_micros_);
  swap(total_cpu_exec_micros_, other->total_cpu_exec_micros_);
  swap(peak_bytes_, other->peak_bytes_);
  swap(residual_bytes_, other->residual_bytes_);
  swap(output_bytes_, other->output_bytes_);
  swap(total_peak_bytes_, other->total_peak_bytes_);
  swap(total_residual_bytes_, other->total_residual_bytes_);
  swap(total_output_bytes_, other->total_output_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiGraphNodeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AdviceProto_CheckersEntry_DoNotUse::AdviceProto_CheckersEntry_DoNotUse() {}
AdviceProto_CheckersEntry_DoNotUse::AdviceProto_CheckersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdviceProto_CheckersEntry_DoNotUse::MergeFrom(const AdviceProto_CheckersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AdviceProto_CheckersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AdviceProto_CheckersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AdviceProto_Checker::InitAsDefaultInstance() {
}
class AdviceProto_Checker::_Internal {
 public:
};

AdviceProto_Checker::AdviceProto_Checker()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdviceProto.Checker)
}
AdviceProto_Checker::AdviceProto_Checker(const AdviceProto_Checker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdviceProto.Checker)
}

void AdviceProto_Checker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
}

AdviceProto_Checker::~AdviceProto_Checker() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdviceProto.Checker)
  SharedDtor();
}

void AdviceProto_Checker::SharedDtor() {
}

void AdviceProto_Checker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdviceProto_Checker& AdviceProto_Checker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdviceProto_Checker_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  return *internal_default_instance();
}


void AdviceProto_Checker::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdviceProto.Checker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  _internal_metadata_.Clear();
}

const char* AdviceProto_Checker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string reports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_reports(), ptr, ctx, "tensorflow.tfprof.AdviceProto.Checker.reports");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdviceProto_Checker::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdviceProto.Checker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reports = 2;
  for (int i = 0, n = this->_internal_reports_size(); i < n; i++) {
    const auto& s = this->_internal_reports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.AdviceProto.Checker.reports");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdviceProto.Checker)
  return target;
}

size_t AdviceProto_Checker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdviceProto.Checker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reports = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reports_.size());
  for (int i = 0, n = reports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reports_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdviceProto_Checker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdviceProto.Checker)
  GOOGLE_DCHECK_NE(&from, this);
  const AdviceProto_Checker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdviceProto_Checker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdviceProto.Checker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdviceProto.Checker)
    MergeFrom(*source);
  }
}

void AdviceProto_Checker::MergeFrom(const AdviceProto_Checker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdviceProto.Checker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
}

void AdviceProto_Checker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdviceProto_Checker::CopyFrom(const AdviceProto_Checker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdviceProto.Checker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdviceProto_Checker::IsInitialized() const {
  return true;
}

void AdviceProto_Checker::InternalSwap(AdviceProto_Checker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reports_.InternalSwap(&other->reports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdviceProto_Checker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdviceProto::InitAsDefaultInstance() {
}
class AdviceProto::_Internal {
 public:
};

AdviceProto::AdviceProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdviceProto)
}
AdviceProto::AdviceProto(const AdviceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checkers_.MergeFrom(from.checkers_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdviceProto)
}

void AdviceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
}

AdviceProto::~AdviceProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdviceProto)
  SharedDtor();
}

void AdviceProto::SharedDtor() {
}

void AdviceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdviceProto& AdviceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdviceProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foutput_2eproto.base);
  return *internal_default_instance();
}


void AdviceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkers_.Clear();
  _internal_metadata_.Clear();
}

const char* AdviceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&checkers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdviceProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
  if (!this->_internal_checkers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdviceProto.CheckersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_checkers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_checkers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdviceProto_Checker >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->_internal_checkers().begin();
          it != this->_internal_checkers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdviceProto_CheckersEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
          it = this->_internal_checkers().begin();
          it != this->_internal_checkers().end(); ++it) {
        target = AdviceProto_CheckersEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdviceProto)
  return target;
}

size_t AdviceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdviceProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.tfprof.AdviceProto.Checker> checkers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_checkers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdviceProto_Checker >::const_iterator
      it = this->_internal_checkers().begin();
      it != this->_internal_checkers().end(); ++it) {
    total_size += AdviceProto_CheckersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdviceProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdviceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AdviceProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdviceProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdviceProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdviceProto)
    MergeFrom(*source);
  }
}

void AdviceProto::MergeFrom(const AdviceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdviceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkers_.MergeFrom(from.checkers_);
}

void AdviceProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdviceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdviceProto::CopyFrom(const AdviceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdviceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdviceProto::IsInitialized() const {
  return true;
}

void AdviceProto::InternalSwap(AdviceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkers_.Swap(&other->checkers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdviceProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tfprof
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::TFProfTensorProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::TFProfTensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::TFProfTensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::GraphNodeProto_InputShapesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::GraphNodeProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::GraphNodeProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::GraphNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::MultiGraphNodeProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::MultiGraphNodeProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::MultiGraphNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdviceProto_CheckersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdviceProto_Checker* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdviceProto_Checker >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdviceProto_Checker >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdviceProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdviceProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdviceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
