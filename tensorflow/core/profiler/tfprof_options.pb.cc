// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_options.proto

#include "tensorflow/core/profiler/tfprof_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto;
namespace tensorflow {
namespace tfprof {
class OptionsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionsProto> _instance;
} _OptionsProto_default_instance_;
class AdvisorOptionsProto_CheckersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvisorOptionsProto_CheckersEntry_DoNotUse> _instance;
} _AdvisorOptionsProto_CheckersEntry_DoNotUse_default_instance_;
class AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse> _instance;
} _AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_default_instance_;
class AdvisorOptionsProto_CheckerOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvisorOptionsProto_CheckerOption> _instance;
} _AdvisorOptionsProto_CheckerOption_default_instance_;
class AdvisorOptionsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvisorOptionsProto> _instance;
} _AdvisorOptionsProto_default_instance_;
}  // namespace tfprof
}  // namespace tensorflow
static void InitDefaultsscc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdvisorOptionsProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdvisorOptionsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::AdvisorOptionsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto}, {
      &scc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdvisorOptionsProto_CheckerOption_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto}, {
      &scc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse();
  }
  ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto}, {}};

static void InitDefaultsscc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_AdvisorOptionsProto_CheckersEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse();
  }
  ::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto}, {
      &scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::tfprof::_OptionsProto_default_instance_;
    new (ptr) ::tensorflow::tfprof::OptionsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::tfprof::OptionsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, max_depth_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_peak_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_residual_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_output_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_accelerator_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_cpu_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_params_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_float_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, min_occurrence_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, step_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, order_by_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, account_type_regexes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, start_name_regexes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, trim_name_regexes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, show_name_regexes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, hide_name_regexes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, account_displayed_op_only_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, select_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, output_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::OptionsProto, dump_to_file_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tfprof::AdvisorOptionsProto, checkers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::tfprof::OptionsProto)},
  { 27, 34, sizeof(::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse)},
  { 36, 43, sizeof(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse)},
  { 45, -1, sizeof(::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption)},
  { 51, -1, sizeof(::tensorflow::tfprof::AdvisorOptionsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_OptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdvisorOptionsProto_CheckersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdvisorOptionsProto_CheckerOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::tfprof::_AdvisorOptionsProto_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/profiler/tfprof_option"
  "s.proto\022\021tensorflow.tfprof\"\225\004\n\014OptionsPr"
  "oto\022\021\n\tmax_depth\030\001 \001(\003\022\021\n\tmin_bytes\030\002 \001("
  "\003\022\026\n\016min_peak_bytes\030\023 \001(\003\022\032\n\022min_residua"
  "l_bytes\030\024 \001(\003\022\030\n\020min_output_bytes\030\025 \001(\003\022"
  "\022\n\nmin_micros\030\003 \001(\003\022\036\n\026min_accelerator_m"
  "icros\030\026 \001(\003\022\026\n\016min_cpu_micros\030\027 \001(\003\022\022\n\nm"
  "in_params\030\004 \001(\003\022\025\n\rmin_float_ops\030\005 \001(\003\022\026"
  "\n\016min_occurrence\030\021 \001(\003\022\014\n\004step\030\022 \001(\003\022\020\n\010"
  "order_by\030\007 \001(\t\022\034\n\024account_type_regexes\030\010"
  " \003(\t\022\032\n\022start_name_regexes\030\t \003(\t\022\031\n\021trim"
  "_name_regexes\030\n \003(\t\022\031\n\021show_name_regexes"
  "\030\013 \003(\t\022\031\n\021hide_name_regexes\030\014 \003(\t\022!\n\031acc"
  "ount_displayed_op_only\030\r \001(\010\022\016\n\006select\030\016"
  " \003(\t\022\016\n\006output\030\017 \001(\t\022\024\n\014dump_to_file\030\020 \001"
  "(\t\"\332\002\n\023AdvisorOptionsProto\022F\n\010checkers\030\001"
  " \003(\01324.tensorflow.tfprof.AdvisorOptionsP"
  "roto.CheckersEntry\032e\n\rCheckersEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022C\n\005value\030\002 \001(\01324.tensorflow.tfp"
  "rof.AdvisorOptionsProto.CheckerOption:\0028"
  "\001\032\223\001\n\rCheckerOption\022R\n\007options\030\001 \003(\0132A.t"
  "ensorflow.tfprof.AdvisorOptionsProto.Che"
  "ckerOption.OptionsEntry\032.\n\014OptionsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_sccs[5] = {
  &scc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,
  &scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,
  &scc_info_AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,
  &scc_info_AdvisorOptionsProto_CheckersEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,
  &scc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto, "tensorflow/core/profiler/tfprof_options.proto", 959,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto), true);
namespace tensorflow {
namespace tfprof {

// ===================================================================

void OptionsProto::InitAsDefaultInstance() {
}
class OptionsProto::_Internal {
 public:
};

OptionsProto::OptionsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OptionsProto)
}
OptionsProto::OptionsProto(const OptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_type_regexes_(from.account_type_regexes_),
      start_name_regexes_(from.start_name_regexes_),
      trim_name_regexes_(from.trim_name_regexes_),
      show_name_regexes_(from.show_name_regexes_),
      hide_name_regexes_(from.hide_name_regexes_),
      select_(from.select_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_by().empty()) {
    order_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  dump_to_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dump_to_file().empty()) {
    dump_to_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_to_file_);
  }
  ::memcpy(&max_depth_, &from.max_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_displayed_op_only_) -
    reinterpret_cast<char*>(&max_depth_)) + sizeof(account_displayed_op_only_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OptionsProto)
}

void OptionsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
  order_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_displayed_op_only_) -
      reinterpret_cast<char*>(&max_depth_)) + sizeof(account_displayed_op_only_));
}

OptionsProto::~OptionsProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OptionsProto)
  SharedDtor();
}

void OptionsProto::SharedDtor() {
  order_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionsProto& OptionsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
  return *internal_default_instance();
}


void OptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_type_regexes_.Clear();
  start_name_regexes_.Clear();
  trim_name_regexes_.Clear();
  show_name_regexes_.Clear();
  hide_name_regexes_.Clear();
  select_.Clear();
  order_by_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dump_to_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_displayed_op_only_) -
      reinterpret_cast<char*>(&max_depth_)) + sizeof(account_displayed_op_only_));
  _internal_metadata_.Clear();
}

const char* OptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_float_ops = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_float_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_by = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_order_by(), ptr, ctx, "tensorflow.tfprof.OptionsProto.order_by");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string account_type_regexes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_account_type_regexes(), ptr, ctx, "tensorflow.tfprof.OptionsProto.account_type_regexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string start_name_regexes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_start_name_regexes(), ptr, ctx, "tensorflow.tfprof.OptionsProto.start_name_regexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string trim_name_regexes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_trim_name_regexes(), ptr, ctx, "tensorflow.tfprof.OptionsProto.trim_name_regexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string show_name_regexes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_show_name_regexes(), ptr, ctx, "tensorflow.tfprof.OptionsProto.show_name_regexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string hide_name_regexes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_hide_name_regexes(), ptr, ctx, "tensorflow.tfprof.OptionsProto.hide_name_regexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // bool account_displayed_op_only = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          account_displayed_op_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string select = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_select(), ptr, ctx, "tensorflow.tfprof.OptionsProto.select");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string output = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_output(), ptr, ctx, "tensorflow.tfprof.OptionsProto.output");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dump_to_file = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_dump_to_file(), ptr, ctx, "tensorflow.tfprof.OptionsProto.dump_to_file");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_occurrence = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          min_occurrence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 step = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_peak_bytes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          min_peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_residual_bytes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          min_residual_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_output_bytes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          min_output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_accelerator_micros = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          min_accelerator_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_cpu_micros = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          min_cpu_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_depth = 1;
  if (this->max_depth() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_depth(), target);
  }

  // int64 min_bytes = 2;
  if (this->min_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_bytes(), target);
  }

  // int64 min_micros = 3;
  if (this->min_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_min_micros(), target);
  }

  // int64 min_params = 4;
  if (this->min_params() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_min_params(), target);
  }

  // int64 min_float_ops = 5;
  if (this->min_float_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_min_float_ops(), target);
  }

  // string order_by = 7;
  if (this->order_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_by().data(), static_cast<int>(this->_internal_order_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.order_by");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_order_by(), target);
  }

  // repeated string account_type_regexes = 8;
  for (int i = 0, n = this->_internal_account_type_regexes_size(); i < n; i++) {
    const auto& s = this->_internal_account_type_regexes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.account_type_regexes");
    target = stream->WriteString(8, s, target);
  }

  // repeated string start_name_regexes = 9;
  for (int i = 0, n = this->_internal_start_name_regexes_size(); i < n; i++) {
    const auto& s = this->_internal_start_name_regexes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.start_name_regexes");
    target = stream->WriteString(9, s, target);
  }

  // repeated string trim_name_regexes = 10;
  for (int i = 0, n = this->_internal_trim_name_regexes_size(); i < n; i++) {
    const auto& s = this->_internal_trim_name_regexes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.trim_name_regexes");
    target = stream->WriteString(10, s, target);
  }

  // repeated string show_name_regexes = 11;
  for (int i = 0, n = this->_internal_show_name_regexes_size(); i < n; i++) {
    const auto& s = this->_internal_show_name_regexes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.show_name_regexes");
    target = stream->WriteString(11, s, target);
  }

  // repeated string hide_name_regexes = 12;
  for (int i = 0, n = this->_internal_hide_name_regexes_size(); i < n; i++) {
    const auto& s = this->_internal_hide_name_regexes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.hide_name_regexes");
    target = stream->WriteString(12, s, target);
  }

  // bool account_displayed_op_only = 13;
  if (this->account_displayed_op_only() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_account_displayed_op_only(), target);
  }

  // repeated string select = 14;
  for (int i = 0, n = this->_internal_select_size(); i < n; i++) {
    const auto& s = this->_internal_select(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.select");
    target = stream->WriteString(14, s, target);
  }

  // string output = 15;
  if (this->output().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.output");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_output(), target);
  }

  // string dump_to_file = 16;
  if (this->dump_to_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dump_to_file().data(), static_cast<int>(this->_internal_dump_to_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OptionsProto.dump_to_file");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_dump_to_file(), target);
  }

  // int64 min_occurrence = 17;
  if (this->min_occurrence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_min_occurrence(), target);
  }

  // int64 step = 18;
  if (this->step() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_step(), target);
  }

  // int64 min_peak_bytes = 19;
  if (this->min_peak_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_min_peak_bytes(), target);
  }

  // int64 min_residual_bytes = 20;
  if (this->min_residual_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_min_residual_bytes(), target);
  }

  // int64 min_output_bytes = 21;
  if (this->min_output_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_min_output_bytes(), target);
  }

  // int64 min_accelerator_micros = 22;
  if (this->min_accelerator_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_min_accelerator_micros(), target);
  }

  // int64 min_cpu_micros = 23;
  if (this->min_cpu_micros() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_min_cpu_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OptionsProto)
  return target;
}

size_t OptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OptionsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_type_regexes = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_type_regexes_.size());
  for (int i = 0, n = account_type_regexes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_type_regexes_.Get(i));
  }

  // repeated string start_name_regexes = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(start_name_regexes_.size());
  for (int i = 0, n = start_name_regexes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      start_name_regexes_.Get(i));
  }

  // repeated string trim_name_regexes = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(trim_name_regexes_.size());
  for (int i = 0, n = trim_name_regexes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      trim_name_regexes_.Get(i));
  }

  // repeated string show_name_regexes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(show_name_regexes_.size());
  for (int i = 0, n = show_name_regexes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      show_name_regexes_.Get(i));
  }

  // repeated string hide_name_regexes = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hide_name_regexes_.size());
  for (int i = 0, n = hide_name_regexes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hide_name_regexes_.Get(i));
  }

  // repeated string select = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(select_.size());
  for (int i = 0, n = select_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      select_.Get(i));
  }

  // string order_by = 7;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_by());
  }

  // string output = 15;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // string dump_to_file = 16;
  if (this->dump_to_file().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dump_to_file());
  }

  // int64 max_depth = 1;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_depth());
  }

  // int64 min_bytes = 2;
  if (this->min_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_bytes());
  }

  // int64 min_micros = 3;
  if (this->min_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_micros());
  }

  // int64 min_params = 4;
  if (this->min_params() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_params());
  }

  // int64 min_float_ops = 5;
  if (this->min_float_ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_float_ops());
  }

  // int64 min_occurrence = 17;
  if (this->min_occurrence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_occurrence());
  }

  // int64 step = 18;
  if (this->step() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_step());
  }

  // int64 min_peak_bytes = 19;
  if (this->min_peak_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_peak_bytes());
  }

  // int64 min_residual_bytes = 20;
  if (this->min_residual_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_residual_bytes());
  }

  // int64 min_output_bytes = 21;
  if (this->min_output_bytes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_output_bytes());
  }

  // int64 min_accelerator_micros = 22;
  if (this->min_accelerator_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_accelerator_micros());
  }

  // int64 min_cpu_micros = 23;
  if (this->min_cpu_micros() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_cpu_micros());
  }

  // bool account_displayed_op_only = 13;
  if (this->account_displayed_op_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OptionsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OptionsProto)
    MergeFrom(*source);
  }
}

void OptionsProto::MergeFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_type_regexes_.MergeFrom(from.account_type_regexes_);
  start_name_regexes_.MergeFrom(from.start_name_regexes_);
  trim_name_regexes_.MergeFrom(from.trim_name_regexes_);
  show_name_regexes_.MergeFrom(from.show_name_regexes_);
  hide_name_regexes_.MergeFrom(from.hide_name_regexes_);
  select_.MergeFrom(from.select_);
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  if (from.dump_to_file().size() > 0) {

    dump_to_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_to_file_);
  }
  if (from.max_depth() != 0) {
    _internal_set_max_depth(from._internal_max_depth());
  }
  if (from.min_bytes() != 0) {
    _internal_set_min_bytes(from._internal_min_bytes());
  }
  if (from.min_micros() != 0) {
    _internal_set_min_micros(from._internal_min_micros());
  }
  if (from.min_params() != 0) {
    _internal_set_min_params(from._internal_min_params());
  }
  if (from.min_float_ops() != 0) {
    _internal_set_min_float_ops(from._internal_min_float_ops());
  }
  if (from.min_occurrence() != 0) {
    _internal_set_min_occurrence(from._internal_min_occurrence());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.min_peak_bytes() != 0) {
    _internal_set_min_peak_bytes(from._internal_min_peak_bytes());
  }
  if (from.min_residual_bytes() != 0) {
    _internal_set_min_residual_bytes(from._internal_min_residual_bytes());
  }
  if (from.min_output_bytes() != 0) {
    _internal_set_min_output_bytes(from._internal_min_output_bytes());
  }
  if (from.min_accelerator_micros() != 0) {
    _internal_set_min_accelerator_micros(from._internal_min_accelerator_micros());
  }
  if (from.min_cpu_micros() != 0) {
    _internal_set_min_cpu_micros(from._internal_min_cpu_micros());
  }
  if (from.account_displayed_op_only() != 0) {
    _internal_set_account_displayed_op_only(from._internal_account_displayed_op_only());
  }
}

void OptionsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsProto::CopyFrom(const OptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsProto::IsInitialized() const {
  return true;
}

void OptionsProto::InternalSwap(OptionsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_type_regexes_.InternalSwap(&other->account_type_regexes_);
  start_name_regexes_.InternalSwap(&other->start_name_regexes_);
  trim_name_regexes_.InternalSwap(&other->trim_name_regexes_);
  show_name_regexes_.InternalSwap(&other->show_name_regexes_);
  hide_name_regexes_.InternalSwap(&other->hide_name_regexes_);
  select_.InternalSwap(&other->select_);
  order_by_.Swap(&other->order_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dump_to_file_.Swap(&other->dump_to_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_depth_, other->max_depth_);
  swap(min_bytes_, other->min_bytes_);
  swap(min_micros_, other->min_micros_);
  swap(min_params_, other->min_params_);
  swap(min_float_ops_, other->min_float_ops_);
  swap(min_occurrence_, other->min_occurrence_);
  swap(step_, other->step_);
  swap(min_peak_bytes_, other->min_peak_bytes_);
  swap(min_residual_bytes_, other->min_residual_bytes_);
  swap(min_output_bytes_, other->min_output_bytes_);
  swap(min_accelerator_micros_, other->min_accelerator_micros_);
  swap(min_cpu_micros_, other->min_cpu_micros_);
  swap(account_displayed_op_only_, other->account_displayed_op_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AdvisorOptionsProto_CheckersEntry_DoNotUse::AdvisorOptionsProto_CheckersEntry_DoNotUse() {}
AdvisorOptionsProto_CheckersEntry_DoNotUse::AdvisorOptionsProto_CheckersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdvisorOptionsProto_CheckersEntry_DoNotUse::MergeFrom(const AdvisorOptionsProto_CheckersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AdvisorOptionsProto_CheckersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AdvisorOptionsProto_CheckersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse() {}
AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::MergeFrom(const AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AdvisorOptionsProto_CheckerOption::InitAsDefaultInstance() {
}
class AdvisorOptionsProto_CheckerOption::_Internal {
 public:
};

AdvisorOptionsProto_CheckerOption::AdvisorOptionsProto_CheckerOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
}
AdvisorOptionsProto_CheckerOption::AdvisorOptionsProto_CheckerOption(const AdvisorOptionsProto_CheckerOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
}

void AdvisorOptionsProto_CheckerOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
}

AdvisorOptionsProto_CheckerOption::~AdvisorOptionsProto_CheckerOption() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  SharedDtor();
}

void AdvisorOptionsProto_CheckerOption::SharedDtor() {
}

void AdvisorOptionsProto_CheckerOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvisorOptionsProto_CheckerOption& AdvisorOptionsProto_CheckerOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvisorOptionsProto_CheckerOption_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
  return *internal_default_instance();
}


void AdvisorOptionsProto_CheckerOption::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvisorOptionsProto_CheckerOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvisorOptionsProto_CheckerOption::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> options = 1;
  if (!this->_internal_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it) {
        target = AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  return target;
}

size_t AdvisorOptionsProto_CheckerOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> options = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvisorOptionsProto_CheckerOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvisorOptionsProto_CheckerOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvisorOptionsProto_CheckerOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
    MergeFrom(*source);
  }
}

void AdvisorOptionsProto_CheckerOption::MergeFrom(const AdvisorOptionsProto_CheckerOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
}

void AdvisorOptionsProto_CheckerOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvisorOptionsProto_CheckerOption::CopyFrom(const AdvisorOptionsProto_CheckerOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto.CheckerOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvisorOptionsProto_CheckerOption::IsInitialized() const {
  return true;
}

void AdvisorOptionsProto_CheckerOption::InternalSwap(AdvisorOptionsProto_CheckerOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  options_.Swap(&other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvisorOptionsProto_CheckerOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvisorOptionsProto::InitAsDefaultInstance() {
}
class AdvisorOptionsProto::_Internal {
 public:
};

AdvisorOptionsProto::AdvisorOptionsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.AdvisorOptionsProto)
}
AdvisorOptionsProto::AdvisorOptionsProto(const AdvisorOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checkers_.MergeFrom(from.checkers_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.AdvisorOptionsProto)
}

void AdvisorOptionsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
}

AdvisorOptionsProto::~AdvisorOptionsProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.AdvisorOptionsProto)
  SharedDtor();
}

void AdvisorOptionsProto::SharedDtor() {
}

void AdvisorOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvisorOptionsProto& AdvisorOptionsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvisorOptionsProto_tensorflow_2fcore_2fprofiler_2ftfprof_5foptions_2eproto.base);
  return *internal_default_instance();
}


void AdvisorOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.AdvisorOptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkers_.Clear();
  _internal_metadata_.Clear();
}

const char* AdvisorOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&checkers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvisorOptionsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.AdvisorOptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
  if (!this->_internal_checkers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.AdvisorOptionsProto.CheckersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_checkers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_checkers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->_internal_checkers().begin();
          it != this->_internal_checkers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdvisorOptionsProto_CheckersEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
          it = this->_internal_checkers().begin();
          it != this->_internal_checkers().end(); ++it) {
        target = AdvisorOptionsProto_CheckersEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.AdvisorOptionsProto)
  return target;
}

size_t AdvisorOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.AdvisorOptionsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption> checkers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_checkers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >::const_iterator
      it = this->_internal_checkers().begin();
      it != this->_internal_checkers().end(); ++it) {
    total_size += AdvisorOptionsProto_CheckersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvisorOptionsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvisorOptionsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvisorOptionsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.AdvisorOptionsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.AdvisorOptionsProto)
    MergeFrom(*source);
  }
}

void AdvisorOptionsProto::MergeFrom(const AdvisorOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkers_.MergeFrom(from.checkers_);
}

void AdvisorOptionsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvisorOptionsProto::CopyFrom(const AdvisorOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.AdvisorOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvisorOptionsProto::IsInitialized() const {
  return true;
}

void AdvisorOptionsProto::InternalSwap(AdvisorOptionsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkers_.Swap(&other->checkers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvisorOptionsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tfprof
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::OptionsProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::OptionsProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::OptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdvisorOptionsProto_CheckersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdvisorOptionsProto_CheckerOption >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tfprof::AdvisorOptionsProto* Arena::CreateMaybeMessage< ::tensorflow::tfprof::AdvisorOptionsProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::tfprof::AdvisorOptionsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
