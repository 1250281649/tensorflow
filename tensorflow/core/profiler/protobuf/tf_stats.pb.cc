// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/tf_stats.proto

#include "tensorflow/core/profiler/protobuf/tf_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class TfStatsDatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfStatsDatabase> _instance;
} _TfStatsDatabase_default_instance_;
class TfStatsTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfStatsTable> _instance;
} _TfStatsTable_default_instance_;
class TfStatsRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfStatsRecord> _instance;
} _TfStatsRecord_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
static void InitDefaultsscc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsDatabase_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsDatabase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsDatabase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto}, {
      &scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsRecord_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_TfStatsTable_default_instance_;
    new (ptr) ::tensorflow::profiler::TfStatsTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::TfStatsTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto}, {
      &scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, with_idle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsDatabase, without_idle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, tf_stats_record_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, host_tf_pprof_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsTable, device_tf_pprof_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, rank_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_or_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, op_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, occurrences_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, total_time_in_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, avg_time_in_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, total_self_time_in_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, avg_self_time_in_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, device_total_self_time_as_fraction_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, device_cumulative_total_self_time_as_fraction_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_total_self_time_as_fraction_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, host_cumulative_total_self_time_as_fraction_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, measured_flop_rate_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, measured_memory_bw_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, operational_intensity_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::TfStatsRecord, bound_by_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::TfStatsDatabase)},
  { 7, -1, sizeof(::tensorflow::profiler::TfStatsTable)},
  { 15, -1, sizeof(::tensorflow::profiler::TfStatsRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_TfStatsDatabase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_TfStatsTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_TfStatsRecord_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow/core/profiler/protobuf/tf_s"
  "tats.proto\022\023tensorflow.profiler\"\222\001\n\017TfSt"
  "atsDatabase\0224\n\twith_idle\030\004 \001(\0132!.tensorf"
  "low.profiler.TfStatsTable\0227\n\014without_idl"
  "e\030\005 \001(\0132!.tensorflow.profiler.TfStatsTab"
  "leJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004\"\203\001\n\014TfStatsTable\022;\n"
  "\017tf_stats_record\030\001 \003(\0132\".tensorflow.prof"
  "iler.TfStatsRecord\022\031\n\021host_tf_pprof_key\030"
  "\002 \001(\t\022\033\n\023device_tf_pprof_key\030\003 \001(\t\"\205\004\n\rT"
  "fStatsRecord\022\014\n\004rank\030\001 \001(\004\022\026\n\016host_or_de"
  "vice\030\002 \001(\t\022\017\n\007op_type\030\003 \001(\t\022\017\n\007op_name\030\004"
  " \001(\t\022\023\n\013occurrences\030\005 \001(\003\022\030\n\020total_time_"
  "in_us\030\006 \001(\001\022\026\n\016avg_time_in_us\030\007 \001(\001\022\035\n\025t"
  "otal_self_time_in_us\030\010 \001(\001\022\033\n\023avg_self_t"
  "ime_in_us\030\t \001(\001\022*\n\"device_total_self_tim"
  "e_as_fraction\030\n \001(\001\0225\n-device_cumulative"
  "_total_self_time_as_fraction\030\013 \001(\001\022(\n ho"
  "st_total_self_time_as_fraction\030\014 \001(\001\0223\n+"
  "host_cumulative_total_self_time_as_fract"
  "ion\030\r \001(\001\022\032\n\022measured_flop_rate\030\016 \001(\001\022\032\n"
  "\022measured_memory_bw\030\017 \001(\001\022\035\n\025operational"
  "_intensity\030\020 \001(\001\022\020\n\010bound_by\030\021 \001(\tb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_sccs[3] = {
  &scc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base,
  &scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base,
  &scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto, "tensorflow/core/profiler/protobuf/tf_stats.proto", 882,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto, 3, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto), true);
namespace tensorflow {
namespace profiler {

// ===================================================================

void TfStatsDatabase::InitAsDefaultInstance() {
  ::tensorflow::profiler::_TfStatsDatabase_default_instance_._instance.get_mutable()->with_idle_ = const_cast< ::tensorflow::profiler::TfStatsTable*>(
      ::tensorflow::profiler::TfStatsTable::internal_default_instance());
  ::tensorflow::profiler::_TfStatsDatabase_default_instance_._instance.get_mutable()->without_idle_ = const_cast< ::tensorflow::profiler::TfStatsTable*>(
      ::tensorflow::profiler::TfStatsTable::internal_default_instance());
}
class TfStatsDatabase::_Internal {
 public:
  static const ::tensorflow::profiler::TfStatsTable& with_idle(const TfStatsDatabase* msg);
  static const ::tensorflow::profiler::TfStatsTable& without_idle(const TfStatsDatabase* msg);
};

const ::tensorflow::profiler::TfStatsTable&
TfStatsDatabase::_Internal::with_idle(const TfStatsDatabase* msg) {
  return *msg->with_idle_;
}
const ::tensorflow::profiler::TfStatsTable&
TfStatsDatabase::_Internal::without_idle(const TfStatsDatabase* msg) {
  return *msg->without_idle_;
}
TfStatsDatabase::TfStatsDatabase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsDatabase)
}
TfStatsDatabase::TfStatsDatabase(const TfStatsDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_with_idle()) {
    with_idle_ = new ::tensorflow::profiler::TfStatsTable(*from.with_idle_);
  } else {
    with_idle_ = nullptr;
  }
  if (from._internal_has_without_idle()) {
    without_idle_ = new ::tensorflow::profiler::TfStatsTable(*from.without_idle_);
  } else {
    without_idle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsDatabase)
}

void TfStatsDatabase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  ::memset(&with_idle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&without_idle_) -
      reinterpret_cast<char*>(&with_idle_)) + sizeof(without_idle_));
}

TfStatsDatabase::~TfStatsDatabase() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsDatabase)
  SharedDtor();
}

void TfStatsDatabase::SharedDtor() {
  if (this != internal_default_instance()) delete with_idle_;
  if (this != internal_default_instance()) delete without_idle_;
}

void TfStatsDatabase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfStatsDatabase& TfStatsDatabase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfStatsDatabase_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  return *internal_default_instance();
}


void TfStatsDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && with_idle_ != nullptr) {
    delete with_idle_;
  }
  with_idle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && without_idle_ != nullptr) {
    delete without_idle_;
  }
  without_idle_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TfStatsDatabase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.profiler.TfStatsTable with_idle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_with_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.TfStatsTable without_idle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_without_idle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TfStatsDatabase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  if (this->has_with_idle()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::with_idle(this), target, stream);
  }

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  if (this->has_without_idle()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::without_idle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsDatabase)
  return target;
}

size_t TfStatsDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsDatabase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.profiler.TfStatsTable with_idle = 4;
  if (this->has_with_idle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *with_idle_);
  }

  // .tensorflow.profiler.TfStatsTable without_idle = 5;
  if (this->has_without_idle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *without_idle_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsDatabase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsDatabase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfStatsDatabase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsDatabase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsDatabase)
    MergeFrom(*source);
  }
}

void TfStatsDatabase::MergeFrom(const TfStatsDatabase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_with_idle()) {
    _internal_mutable_with_idle()->::tensorflow::profiler::TfStatsTable::MergeFrom(from._internal_with_idle());
  }
  if (from.has_without_idle()) {
    _internal_mutable_without_idle()->::tensorflow::profiler::TfStatsTable::MergeFrom(from._internal_without_idle());
  }
}

void TfStatsDatabase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsDatabase::CopyFrom(const TfStatsDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsDatabase::IsInitialized() const {
  return true;
}

void TfStatsDatabase::InternalSwap(TfStatsDatabase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(with_idle_, other->with_idle_);
  swap(without_idle_, other->without_idle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfStatsDatabase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfStatsTable::InitAsDefaultInstance() {
}
class TfStatsTable::_Internal {
 public:
};

TfStatsTable::TfStatsTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsTable)
}
TfStatsTable::TfStatsTable(const TfStatsTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tf_stats_record_(from.tf_stats_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_tf_pprof_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_tf_pprof_key().empty()) {
    host_tf_pprof_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_tf_pprof_key_);
  }
  device_tf_pprof_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_tf_pprof_key().empty()) {
    device_tf_pprof_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_tf_pprof_key_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsTable)
}

void TfStatsTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  host_tf_pprof_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TfStatsTable::~TfStatsTable() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsTable)
  SharedDtor();
}

void TfStatsTable::SharedDtor() {
  host_tf_pprof_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TfStatsTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfStatsTable& TfStatsTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfStatsTable_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  return *internal_default_instance();
}


void TfStatsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tf_stats_record_.Clear();
  host_tf_pprof_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_tf_pprof_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TfStatsTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tf_stats_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string host_tf_pprof_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host_tf_pprof_key(), ptr, ctx, "tensorflow.profiler.TfStatsTable.host_tf_pprof_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_tf_pprof_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_device_tf_pprof_key(), ptr, ctx, "tensorflow.profiler.TfStatsTable.device_tf_pprof_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TfStatsTable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tf_stats_record_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tf_stats_record(i), target, stream);
  }

  // string host_tf_pprof_key = 2;
  if (this->host_tf_pprof_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_tf_pprof_key().data(), static_cast<int>(this->_internal_host_tf_pprof_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.host_tf_pprof_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_tf_pprof_key(), target);
  }

  // string device_tf_pprof_key = 3;
  if (this->device_tf_pprof_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_tf_pprof_key().data(), static_cast<int>(this->_internal_device_tf_pprof_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsTable.device_tf_pprof_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_tf_pprof_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsTable)
  return target;
}

size_t TfStatsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.TfStatsRecord tf_stats_record = 1;
  total_size += 1UL * this->_internal_tf_stats_record_size();
  for (const auto& msg : this->tf_stats_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string host_tf_pprof_key = 2;
  if (this->host_tf_pprof_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_tf_pprof_key());
  }

  // string device_tf_pprof_key = 3;
  if (this->device_tf_pprof_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_tf_pprof_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfStatsTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsTable)
    MergeFrom(*source);
  }
}

void TfStatsTable::MergeFrom(const TfStatsTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tf_stats_record_.MergeFrom(from.tf_stats_record_);
  if (from.host_tf_pprof_key().size() > 0) {

    host_tf_pprof_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_tf_pprof_key_);
  }
  if (from.device_tf_pprof_key().size() > 0) {

    device_tf_pprof_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_tf_pprof_key_);
  }
}

void TfStatsTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsTable::CopyFrom(const TfStatsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsTable::IsInitialized() const {
  return true;
}

void TfStatsTable::InternalSwap(TfStatsTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tf_stats_record_.InternalSwap(&other->tf_stats_record_);
  host_tf_pprof_key_.Swap(&other->host_tf_pprof_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_tf_pprof_key_.Swap(&other->device_tf_pprof_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TfStatsTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfStatsRecord::InitAsDefaultInstance() {
}
class TfStatsRecord::_Internal {
 public:
};

TfStatsRecord::TfStatsRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.TfStatsRecord)
}
TfStatsRecord::TfStatsRecord(const TfStatsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_or_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_or_device().empty()) {
    host_or_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_or_device_);
  }
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_type().empty()) {
    op_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  bound_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bound_by().empty()) {
    bound_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bound_by_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&operational_intensity_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(operational_intensity_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.TfStatsRecord)
}

void TfStatsRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  host_or_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bound_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operational_intensity_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(operational_intensity_));
}

TfStatsRecord::~TfStatsRecord() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.TfStatsRecord)
  SharedDtor();
}

void TfStatsRecord::SharedDtor() {
  host_or_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bound_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TfStatsRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfStatsRecord& TfStatsRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfStatsRecord_tensorflow_2fcore_2fprofiler_2fprotobuf_2ftf_5fstats_2eproto.base);
  return *internal_default_instance();
}


void TfStatsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.TfStatsRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_or_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bound_by_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operational_intensity_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(operational_intensity_));
  _internal_metadata_.Clear();
}

const char* TfStatsRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_or_device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host_or_device(), ptr, ctx, "tensorflow.profiler.TfStatsRecord.host_or_device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op_type(), ptr, ctx, "tensorflow.profiler.TfStatsRecord.op_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op_name(), ptr, ctx, "tensorflow.profiler.TfStatsRecord.op_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 occurrences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double total_time_in_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          total_time_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double avg_time_in_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          avg_time_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_self_time_in_us = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          total_self_time_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double avg_self_time_in_us = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          avg_self_time_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double device_total_self_time_as_fraction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          device_total_self_time_as_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double device_cumulative_total_self_time_as_fraction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          device_cumulative_total_self_time_as_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double host_total_self_time_as_fraction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          host_total_self_time_as_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double host_cumulative_total_self_time_as_fraction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          host_cumulative_total_self_time_as_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double measured_flop_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          measured_flop_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double measured_memory_bw = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          measured_memory_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double operational_intensity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          operational_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string bound_by = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_bound_by(), ptr, ctx, "tensorflow.profiler.TfStatsRecord.bound_by");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TfStatsRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.TfStatsRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rank = 1;
  if (this->rank() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rank(), target);
  }

  // string host_or_device = 2;
  if (this->host_or_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_or_device().data(), static_cast<int>(this->_internal_host_or_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.host_or_device");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_or_device(), target);
  }

  // string op_type = 3;
  if (this->op_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_op_type(), target);
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.op_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_op_name(), target);
  }

  // int64 occurrences = 5;
  if (this->occurrences() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_occurrences(), target);
  }

  // double total_time_in_us = 6;
  if (!(this->total_time_in_us() <= 0 && this->total_time_in_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_total_time_in_us(), target);
  }

  // double avg_time_in_us = 7;
  if (!(this->avg_time_in_us() <= 0 && this->avg_time_in_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_avg_time_in_us(), target);
  }

  // double total_self_time_in_us = 8;
  if (!(this->total_self_time_in_us() <= 0 && this->total_self_time_in_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_total_self_time_in_us(), target);
  }

  // double avg_self_time_in_us = 9;
  if (!(this->avg_self_time_in_us() <= 0 && this->avg_self_time_in_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_avg_self_time_in_us(), target);
  }

  // double device_total_self_time_as_fraction = 10;
  if (!(this->device_total_self_time_as_fraction() <= 0 && this->device_total_self_time_as_fraction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_device_total_self_time_as_fraction(), target);
  }

  // double device_cumulative_total_self_time_as_fraction = 11;
  if (!(this->device_cumulative_total_self_time_as_fraction() <= 0 && this->device_cumulative_total_self_time_as_fraction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_device_cumulative_total_self_time_as_fraction(), target);
  }

  // double host_total_self_time_as_fraction = 12;
  if (!(this->host_total_self_time_as_fraction() <= 0 && this->host_total_self_time_as_fraction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_host_total_self_time_as_fraction(), target);
  }

  // double host_cumulative_total_self_time_as_fraction = 13;
  if (!(this->host_cumulative_total_self_time_as_fraction() <= 0 && this->host_cumulative_total_self_time_as_fraction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_host_cumulative_total_self_time_as_fraction(), target);
  }

  // double measured_flop_rate = 14;
  if (!(this->measured_flop_rate() <= 0 && this->measured_flop_rate() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_measured_flop_rate(), target);
  }

  // double measured_memory_bw = 15;
  if (!(this->measured_memory_bw() <= 0 && this->measured_memory_bw() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_measured_memory_bw(), target);
  }

  // double operational_intensity = 16;
  if (!(this->operational_intensity() <= 0 && this->operational_intensity() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_operational_intensity(), target);
  }

  // string bound_by = 17;
  if (this->bound_by().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bound_by().data(), static_cast<int>(this->_internal_bound_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.TfStatsRecord.bound_by");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_bound_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.TfStatsRecord)
  return target;
}

size_t TfStatsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.TfStatsRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_or_device = 2;
  if (this->host_or_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_or_device());
  }

  // string op_type = 3;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string op_name = 4;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string bound_by = 17;
  if (this->bound_by().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bound_by());
  }

  // uint64 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rank());
  }

  // int64 occurrences = 5;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_occurrences());
  }

  // double total_time_in_us = 6;
  if (!(this->total_time_in_us() <= 0 && this->total_time_in_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double avg_time_in_us = 7;
  if (!(this->avg_time_in_us() <= 0 && this->avg_time_in_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_self_time_in_us = 8;
  if (!(this->total_self_time_in_us() <= 0 && this->total_self_time_in_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double avg_self_time_in_us = 9;
  if (!(this->avg_self_time_in_us() <= 0 && this->avg_self_time_in_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double device_total_self_time_as_fraction = 10;
  if (!(this->device_total_self_time_as_fraction() <= 0 && this->device_total_self_time_as_fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double device_cumulative_total_self_time_as_fraction = 11;
  if (!(this->device_cumulative_total_self_time_as_fraction() <= 0 && this->device_cumulative_total_self_time_as_fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double host_total_self_time_as_fraction = 12;
  if (!(this->host_total_self_time_as_fraction() <= 0 && this->host_total_self_time_as_fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double host_cumulative_total_self_time_as_fraction = 13;
  if (!(this->host_cumulative_total_self_time_as_fraction() <= 0 && this->host_cumulative_total_self_time_as_fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double measured_flop_rate = 14;
  if (!(this->measured_flop_rate() <= 0 && this->measured_flop_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double measured_memory_bw = 15;
  if (!(this->measured_memory_bw() <= 0 && this->measured_memory_bw() >= 0)) {
    total_size += 1 + 8;
  }

  // double operational_intensity = 16;
  if (!(this->operational_intensity() <= 0 && this->operational_intensity() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfStatsRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.TfStatsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TfStatsRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfStatsRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.TfStatsRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.TfStatsRecord)
    MergeFrom(*source);
  }
}

void TfStatsRecord::MergeFrom(const TfStatsRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.TfStatsRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_or_device().size() > 0) {

    host_or_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_or_device_);
  }
  if (from.op_type().size() > 0) {

    op_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  if (from.op_name().size() > 0) {

    op_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  if (from.bound_by().size() > 0) {

    bound_by_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bound_by_);
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.occurrences() != 0) {
    _internal_set_occurrences(from._internal_occurrences());
  }
  if (!(from.total_time_in_us() <= 0 && from.total_time_in_us() >= 0)) {
    _internal_set_total_time_in_us(from._internal_total_time_in_us());
  }
  if (!(from.avg_time_in_us() <= 0 && from.avg_time_in_us() >= 0)) {
    _internal_set_avg_time_in_us(from._internal_avg_time_in_us());
  }
  if (!(from.total_self_time_in_us() <= 0 && from.total_self_time_in_us() >= 0)) {
    _internal_set_total_self_time_in_us(from._internal_total_self_time_in_us());
  }
  if (!(from.avg_self_time_in_us() <= 0 && from.avg_self_time_in_us() >= 0)) {
    _internal_set_avg_self_time_in_us(from._internal_avg_self_time_in_us());
  }
  if (!(from.device_total_self_time_as_fraction() <= 0 && from.device_total_self_time_as_fraction() >= 0)) {
    _internal_set_device_total_self_time_as_fraction(from._internal_device_total_self_time_as_fraction());
  }
  if (!(from.device_cumulative_total_self_time_as_fraction() <= 0 && from.device_cumulative_total_self_time_as_fraction() >= 0)) {
    _internal_set_device_cumulative_total_self_time_as_fraction(from._internal_device_cumulative_total_self_time_as_fraction());
  }
  if (!(from.host_total_self_time_as_fraction() <= 0 && from.host_total_self_time_as_fraction() >= 0)) {
    _internal_set_host_total_self_time_as_fraction(from._internal_host_total_self_time_as_fraction());
  }
  if (!(from.host_cumulative_total_self_time_as_fraction() <= 0 && from.host_cumulative_total_self_time_as_fraction() >= 0)) {
    _internal_set_host_cumulative_total_self_time_as_fraction(from._internal_host_cumulative_total_self_time_as_fraction());
  }
  if (!(from.measured_flop_rate() <= 0 && from.measured_flop_rate() >= 0)) {
    _internal_set_measured_flop_rate(from._internal_measured_flop_rate());
  }
  if (!(from.measured_memory_bw() <= 0 && from.measured_memory_bw() >= 0)) {
    _internal_set_measured_memory_bw(from._internal_measured_memory_bw());
  }
  if (!(from.operational_intensity() <= 0 && from.operational_intensity() >= 0)) {
    _internal_set_operational_intensity(from._internal_operational_intensity());
  }
}

void TfStatsRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.TfStatsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfStatsRecord::CopyFrom(const TfStatsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.TfStatsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfStatsRecord::IsInitialized() const {
  return true;
}

void TfStatsRecord::InternalSwap(TfStatsRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_or_device_.Swap(&other->host_or_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_type_.Swap(&other->op_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bound_by_.Swap(&other->bound_by_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
  swap(occurrences_, other->occurrences_);
  swap(total_time_in_us_, other->total_time_in_us_);
  swap(avg_time_in_us_, other->avg_time_in_us_);
  swap(total_self_time_in_us_, other->total_self_time_in_us_);
  swap(avg_self_time_in_us_, other->avg_self_time_in_us_);
  swap(device_total_self_time_as_fraction_, other->device_total_self_time_as_fraction_);
  swap(device_cumulative_total_self_time_as_fraction_, other->device_cumulative_total_self_time_as_fraction_);
  swap(host_total_self_time_as_fraction_, other->host_total_self_time_as_fraction_);
  swap(host_cumulative_total_self_time_as_fraction_, other->host_cumulative_total_self_time_as_fraction_);
  swap(measured_flop_rate_, other->measured_flop_rate_);
  swap(measured_memory_bw_, other->measured_memory_bw_);
  swap(operational_intensity_, other->operational_intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfStatsRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::TfStatsDatabase* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsDatabase >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsDatabase >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::TfStatsTable* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsTable >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsTable >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::TfStatsRecord* Arena::CreateMaybeMessage< ::tensorflow::profiler::TfStatsRecord >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::TfStatsRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
