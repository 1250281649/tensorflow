// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/op_stats.proto

#include "tensorflow/core/profiler/protobuf/op_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fsteps_5fdb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StepDatabaseResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2fsteps_5fdb_2eproto;
namespace tensorflow {
namespace profiler {
class PerfEnvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEnv> _instance;
} _PerfEnv_default_instance_;
class OpStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpStats> _instance;
} _OpStats_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
static void InitDefaultsscc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_OpStats_default_instance_;
    new (ptr) ::tensorflow::profiler::OpStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::OpStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto}, {
      &scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,
      &scc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base,
      &scc_info_StepDatabaseResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2fsteps_5fdb_2eproto.base,}};

static void InitDefaultsscc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_PerfEnv_default_instance_;
    new (ptr) ::tensorflow::profiler::PerfEnv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::PerfEnv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerfEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerfEnv, peak_tera_flops_per_second_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerfEnv, peak_hbm_bw_giga_bytes_per_second_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerfEnv, ridge_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpStats, host_op_metrics_db_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpStats, device_op_metrics_db_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpStats, perf_env_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpStats, step_db_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::PerfEnv)},
  { 8, -1, sizeof(::tensorflow::profiler::OpStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_PerfEnv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_OpStats_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow/core/profiler/protobuf/op_s"
  "tats.proto\022\023tensorflow.profiler\0322tensorf"
  "low/core/profiler/protobuf/op_metrics.pr"
  "oto\0320tensorflow/core/profiler/protobuf/s"
  "teps_db.proto\"m\n\007PerfEnv\022\"\n\032peak_tera_fl"
  "ops_per_second\030\001 \001(\001\022)\n!peak_hbm_bw_giga"
  "_bytes_per_second\030\002 \001(\001\022\023\n\013ridge_point\030\003"
  " \001(\001\"\361\001\n\007OpStats\022<\n\022host_op_metrics_db\030\001"
  " \001(\0132 .tensorflow.profiler.OpMetricsDb\022>"
  "\n\024device_op_metrics_db\030\002 \001(\0132 .tensorflo"
  "w.profiler.OpMetricsDb\022.\n\010perf_env\030\003 \001(\013"
  "2\034.tensorflow.profiler.PerfEnv\0228\n\007step_d"
  "b\030\004 \001(\0132\'.tensorflow.profiler.StepDataba"
  "seResultb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fsteps_5fdb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_sccs[2] = {
  &scc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base,
  &scc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto, "tensorflow/core/profiler/protobuf/op_stats.proto", 536,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto, 2, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto), true);
namespace tensorflow {
namespace profiler {

// ===================================================================

void PerfEnv::InitAsDefaultInstance() {
}
class PerfEnv::_Internal {
 public:
};

PerfEnv::PerfEnv()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.PerfEnv)
}
PerfEnv::PerfEnv(const PerfEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&peak_tera_flops_per_second_, &from.peak_tera_flops_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&ridge_point_) -
    reinterpret_cast<char*>(&peak_tera_flops_per_second_)) + sizeof(ridge_point_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.PerfEnv)
}

void PerfEnv::SharedCtor() {
  ::memset(&peak_tera_flops_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ridge_point_) -
      reinterpret_cast<char*>(&peak_tera_flops_per_second_)) + sizeof(ridge_point_));
}

PerfEnv::~PerfEnv() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.PerfEnv)
  SharedDtor();
}

void PerfEnv::SharedDtor() {
}

void PerfEnv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEnv& PerfEnv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEnv_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base);
  return *internal_default_instance();
}


void PerfEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.PerfEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&peak_tera_flops_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ridge_point_) -
      reinterpret_cast<char*>(&peak_tera_flops_per_second_)) + sizeof(ridge_point_));
  _internal_metadata_.Clear();
}

const char* PerfEnv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double peak_tera_flops_per_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          peak_tera_flops_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double peak_hbm_bw_giga_bytes_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          peak_hbm_bw_giga_bytes_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ridge_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ridge_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfEnv::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.PerfEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double peak_tera_flops_per_second = 1;
  if (!(this->peak_tera_flops_per_second() <= 0 && this->peak_tera_flops_per_second() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_peak_tera_flops_per_second(), target);
  }

  // double peak_hbm_bw_giga_bytes_per_second = 2;
  if (!(this->peak_hbm_bw_giga_bytes_per_second() <= 0 && this->peak_hbm_bw_giga_bytes_per_second() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_peak_hbm_bw_giga_bytes_per_second(), target);
  }

  // double ridge_point = 3;
  if (!(this->ridge_point() <= 0 && this->ridge_point() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ridge_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.PerfEnv)
  return target;
}

size_t PerfEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.PerfEnv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double peak_tera_flops_per_second = 1;
  if (!(this->peak_tera_flops_per_second() <= 0 && this->peak_tera_flops_per_second() >= 0)) {
    total_size += 1 + 8;
  }

  // double peak_hbm_bw_giga_bytes_per_second = 2;
  if (!(this->peak_hbm_bw_giga_bytes_per_second() <= 0 && this->peak_hbm_bw_giga_bytes_per_second() >= 0)) {
    total_size += 1 + 8;
  }

  // double ridge_point = 3;
  if (!(this->ridge_point() <= 0 && this->ridge_point() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEnv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.PerfEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfEnv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerfEnv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.PerfEnv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.PerfEnv)
    MergeFrom(*source);
  }
}

void PerfEnv::MergeFrom(const PerfEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.PerfEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.peak_tera_flops_per_second() <= 0 && from.peak_tera_flops_per_second() >= 0)) {
    _internal_set_peak_tera_flops_per_second(from._internal_peak_tera_flops_per_second());
  }
  if (!(from.peak_hbm_bw_giga_bytes_per_second() <= 0 && from.peak_hbm_bw_giga_bytes_per_second() >= 0)) {
    _internal_set_peak_hbm_bw_giga_bytes_per_second(from._internal_peak_hbm_bw_giga_bytes_per_second());
  }
  if (!(from.ridge_point() <= 0 && from.ridge_point() >= 0)) {
    _internal_set_ridge_point(from._internal_ridge_point());
  }
}

void PerfEnv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.PerfEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfEnv::CopyFrom(const PerfEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.PerfEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEnv::IsInitialized() const {
  return true;
}

void PerfEnv::InternalSwap(PerfEnv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peak_tera_flops_per_second_, other->peak_tera_flops_per_second_);
  swap(peak_hbm_bw_giga_bytes_per_second_, other->peak_hbm_bw_giga_bytes_per_second_);
  swap(ridge_point_, other->ridge_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfEnv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpStats::InitAsDefaultInstance() {
  ::tensorflow::profiler::_OpStats_default_instance_._instance.get_mutable()->host_op_metrics_db_ = const_cast< ::tensorflow::profiler::OpMetricsDb*>(
      ::tensorflow::profiler::OpMetricsDb::internal_default_instance());
  ::tensorflow::profiler::_OpStats_default_instance_._instance.get_mutable()->device_op_metrics_db_ = const_cast< ::tensorflow::profiler::OpMetricsDb*>(
      ::tensorflow::profiler::OpMetricsDb::internal_default_instance());
  ::tensorflow::profiler::_OpStats_default_instance_._instance.get_mutable()->perf_env_ = const_cast< ::tensorflow::profiler::PerfEnv*>(
      ::tensorflow::profiler::PerfEnv::internal_default_instance());
  ::tensorflow::profiler::_OpStats_default_instance_._instance.get_mutable()->step_db_ = const_cast< ::tensorflow::profiler::StepDatabaseResult*>(
      ::tensorflow::profiler::StepDatabaseResult::internal_default_instance());
}
class OpStats::_Internal {
 public:
  static const ::tensorflow::profiler::OpMetricsDb& host_op_metrics_db(const OpStats* msg);
  static const ::tensorflow::profiler::OpMetricsDb& device_op_metrics_db(const OpStats* msg);
  static const ::tensorflow::profiler::PerfEnv& perf_env(const OpStats* msg);
  static const ::tensorflow::profiler::StepDatabaseResult& step_db(const OpStats* msg);
};

const ::tensorflow::profiler::OpMetricsDb&
OpStats::_Internal::host_op_metrics_db(const OpStats* msg) {
  return *msg->host_op_metrics_db_;
}
const ::tensorflow::profiler::OpMetricsDb&
OpStats::_Internal::device_op_metrics_db(const OpStats* msg) {
  return *msg->device_op_metrics_db_;
}
const ::tensorflow::profiler::PerfEnv&
OpStats::_Internal::perf_env(const OpStats* msg) {
  return *msg->perf_env_;
}
const ::tensorflow::profiler::StepDatabaseResult&
OpStats::_Internal::step_db(const OpStats* msg) {
  return *msg->step_db_;
}
void OpStats::clear_host_op_metrics_db() {
  if (GetArenaNoVirtual() == nullptr && host_op_metrics_db_ != nullptr) {
    delete host_op_metrics_db_;
  }
  host_op_metrics_db_ = nullptr;
}
void OpStats::clear_device_op_metrics_db() {
  if (GetArenaNoVirtual() == nullptr && device_op_metrics_db_ != nullptr) {
    delete device_op_metrics_db_;
  }
  device_op_metrics_db_ = nullptr;
}
void OpStats::clear_step_db() {
  if (GetArenaNoVirtual() == nullptr && step_db_ != nullptr) {
    delete step_db_;
  }
  step_db_ = nullptr;
}
OpStats::OpStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.OpStats)
}
OpStats::OpStats(const OpStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_host_op_metrics_db()) {
    host_op_metrics_db_ = new ::tensorflow::profiler::OpMetricsDb(*from.host_op_metrics_db_);
  } else {
    host_op_metrics_db_ = nullptr;
  }
  if (from._internal_has_device_op_metrics_db()) {
    device_op_metrics_db_ = new ::tensorflow::profiler::OpMetricsDb(*from.device_op_metrics_db_);
  } else {
    device_op_metrics_db_ = nullptr;
  }
  if (from._internal_has_perf_env()) {
    perf_env_ = new ::tensorflow::profiler::PerfEnv(*from.perf_env_);
  } else {
    perf_env_ = nullptr;
  }
  if (from._internal_has_step_db()) {
    step_db_ = new ::tensorflow::profiler::StepDatabaseResult(*from.step_db_);
  } else {
    step_db_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.OpStats)
}

void OpStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base);
  ::memset(&host_op_metrics_db_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_db_) -
      reinterpret_cast<char*>(&host_op_metrics_db_)) + sizeof(step_db_));
}

OpStats::~OpStats() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.OpStats)
  SharedDtor();
}

void OpStats::SharedDtor() {
  if (this != internal_default_instance()) delete host_op_metrics_db_;
  if (this != internal_default_instance()) delete device_op_metrics_db_;
  if (this != internal_default_instance()) delete perf_env_;
  if (this != internal_default_instance()) delete step_db_;
}

void OpStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpStats& OpStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpStats_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.base);
  return *internal_default_instance();
}


void OpStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.OpStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && host_op_metrics_db_ != nullptr) {
    delete host_op_metrics_db_;
  }
  host_op_metrics_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && device_op_metrics_db_ != nullptr) {
    delete device_op_metrics_db_;
  }
  device_op_metrics_db_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && perf_env_ != nullptr) {
    delete perf_env_;
  }
  perf_env_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && step_db_ != nullptr) {
    delete step_db_;
  }
  step_db_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OpStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_op_metrics_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_op_metrics_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.PerfEnv perf_env = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepDatabaseResult step_db = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.OpStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
  if (this->has_host_op_metrics_db()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::host_op_metrics_db(this), target, stream);
  }

  // .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
  if (this->has_device_op_metrics_db()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::device_op_metrics_db(this), target, stream);
  }

  // .tensorflow.profiler.PerfEnv perf_env = 3;
  if (this->has_perf_env()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::perf_env(this), target, stream);
  }

  // .tensorflow.profiler.StepDatabaseResult step_db = 4;
  if (this->has_step_db()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::step_db(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.OpStats)
  return target;
}

size_t OpStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.OpStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
  if (this->has_host_op_metrics_db()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_op_metrics_db_);
  }

  // .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
  if (this->has_device_op_metrics_db()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_op_metrics_db_);
  }

  // .tensorflow.profiler.PerfEnv perf_env = 3;
  if (this->has_perf_env()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perf_env_);
  }

  // .tensorflow.profiler.StepDatabaseResult step_db = 4;
  if (this->has_step_db()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *step_db_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.OpStats)
  GOOGLE_DCHECK_NE(&from, this);
  const OpStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.OpStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.OpStats)
    MergeFrom(*source);
  }
}

void OpStats::MergeFrom(const OpStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.OpStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_host_op_metrics_db()) {
    _internal_mutable_host_op_metrics_db()->::tensorflow::profiler::OpMetricsDb::MergeFrom(from._internal_host_op_metrics_db());
  }
  if (from.has_device_op_metrics_db()) {
    _internal_mutable_device_op_metrics_db()->::tensorflow::profiler::OpMetricsDb::MergeFrom(from._internal_device_op_metrics_db());
  }
  if (from.has_perf_env()) {
    _internal_mutable_perf_env()->::tensorflow::profiler::PerfEnv::MergeFrom(from._internal_perf_env());
  }
  if (from.has_step_db()) {
    _internal_mutable_step_db()->::tensorflow::profiler::StepDatabaseResult::MergeFrom(from._internal_step_db());
  }
}

void OpStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.OpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpStats::CopyFrom(const OpStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.OpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpStats::IsInitialized() const {
  return true;
}

void OpStats::InternalSwap(OpStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(host_op_metrics_db_, other->host_op_metrics_db_);
  swap(device_op_metrics_db_, other->device_op_metrics_db_);
  swap(perf_env_, other->perf_env_);
  swap(step_db_, other->step_db_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::PerfEnv* Arena::CreateMaybeMessage< ::tensorflow::profiler::PerfEnv >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::PerfEnv >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::OpStats* Arena::CreateMaybeMessage< ::tensorflow::profiler::OpStats >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::OpStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
