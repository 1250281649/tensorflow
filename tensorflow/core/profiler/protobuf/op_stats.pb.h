// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/op_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/profiler/protobuf/op_metrics.pb.h"
#include "tensorflow/core/profiler/protobuf/steps_db.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
namespace tensorflow {
namespace profiler {
class OpStats;
class OpStatsDefaultTypeInternal;
extern OpStatsDefaultTypeInternal _OpStats_default_instance_;
class PerfEnv;
class PerfEnvDefaultTypeInternal;
extern PerfEnvDefaultTypeInternal _PerfEnv_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::profiler::OpStats* Arena::CreateMaybeMessage<::tensorflow::profiler::OpStats>(Arena*);
template<> ::tensorflow::profiler::PerfEnv* Arena::CreateMaybeMessage<::tensorflow::profiler::PerfEnv>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace profiler {

// ===================================================================

class PerfEnv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.PerfEnv) */ {
 public:
  PerfEnv();
  virtual ~PerfEnv();

  PerfEnv(const PerfEnv& from);
  PerfEnv(PerfEnv&& from) noexcept
    : PerfEnv() {
    *this = ::std::move(from);
  }

  inline PerfEnv& operator=(const PerfEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEnv& operator=(PerfEnv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerfEnv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEnv* internal_default_instance() {
    return reinterpret_cast<const PerfEnv*>(
               &_PerfEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfEnv& a, PerfEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEnv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEnv* New() const final {
    return CreateMaybeMessage<PerfEnv>(nullptr);
  }

  PerfEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEnv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerfEnv& from);
  void MergeFrom(const PerfEnv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfEnv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.PerfEnv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeakTeraFlopsPerSecondFieldNumber = 1,
    kPeakHbmBwGigaBytesPerSecondFieldNumber = 2,
    kRidgePointFieldNumber = 3,
  };
  // double peak_tera_flops_per_second = 1;
  void clear_peak_tera_flops_per_second();
  double peak_tera_flops_per_second() const;
  void set_peak_tera_flops_per_second(double value);
  private:
  double _internal_peak_tera_flops_per_second() const;
  void _internal_set_peak_tera_flops_per_second(double value);
  public:

  // double peak_hbm_bw_giga_bytes_per_second = 2;
  void clear_peak_hbm_bw_giga_bytes_per_second();
  double peak_hbm_bw_giga_bytes_per_second() const;
  void set_peak_hbm_bw_giga_bytes_per_second(double value);
  private:
  double _internal_peak_hbm_bw_giga_bytes_per_second() const;
  void _internal_set_peak_hbm_bw_giga_bytes_per_second(double value);
  public:

  // double ridge_point = 3;
  void clear_ridge_point();
  double ridge_point() const;
  void set_ridge_point(double value);
  private:
  double _internal_ridge_point() const;
  void _internal_set_ridge_point(double value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.PerfEnv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double peak_tera_flops_per_second_;
  double peak_hbm_bw_giga_bytes_per_second_;
  double ridge_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// -------------------------------------------------------------------

class OpStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.profiler.OpStats) */ {
 public:
  OpStats();
  virtual ~OpStats();

  OpStats(const OpStats& from);
  OpStats(OpStats&& from) noexcept
    : OpStats() {
    *this = ::std::move(from);
  }

  inline OpStats& operator=(const OpStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpStats& operator=(OpStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpStats* internal_default_instance() {
    return reinterpret_cast<const OpStats*>(
               &_OpStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpStats& a, OpStats& b) {
    a.Swap(&b);
  }
  inline void Swap(OpStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpStats* New() const final {
    return CreateMaybeMessage<OpStats>(nullptr);
  }

  OpStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpStats& from);
  void MergeFrom(const OpStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.profiler.OpStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostOpMetricsDbFieldNumber = 1,
    kDeviceOpMetricsDbFieldNumber = 2,
    kPerfEnvFieldNumber = 3,
    kStepDbFieldNumber = 4,
  };
  // .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
  bool has_host_op_metrics_db() const;
  private:
  bool _internal_has_host_op_metrics_db() const;
  public:
  void clear_host_op_metrics_db();
  const ::tensorflow::profiler::OpMetricsDb& host_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* release_host_op_metrics_db();
  ::tensorflow::profiler::OpMetricsDb* mutable_host_op_metrics_db();
  void set_allocated_host_op_metrics_db(::tensorflow::profiler::OpMetricsDb* host_op_metrics_db);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_host_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_host_op_metrics_db();
  public:

  // .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
  bool has_device_op_metrics_db() const;
  private:
  bool _internal_has_device_op_metrics_db() const;
  public:
  void clear_device_op_metrics_db();
  const ::tensorflow::profiler::OpMetricsDb& device_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* release_device_op_metrics_db();
  ::tensorflow::profiler::OpMetricsDb* mutable_device_op_metrics_db();
  void set_allocated_device_op_metrics_db(::tensorflow::profiler::OpMetricsDb* device_op_metrics_db);
  private:
  const ::tensorflow::profiler::OpMetricsDb& _internal_device_op_metrics_db() const;
  ::tensorflow::profiler::OpMetricsDb* _internal_mutable_device_op_metrics_db();
  public:

  // .tensorflow.profiler.PerfEnv perf_env = 3;
  bool has_perf_env() const;
  private:
  bool _internal_has_perf_env() const;
  public:
  void clear_perf_env();
  const ::tensorflow::profiler::PerfEnv& perf_env() const;
  ::tensorflow::profiler::PerfEnv* release_perf_env();
  ::tensorflow::profiler::PerfEnv* mutable_perf_env();
  void set_allocated_perf_env(::tensorflow::profiler::PerfEnv* perf_env);
  private:
  const ::tensorflow::profiler::PerfEnv& _internal_perf_env() const;
  ::tensorflow::profiler::PerfEnv* _internal_mutable_perf_env();
  public:

  // .tensorflow.profiler.StepDatabaseResult step_db = 4;
  bool has_step_db() const;
  private:
  bool _internal_has_step_db() const;
  public:
  void clear_step_db();
  const ::tensorflow::profiler::StepDatabaseResult& step_db() const;
  ::tensorflow::profiler::StepDatabaseResult* release_step_db();
  ::tensorflow::profiler::StepDatabaseResult* mutable_step_db();
  void set_allocated_step_db(::tensorflow::profiler::StepDatabaseResult* step_db);
  private:
  const ::tensorflow::profiler::StepDatabaseResult& _internal_step_db() const;
  ::tensorflow::profiler::StepDatabaseResult* _internal_mutable_step_db();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.profiler.OpStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::profiler::OpMetricsDb* host_op_metrics_db_;
  ::tensorflow::profiler::OpMetricsDb* device_op_metrics_db_;
  ::tensorflow::profiler::PerfEnv* perf_env_;
  ::tensorflow::profiler::StepDatabaseResult* step_db_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfEnv

// double peak_tera_flops_per_second = 1;
inline void PerfEnv::clear_peak_tera_flops_per_second() {
  peak_tera_flops_per_second_ = 0;
}
inline double PerfEnv::_internal_peak_tera_flops_per_second() const {
  return peak_tera_flops_per_second_;
}
inline double PerfEnv::peak_tera_flops_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.peak_tera_flops_per_second)
  return _internal_peak_tera_flops_per_second();
}
inline void PerfEnv::_internal_set_peak_tera_flops_per_second(double value) {
  
  peak_tera_flops_per_second_ = value;
}
inline void PerfEnv::set_peak_tera_flops_per_second(double value) {
  _internal_set_peak_tera_flops_per_second(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.peak_tera_flops_per_second)
}

// double peak_hbm_bw_giga_bytes_per_second = 2;
inline void PerfEnv::clear_peak_hbm_bw_giga_bytes_per_second() {
  peak_hbm_bw_giga_bytes_per_second_ = 0;
}
inline double PerfEnv::_internal_peak_hbm_bw_giga_bytes_per_second() const {
  return peak_hbm_bw_giga_bytes_per_second_;
}
inline double PerfEnv::peak_hbm_bw_giga_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.peak_hbm_bw_giga_bytes_per_second)
  return _internal_peak_hbm_bw_giga_bytes_per_second();
}
inline void PerfEnv::_internal_set_peak_hbm_bw_giga_bytes_per_second(double value) {
  
  peak_hbm_bw_giga_bytes_per_second_ = value;
}
inline void PerfEnv::set_peak_hbm_bw_giga_bytes_per_second(double value) {
  _internal_set_peak_hbm_bw_giga_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.peak_hbm_bw_giga_bytes_per_second)
}

// double ridge_point = 3;
inline void PerfEnv::clear_ridge_point() {
  ridge_point_ = 0;
}
inline double PerfEnv::_internal_ridge_point() const {
  return ridge_point_;
}
inline double PerfEnv::ridge_point() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.PerfEnv.ridge_point)
  return _internal_ridge_point();
}
inline void PerfEnv::_internal_set_ridge_point(double value) {
  
  ridge_point_ = value;
}
inline void PerfEnv::set_ridge_point(double value) {
  _internal_set_ridge_point(value);
  // @@protoc_insertion_point(field_set:tensorflow.profiler.PerfEnv.ridge_point)
}

// -------------------------------------------------------------------

// OpStats

// .tensorflow.profiler.OpMetricsDb host_op_metrics_db = 1;
inline bool OpStats::_internal_has_host_op_metrics_db() const {
  return this != internal_default_instance() && host_op_metrics_db_ != nullptr;
}
inline bool OpStats::has_host_op_metrics_db() const {
  return _internal_has_host_op_metrics_db();
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::_internal_host_op_metrics_db() const {
  const ::tensorflow::profiler::OpMetricsDb* p = host_op_metrics_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb*>(
      &::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::host_op_metrics_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.host_op_metrics_db)
  return _internal_host_op_metrics_db();
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::release_host_op_metrics_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.host_op_metrics_db)
  
  ::tensorflow::profiler::OpMetricsDb* temp = host_op_metrics_db_;
  host_op_metrics_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::_internal_mutable_host_op_metrics_db() {
  
  if (host_op_metrics_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaNoVirtual());
    host_op_metrics_db_ = p;
  }
  return host_op_metrics_db_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::mutable_host_op_metrics_db() {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.host_op_metrics_db)
  return _internal_mutable_host_op_metrics_db();
}
inline void OpStats::set_allocated_host_op_metrics_db(::tensorflow::profiler::OpMetricsDb* host_op_metrics_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_op_metrics_db_);
  }
  if (host_op_metrics_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_op_metrics_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_op_metrics_db, submessage_arena);
    }
    
  } else {
    
  }
  host_op_metrics_db_ = host_op_metrics_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.host_op_metrics_db)
}

// .tensorflow.profiler.OpMetricsDb device_op_metrics_db = 2;
inline bool OpStats::_internal_has_device_op_metrics_db() const {
  return this != internal_default_instance() && device_op_metrics_db_ != nullptr;
}
inline bool OpStats::has_device_op_metrics_db() const {
  return _internal_has_device_op_metrics_db();
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::_internal_device_op_metrics_db() const {
  const ::tensorflow::profiler::OpMetricsDb* p = device_op_metrics_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::profiler::OpMetricsDb*>(
      &::tensorflow::profiler::_OpMetricsDb_default_instance_);
}
inline const ::tensorflow::profiler::OpMetricsDb& OpStats::device_op_metrics_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.device_op_metrics_db)
  return _internal_device_op_metrics_db();
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::release_device_op_metrics_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.device_op_metrics_db)
  
  ::tensorflow::profiler::OpMetricsDb* temp = device_op_metrics_db_;
  device_op_metrics_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::_internal_mutable_device_op_metrics_db() {
  
  if (device_op_metrics_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::OpMetricsDb>(GetArenaNoVirtual());
    device_op_metrics_db_ = p;
  }
  return device_op_metrics_db_;
}
inline ::tensorflow::profiler::OpMetricsDb* OpStats::mutable_device_op_metrics_db() {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.device_op_metrics_db)
  return _internal_mutable_device_op_metrics_db();
}
inline void OpStats::set_allocated_device_op_metrics_db(::tensorflow::profiler::OpMetricsDb* device_op_metrics_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_op_metrics_db_);
  }
  if (device_op_metrics_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_op_metrics_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_op_metrics_db, submessage_arena);
    }
    
  } else {
    
  }
  device_op_metrics_db_ = device_op_metrics_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.device_op_metrics_db)
}

// .tensorflow.profiler.PerfEnv perf_env = 3;
inline bool OpStats::_internal_has_perf_env() const {
  return this != internal_default_instance() && perf_env_ != nullptr;
}
inline bool OpStats::has_perf_env() const {
  return _internal_has_perf_env();
}
inline void OpStats::clear_perf_env() {
  if (GetArenaNoVirtual() == nullptr && perf_env_ != nullptr) {
    delete perf_env_;
  }
  perf_env_ = nullptr;
}
inline const ::tensorflow::profiler::PerfEnv& OpStats::_internal_perf_env() const {
  const ::tensorflow::profiler::PerfEnv* p = perf_env_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::profiler::PerfEnv*>(
      &::tensorflow::profiler::_PerfEnv_default_instance_);
}
inline const ::tensorflow::profiler::PerfEnv& OpStats::perf_env() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.perf_env)
  return _internal_perf_env();
}
inline ::tensorflow::profiler::PerfEnv* OpStats::release_perf_env() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.perf_env)
  
  ::tensorflow::profiler::PerfEnv* temp = perf_env_;
  perf_env_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::PerfEnv* OpStats::_internal_mutable_perf_env() {
  
  if (perf_env_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::PerfEnv>(GetArenaNoVirtual());
    perf_env_ = p;
  }
  return perf_env_;
}
inline ::tensorflow::profiler::PerfEnv* OpStats::mutable_perf_env() {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.perf_env)
  return _internal_mutable_perf_env();
}
inline void OpStats::set_allocated_perf_env(::tensorflow::profiler::PerfEnv* perf_env) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete perf_env_;
  }
  if (perf_env) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perf_env = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_env, submessage_arena);
    }
    
  } else {
    
  }
  perf_env_ = perf_env;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.perf_env)
}

// .tensorflow.profiler.StepDatabaseResult step_db = 4;
inline bool OpStats::_internal_has_step_db() const {
  return this != internal_default_instance() && step_db_ != nullptr;
}
inline bool OpStats::has_step_db() const {
  return _internal_has_step_db();
}
inline const ::tensorflow::profiler::StepDatabaseResult& OpStats::_internal_step_db() const {
  const ::tensorflow::profiler::StepDatabaseResult* p = step_db_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::profiler::StepDatabaseResult*>(
      &::tensorflow::profiler::_StepDatabaseResult_default_instance_);
}
inline const ::tensorflow::profiler::StepDatabaseResult& OpStats::step_db() const {
  // @@protoc_insertion_point(field_get:tensorflow.profiler.OpStats.step_db)
  return _internal_step_db();
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::release_step_db() {
  // @@protoc_insertion_point(field_release:tensorflow.profiler.OpStats.step_db)
  
  ::tensorflow::profiler::StepDatabaseResult* temp = step_db_;
  step_db_ = nullptr;
  return temp;
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::_internal_mutable_step_db() {
  
  if (step_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::profiler::StepDatabaseResult>(GetArenaNoVirtual());
    step_db_ = p;
  }
  return step_db_;
}
inline ::tensorflow::profiler::StepDatabaseResult* OpStats::mutable_step_db() {
  // @@protoc_insertion_point(field_mutable:tensorflow.profiler.OpStats.step_db)
  return _internal_mutable_step_db();
}
inline void OpStats::set_allocated_step_db(::tensorflow::profiler::StepDatabaseResult* step_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(step_db_);
  }
  if (step_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      step_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step_db, submessage_arena);
    }
    
  } else {
    
  }
  step_db_ = step_db;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.OpStats.step_db)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fstats_2eproto
