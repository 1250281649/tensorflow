// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/op_metrics.proto

#include "tensorflow/core/profiler/protobuf/op_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto;
namespace tensorflow {
namespace profiler {
class LayoutAnalysis_DimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayoutAnalysis_Dimension> _instance;
} _LayoutAnalysis_Dimension_default_instance_;
class LayoutAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayoutAnalysis> _instance;
} _LayoutAnalysis_default_instance_;
class OpMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpMetrics> _instance;
} _OpMetrics_default_instance_;
class OpMetricsDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpMetricsDb> _instance;
} _OpMetricsDb_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
static void InitDefaultsscc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_LayoutAnalysis_default_instance_;
    new (ptr) ::tensorflow::profiler::LayoutAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::LayoutAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto}, {
      &scc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_LayoutAnalysis_Dimension_default_instance_;
    new (ptr) ::tensorflow::profiler::LayoutAnalysis_Dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::LayoutAnalysis_Dimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_OpMetrics_default_instance_;
    new (ptr) ::tensorflow::profiler::OpMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::profiler::_OpMetricsDb_default_instance_;
    new (ptr) ::tensorflow::profiler::OpMetricsDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::OpMetrics::InitAsDefaultInstance();
  ::tensorflow::profiler::OpMetricsDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto}, {
      &scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis_Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis_Dimension, size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis_Dimension, alignment_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis_Dimension, semantics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::LayoutAnalysis, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, hlo_module_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, category_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, provenance_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, occurrences_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, time_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, min_time_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, self_time_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, flops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, bytes_accessed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, dma_stall_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, layout_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, deduplicated_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetrics, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, metrics_db_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, total_host_infeed_enq_duration_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, total_host_infeed_enq_start_timestamp_ps_diff_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, total_time_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::OpMetricsDb, total_op_time_ps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::LayoutAnalysis_Dimension)},
  { 8, -1, sizeof(::tensorflow::profiler::LayoutAnalysis)},
  { 14, -1, sizeof(::tensorflow::profiler::OpMetrics)},
  { 33, -1, sizeof(::tensorflow::profiler::OpMetricsDb)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_LayoutAnalysis_Dimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_LayoutAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_OpMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_OpMetricsDb_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2tensorflow/core/profiler/protobuf/op_m"
  "etrics.proto\022\023tensorflow.profiler\"\303\001\n\016La"
  "youtAnalysis\022A\n\ndimensions\030\001 \003(\0132-.tenso"
  "rflow.profiler.LayoutAnalysis.Dimension\032"
  "n\n\tDimension\022\014\n\004size\030\001 \001(\005\022\021\n\talignment\030"
  "\002 \001(\005\022@\n\tsemantics\030\003 \001(\0162-.tensorflow.pr"
  "ofiler.LayoutDimensionSemantics\"\372\002\n\tOpMe"
  "trics\022\025\n\rhlo_module_id\030\r \001(\004\022\014\n\004name\030\006 \001"
  "(\t\022\020\n\010category\030\013 \001(\t\022\022\n\nprovenance\030\014 \001(\t"
  "\022\023\n\013occurrences\030\003 \001(\r\022\017\n\007time_ps\030\007 \001(\004\022\023"
  "\n\013min_time_ps\030\021 \001(\004\022\024\n\014self_time_ps\030\001 \001("
  "\004\022\r\n\005flops\030\002 \001(\004\022\026\n\016bytes_accessed\030\005 \001(\004"
  "\022\024\n\014dma_stall_ps\030\n \001(\004\0223\n\006layout\030\016 \001(\0132#"
  ".tensorflow.profiler.LayoutAnalysis\022\031\n\021d"
  "eduplicated_name\030\017 \001(\t\0222\n\010children\030\020 \001(\013"
  "2 .tensorflow.profiler.OpMetricsDbJ\004\010\004\020\005"
  "J\004\010\010\020\tJ\004\010\t\020\n\"\376\001\n\013OpMetricsDb\0222\n\nmetrics_"
  "db\030\n \003(\0132\036.tensorflow.profiler.OpMetrics"
  "\022)\n!total_host_infeed_enq_duration_ps\030\002 "
  "\001(\004\0225\n-total_host_infeed_enq_start_times"
  "tamp_ps_diff\030\003 \001(\004\022\025\n\rtotal_time_ps\030\013 \001("
  "\004\022\030\n\020total_op_time_ps\030\014 \001(\004J\004\010\001\020\002J\004\010\004\020\005J"
  "\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\tJ\004\010\t\020\n*V\n\030LayoutD"
  "imensionSemantics\022\025\n\021UNKNOWN_SEMANTICS\020\000"
  "\022\013\n\007FEATURE\020\001\022\t\n\005BATCH\020\002\022\013\n\007SPATIAL\020\003b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_sccs[3] = {
  &scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,
  &scc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,
  &scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto, "tensorflow/core/profiler/protobuf/op_metrics.proto", 1005,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto), true);
namespace tensorflow {
namespace profiler {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayoutDimensionSemantics_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto[0];
}
bool LayoutDimensionSemantics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LayoutAnalysis_Dimension::InitAsDefaultInstance() {
}
class LayoutAnalysis_Dimension::_Internal {
 public:
};

LayoutAnalysis_Dimension::LayoutAnalysis_Dimension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.LayoutAnalysis.Dimension)
}
LayoutAnalysis_Dimension::LayoutAnalysis_Dimension(const LayoutAnalysis_Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&semantics_) -
    reinterpret_cast<char*>(&size_)) + sizeof(semantics_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.LayoutAnalysis.Dimension)
}

void LayoutAnalysis_Dimension::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&semantics_) -
      reinterpret_cast<char*>(&size_)) + sizeof(semantics_));
}

LayoutAnalysis_Dimension::~LayoutAnalysis_Dimension() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.LayoutAnalysis.Dimension)
  SharedDtor();
}

void LayoutAnalysis_Dimension::SharedDtor() {
}

void LayoutAnalysis_Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayoutAnalysis_Dimension& LayoutAnalysis_Dimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void LayoutAnalysis_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&semantics_) -
      reinterpret_cast<char*>(&size_)) + sizeof(semantics_));
  _internal_metadata_.Clear();
}

const char* LayoutAnalysis_Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.LayoutDimensionSemantics semantics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_semantics(static_cast<::tensorflow::profiler::LayoutDimensionSemantics>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutAnalysis_Dimension::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  // int32 alignment = 2;
  if (this->alignment() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_alignment(), target);
  }

  // .tensorflow.profiler.LayoutDimensionSemantics semantics = 3;
  if (this->semantics() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_semantics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.LayoutAnalysis.Dimension)
  return target;
}

size_t LayoutAnalysis_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 alignment = 2;
  if (this->alignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alignment());
  }

  // .tensorflow.profiler.LayoutDimensionSemantics semantics = 3;
  if (this->semantics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_semantics());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayoutAnalysis_Dimension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutAnalysis_Dimension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayoutAnalysis_Dimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.LayoutAnalysis.Dimension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.LayoutAnalysis.Dimension)
    MergeFrom(*source);
  }
}

void LayoutAnalysis_Dimension::MergeFrom(const LayoutAnalysis_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.alignment() != 0) {
    _internal_set_alignment(from._internal_alignment());
  }
  if (from.semantics() != 0) {
    _internal_set_semantics(from._internal_semantics());
  }
}

void LayoutAnalysis_Dimension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutAnalysis_Dimension::CopyFrom(const LayoutAnalysis_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.LayoutAnalysis.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutAnalysis_Dimension::IsInitialized() const {
  return true;
}

void LayoutAnalysis_Dimension::InternalSwap(LayoutAnalysis_Dimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
  swap(alignment_, other->alignment_);
  swap(semantics_, other->semantics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutAnalysis_Dimension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayoutAnalysis::InitAsDefaultInstance() {
}
class LayoutAnalysis::_Internal {
 public:
};

LayoutAnalysis::LayoutAnalysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.LayoutAnalysis)
}
LayoutAnalysis::LayoutAnalysis(const LayoutAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.LayoutAnalysis)
}

void LayoutAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
}

LayoutAnalysis::~LayoutAnalysis() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.LayoutAnalysis)
  SharedDtor();
}

void LayoutAnalysis::SharedDtor() {
}

void LayoutAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayoutAnalysis& LayoutAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void LayoutAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.LayoutAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  _internal_metadata_.Clear();
}

const char* LayoutAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.profiler.LayoutAnalysis.Dimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutAnalysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.LayoutAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.LayoutAnalysis.Dimension dimensions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dimensions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_dimensions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.LayoutAnalysis)
  return target;
}

size_t LayoutAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.LayoutAnalysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.LayoutAnalysis.Dimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayoutAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.LayoutAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const LayoutAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayoutAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.LayoutAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.LayoutAnalysis)
    MergeFrom(*source);
  }
}

void LayoutAnalysis::MergeFrom(const LayoutAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.LayoutAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
}

void LayoutAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.LayoutAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutAnalysis::CopyFrom(const LayoutAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.LayoutAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutAnalysis::IsInitialized() const {
  return true;
}

void LayoutAnalysis::InternalSwap(LayoutAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpMetrics::InitAsDefaultInstance() {
  ::tensorflow::profiler::_OpMetrics_default_instance_._instance.get_mutable()->layout_ = const_cast< ::tensorflow::profiler::LayoutAnalysis*>(
      ::tensorflow::profiler::LayoutAnalysis::internal_default_instance());
  ::tensorflow::profiler::_OpMetrics_default_instance_._instance.get_mutable()->children_ = const_cast< ::tensorflow::profiler::OpMetricsDb*>(
      ::tensorflow::profiler::OpMetricsDb::internal_default_instance());
}
class OpMetrics::_Internal {
 public:
  static const ::tensorflow::profiler::LayoutAnalysis& layout(const OpMetrics* msg);
  static const ::tensorflow::profiler::OpMetricsDb& children(const OpMetrics* msg);
};

const ::tensorflow::profiler::LayoutAnalysis&
OpMetrics::_Internal::layout(const OpMetrics* msg) {
  return *msg->layout_;
}
const ::tensorflow::profiler::OpMetricsDb&
OpMetrics::_Internal::children(const OpMetrics* msg) {
  return *msg->children_;
}
OpMetrics::OpMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.OpMetrics)
}
OpMetrics::OpMetrics(const OpMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category().empty()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  provenance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provenance().empty()) {
    provenance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  deduplicated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deduplicated_name().empty()) {
    deduplicated_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deduplicated_name_);
  }
  if (from._internal_has_layout()) {
    layout_ = new ::tensorflow::profiler::LayoutAnalysis(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  if (from._internal_has_children()) {
    children_ = new ::tensorflow::profiler::OpMetricsDb(*from.children_);
  } else {
    children_ = nullptr;
  }
  ::memcpy(&self_time_ps_, &from.self_time_ps_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_time_ps_) -
    reinterpret_cast<char*>(&self_time_ps_)) + sizeof(min_time_ps_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.OpMetrics)
}

void OpMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deduplicated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&layout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_time_ps_) -
      reinterpret_cast<char*>(&layout_)) + sizeof(min_time_ps_));
}

OpMetrics::~OpMetrics() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.OpMetrics)
  SharedDtor();
}

void OpMetrics::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deduplicated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layout_;
  if (this != internal_default_instance()) delete children_;
}

void OpMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpMetrics& OpMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void OpMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.OpMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deduplicated_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && children_ != nullptr) {
    delete children_;
  }
  children_ = nullptr;
  ::memset(&self_time_ps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_time_ps_) -
      reinterpret_cast<char*>(&self_time_ps_)) + sizeof(min_time_ps_));
  _internal_metadata_.Clear();
}

const char* OpMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 self_time_ps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          self_time_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 occurrences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bytes_accessed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_accessed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.profiler.OpMetrics.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_ps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dma_stall_ps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          dma_stall_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string category = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_category(), ptr, ctx, "tensorflow.profiler.OpMetrics.category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provenance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_provenance(), ptr, ctx, "tensorflow.profiler.OpMetrics.provenance");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hlo_module_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hlo_module_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.LayoutAnalysis layout = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deduplicated_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deduplicated_name(), ptr, ctx, "tensorflow.profiler.OpMetrics.deduplicated_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.OpMetricsDb children = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_children(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_time_ps = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          min_time_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.OpMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 self_time_ps = 1;
  if (this->self_time_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_self_time_ps(), target);
  }

  // uint64 flops = 2;
  if (this->flops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_flops(), target);
  }

  // uint32 occurrences = 3;
  if (this->occurrences() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_occurrences(), target);
  }

  // uint64 bytes_accessed = 5;
  if (this->bytes_accessed() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_accessed(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.OpMetrics.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // uint64 time_ps = 7;
  if (this->time_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_time_ps(), target);
  }

  // uint64 dma_stall_ps = 10;
  if (this->dma_stall_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_dma_stall_ps(), target);
  }

  // string category = 11;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.OpMetrics.category");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_category(), target);
  }

  // string provenance = 12;
  if (this->provenance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provenance().data(), static_cast<int>(this->_internal_provenance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.OpMetrics.provenance");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_provenance(), target);
  }

  // uint64 hlo_module_id = 13;
  if (this->hlo_module_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_hlo_module_id(), target);
  }

  // .tensorflow.profiler.LayoutAnalysis layout = 14;
  if (this->has_layout()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::layout(this), target, stream);
  }

  // string deduplicated_name = 15;
  if (this->deduplicated_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deduplicated_name().data(), static_cast<int>(this->_internal_deduplicated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.OpMetrics.deduplicated_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_deduplicated_name(), target);
  }

  // .tensorflow.profiler.OpMetricsDb children = 16;
  if (this->has_children()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::children(this), target, stream);
  }

  // uint64 min_time_ps = 17;
  if (this->min_time_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_min_time_ps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.OpMetrics)
  return target;
}

size_t OpMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.OpMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string category = 11;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string provenance = 12;
  if (this->provenance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provenance());
  }

  // string deduplicated_name = 15;
  if (this->deduplicated_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deduplicated_name());
  }

  // .tensorflow.profiler.LayoutAnalysis layout = 14;
  if (this->has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  // .tensorflow.profiler.OpMetricsDb children = 16;
  if (this->has_children()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *children_);
  }

  // uint64 self_time_ps = 1;
  if (this->self_time_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_self_time_ps());
  }

  // uint64 flops = 2;
  if (this->flops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flops());
  }

  // uint64 bytes_accessed = 5;
  if (this->bytes_accessed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bytes_accessed());
  }

  // uint64 time_ps = 7;
  if (this->time_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_ps());
  }

  // uint64 dma_stall_ps = 10;
  if (this->dma_stall_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dma_stall_ps());
  }

  // uint64 hlo_module_id = 13;
  if (this->hlo_module_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hlo_module_id());
  }

  // uint32 occurrences = 3;
  if (this->occurrences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_occurrences());
  }

  // uint64 min_time_ps = 17;
  if (this->min_time_ps() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_time_ps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.OpMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const OpMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.OpMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.OpMetrics)
    MergeFrom(*source);
  }
}

void OpMetrics::MergeFrom(const OpMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.OpMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.provenance().size() > 0) {

    provenance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  if (from.deduplicated_name().size() > 0) {

    deduplicated_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deduplicated_name_);
  }
  if (from.has_layout()) {
    _internal_mutable_layout()->::tensorflow::profiler::LayoutAnalysis::MergeFrom(from._internal_layout());
  }
  if (from.has_children()) {
    _internal_mutable_children()->::tensorflow::profiler::OpMetricsDb::MergeFrom(from._internal_children());
  }
  if (from.self_time_ps() != 0) {
    _internal_set_self_time_ps(from._internal_self_time_ps());
  }
  if (from.flops() != 0) {
    _internal_set_flops(from._internal_flops());
  }
  if (from.bytes_accessed() != 0) {
    _internal_set_bytes_accessed(from._internal_bytes_accessed());
  }
  if (from.time_ps() != 0) {
    _internal_set_time_ps(from._internal_time_ps());
  }
  if (from.dma_stall_ps() != 0) {
    _internal_set_dma_stall_ps(from._internal_dma_stall_ps());
  }
  if (from.hlo_module_id() != 0) {
    _internal_set_hlo_module_id(from._internal_hlo_module_id());
  }
  if (from.occurrences() != 0) {
    _internal_set_occurrences(from._internal_occurrences());
  }
  if (from.min_time_ps() != 0) {
    _internal_set_min_time_ps(from._internal_min_time_ps());
  }
}

void OpMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.OpMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpMetrics::CopyFrom(const OpMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.OpMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMetrics::IsInitialized() const {
  return true;
}

void OpMetrics::InternalSwap(OpMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  provenance_.Swap(&other->provenance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deduplicated_name_.Swap(&other->deduplicated_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layout_, other->layout_);
  swap(children_, other->children_);
  swap(self_time_ps_, other->self_time_ps_);
  swap(flops_, other->flops_);
  swap(bytes_accessed_, other->bytes_accessed_);
  swap(time_ps_, other->time_ps_);
  swap(dma_stall_ps_, other->dma_stall_ps_);
  swap(hlo_module_id_, other->hlo_module_id_);
  swap(occurrences_, other->occurrences_);
  swap(min_time_ps_, other->min_time_ps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpMetricsDb::InitAsDefaultInstance() {
}
class OpMetricsDb::_Internal {
 public:
};

OpMetricsDb::OpMetricsDb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.OpMetricsDb)
}
OpMetricsDb::OpMetricsDb(const OpMetricsDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metrics_db_(from.metrics_db_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_host_infeed_enq_duration_ps_, &from.total_host_infeed_enq_duration_ps_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_op_time_ps_) -
    reinterpret_cast<char*>(&total_host_infeed_enq_duration_ps_)) + sizeof(total_op_time_ps_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.OpMetricsDb)
}

void OpMetricsDb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  ::memset(&total_host_infeed_enq_duration_ps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_op_time_ps_) -
      reinterpret_cast<char*>(&total_host_infeed_enq_duration_ps_)) + sizeof(total_op_time_ps_));
}

OpMetricsDb::~OpMetricsDb() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.OpMetricsDb)
  SharedDtor();
}

void OpMetricsDb::SharedDtor() {
}

void OpMetricsDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpMetricsDb& OpMetricsDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpMetrics_tensorflow_2fcore_2fprofiler_2fprotobuf_2fop_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void OpMetricsDb::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.OpMetricsDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_db_.Clear();
  ::memset(&total_host_infeed_enq_duration_ps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_op_time_ps_) -
      reinterpret_cast<char*>(&total_host_infeed_enq_duration_ps_)) + sizeof(total_op_time_ps_));
  _internal_metadata_.Clear();
}

const char* OpMetricsDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 total_host_infeed_enq_duration_ps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_host_infeed_enq_duration_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_host_infeed_enq_start_timestamp_ps_diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_host_infeed_enq_start_timestamp_ps_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.OpMetrics metrics_db = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics_db(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 total_time_ps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          total_time_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_op_time_ps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_op_time_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpMetricsDb::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.OpMetricsDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_host_infeed_enq_duration_ps = 2;
  if (this->total_host_infeed_enq_duration_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_host_infeed_enq_duration_ps(), target);
  }

  // uint64 total_host_infeed_enq_start_timestamp_ps_diff = 3;
  if (this->total_host_infeed_enq_start_timestamp_ps_diff() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_host_infeed_enq_start_timestamp_ps_diff(), target);
  }

  // repeated .tensorflow.profiler.OpMetrics metrics_db = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_db_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_metrics_db(i), target, stream);
  }

  // uint64 total_time_ps = 11;
  if (this->total_time_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_total_time_ps(), target);
  }

  // uint64 total_op_time_ps = 12;
  if (this->total_op_time_ps() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_total_op_time_ps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.OpMetricsDb)
  return target;
}

size_t OpMetricsDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.OpMetricsDb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.OpMetrics metrics_db = 10;
  total_size += 1UL * this->_internal_metrics_db_size();
  for (const auto& msg : this->metrics_db_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total_host_infeed_enq_duration_ps = 2;
  if (this->total_host_infeed_enq_duration_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_host_infeed_enq_duration_ps());
  }

  // uint64 total_host_infeed_enq_start_timestamp_ps_diff = 3;
  if (this->total_host_infeed_enq_start_timestamp_ps_diff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_host_infeed_enq_start_timestamp_ps_diff());
  }

  // uint64 total_time_ps = 11;
  if (this->total_time_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_time_ps());
  }

  // uint64 total_op_time_ps = 12;
  if (this->total_op_time_ps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_op_time_ps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpMetricsDb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.OpMetricsDb)
  GOOGLE_DCHECK_NE(&from, this);
  const OpMetricsDb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpMetricsDb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.OpMetricsDb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.OpMetricsDb)
    MergeFrom(*source);
  }
}

void OpMetricsDb::MergeFrom(const OpMetricsDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.OpMetricsDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_db_.MergeFrom(from.metrics_db_);
  if (from.total_host_infeed_enq_duration_ps() != 0) {
    _internal_set_total_host_infeed_enq_duration_ps(from._internal_total_host_infeed_enq_duration_ps());
  }
  if (from.total_host_infeed_enq_start_timestamp_ps_diff() != 0) {
    _internal_set_total_host_infeed_enq_start_timestamp_ps_diff(from._internal_total_host_infeed_enq_start_timestamp_ps_diff());
  }
  if (from.total_time_ps() != 0) {
    _internal_set_total_time_ps(from._internal_total_time_ps());
  }
  if (from.total_op_time_ps() != 0) {
    _internal_set_total_op_time_ps(from._internal_total_op_time_ps());
  }
}

void OpMetricsDb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.OpMetricsDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpMetricsDb::CopyFrom(const OpMetricsDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.OpMetricsDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMetricsDb::IsInitialized() const {
  return true;
}

void OpMetricsDb::InternalSwap(OpMetricsDb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metrics_db_.InternalSwap(&other->metrics_db_);
  swap(total_host_infeed_enq_duration_ps_, other->total_host_infeed_enq_duration_ps_);
  swap(total_host_infeed_enq_start_timestamp_ps_diff_, other->total_host_infeed_enq_start_timestamp_ps_diff_);
  swap(total_time_ps_, other->total_time_ps_);
  swap(total_op_time_ps_, other->total_op_time_ps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpMetricsDb::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::LayoutAnalysis_Dimension* Arena::CreateMaybeMessage< ::tensorflow::profiler::LayoutAnalysis_Dimension >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::LayoutAnalysis_Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::LayoutAnalysis* Arena::CreateMaybeMessage< ::tensorflow::profiler::LayoutAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::LayoutAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::OpMetrics* Arena::CreateMaybeMessage< ::tensorflow::profiler::OpMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::OpMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::OpMetricsDb* Arena::CreateMaybeMessage< ::tensorflow::profiler::OpMetricsDb >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::OpMetricsDb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
