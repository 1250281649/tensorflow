// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/protobuf/input_pipeline.proto

#include "tensorflow/core/profiler/protobuf/input_pipeline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto;
namespace tensorflow {
namespace profiler {
class StepSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepSummary> _instance;
} _StepSummary_default_instance_;
class PerGenericStepDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerGenericStepDetails> _instance;
} _PerGenericStepDetails_default_instance_;
class InputTimeBreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputTimeBreakdown> _instance;
} _InputTimeBreakdown_default_instance_;
class InputOpDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputOpDetails> _instance;
} _InputOpDetails_default_instance_;
class InputPipelineAnalysisRecommendationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputPipelineAnalysisRecommendation> _instance;
} _InputPipelineAnalysisRecommendation_default_instance_;
class GenericStepTimeBreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericStepTimeBreakdown> _instance;
} _GenericStepTimeBreakdown_default_instance_;
class InputPipelineAnalysisResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputPipelineAnalysisResult> _instance;
} _InputPipelineAnalysisResult_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
static void InitDefaultsscc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_;
    new (ptr) ::tensorflow::profiler::GenericStepTimeBreakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::GenericStepTimeBreakdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {
      &scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,}};

static void InitDefaultsscc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_InputOpDetails_default_instance_;
    new (ptr) ::tensorflow::profiler::InputOpDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::InputOpDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {}};

static void InitDefaultsscc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_InputPipelineAnalysisRecommendation_default_instance_;
    new (ptr) ::tensorflow::profiler::InputPipelineAnalysisRecommendation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::InputPipelineAnalysisRecommendation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {}};

static void InitDefaultsscc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_;
    new (ptr) ::tensorflow::profiler::InputPipelineAnalysisResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::InputPipelineAnalysisResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {
      &scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
      &scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
      &scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,}};

static void InitDefaultsscc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_InputTimeBreakdown_default_instance_;
    new (ptr) ::tensorflow::profiler::InputTimeBreakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::InputTimeBreakdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {}};

static void InitDefaultsscc_info_PerGenericStepDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_PerGenericStepDetails_default_instance_;
    new (ptr) ::tensorflow::profiler::PerGenericStepDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::PerGenericStepDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerGenericStepDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerGenericStepDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {}};

static void InitDefaultsscc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::_StepSummary_default_instance_;
    new (ptr) ::tensorflow::profiler::StepSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::StepSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::StepSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::StepSummary, average_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::StepSummary, standard_deviation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::StepSummary, minimum_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::StepSummary, maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, step_number_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, step_time_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, unknown_time_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, infeed_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, outfeed_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, device_compute_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, device_to_device_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, host_compute_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, host_prepare_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::PerGenericStepDetails, host_compile_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, demanded_file_read_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, advanced_file_read_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, preprocessing_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, enqueue_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputTimeBreakdown, unclassified_non_enqueue_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, time_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, time_in_percent_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, self_time_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, self_time_in_percent_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputOpDetails, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisRecommendation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisRecommendation, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, unknown_time_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, infeed_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, outfeed_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, device_compute_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, device_to_device_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, host_compute_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, host_prepare_ms_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::GenericStepTimeBreakdown, host_compile_ms_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, step_time_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, infeed_percent_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, step_details_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, input_time_breakdown_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, input_op_details_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, recommendation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::InputPipelineAnalysisResult, step_time_breakdown_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::StepSummary)},
  { 9, -1, sizeof(::tensorflow::profiler::PerGenericStepDetails)},
  { 24, -1, sizeof(::tensorflow::profiler::InputTimeBreakdown)},
  { 34, -1, sizeof(::tensorflow::profiler::InputOpDetails)},
  { 46, -1, sizeof(::tensorflow::profiler::InputPipelineAnalysisRecommendation)},
  { 52, -1, sizeof(::tensorflow::profiler::GenericStepTimeBreakdown)},
  { 65, -1, sizeof(::tensorflow::profiler::InputPipelineAnalysisResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_StepSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_PerGenericStepDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_InputTimeBreakdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_InputOpDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_InputPipelineAnalysisRecommendation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6tensorflow/core/profiler/protobuf/inpu"
  "t_pipeline.proto\022\023tensorflow.profiler\032\031g"
  "oogle/protobuf/any.proto\0326tensorflow/cor"
  "e/profiler/protobuf/hardware_types.proto"
  "\"\\\n\013StepSummary\022\017\n\007average\030\001 \001(\001\022\032\n\022stan"
  "dard_deviation\030\002 \001(\001\022\017\n\007minimum\030\003 \001(\001\022\017\n"
  "\007maximum\030\004 \001(\001\"\205\002\n\025PerGenericStepDetails"
  "\022\023\n\013step_number\030\001 \001(\005\022\024\n\014step_time_ms\030\002 "
  "\001(\001\022\027\n\017unknown_time_ms\030\003 \001(\001\022\021\n\tinfeed_m"
  "s\030\004 \001(\001\022\022\n\noutfeed_ms\030\005 \001(\001\022\031\n\021device_co"
  "mpute_ms\030\006 \001(\001\022\033\n\023device_to_device_ms\030\007 "
  "\001(\001\022\027\n\017host_compute_ms\030\010 \001(\001\022\027\n\017host_pre"
  "pare_ms\030\t \001(\001\022\027\n\017host_compile_ms\030\n \001(\001\"\245"
  "\001\n\022InputTimeBreakdown\022\035\n\025demanded_file_r"
  "ead_us\030\001 \001(\001\022\035\n\025advanced_file_read_us\030\002 "
  "\001(\001\022\030\n\020preprocessing_us\030\003 \001(\001\022\022\n\nenqueue"
  "_us\030\004 \001(\001\022#\n\033unclassified_non_enqueue_us"
  "\030\005 \001(\001\"\246\001\n\016InputOpDetails\022\017\n\007op_name\030\001 \001"
  "(\t\022\r\n\005count\030\002 \001(\004\022\022\n\ntime_in_ms\030\003 \001(\001\022\027\n"
  "\017time_in_percent\030\004 \001(\001\022\027\n\017self_time_in_m"
  "s\030\005 \001(\001\022\034\n\024self_time_in_percent\030\006 \001(\001\022\020\n"
  "\010category\030\007 \001(\t\"6\n#InputPipelineAnalysis"
  "Recommendation\022\017\n\007details\030\001 \003(\t\"\255\004\n\030Gene"
  "ricStepTimeBreakdown\022A\n\027unknown_time_ms_"
  "summary\030\001 \001(\0132 .tensorflow.profiler.Step"
  "Summary\022;\n\021infeed_ms_summary\030\002 \001(\0132 .ten"
  "sorflow.profiler.StepSummary\022<\n\022outfeed_"
  "ms_summary\030\003 \001(\0132 .tensorflow.profiler.S"
  "tepSummary\022C\n\031device_compute_ms_summary\030"
  "\004 \001(\0132 .tensorflow.profiler.StepSummary\022"
  "E\n\033device_to_device_ms_summary\030\005 \001(\0132 .t"
  "ensorflow.profiler.StepSummary\022A\n\027host_c"
  "ompute_ms_summary\030\006 \001(\0132 .tensorflow.pro"
  "filer.StepSummary\022A\n\027host_prepare_ms_sum"
  "mary\030\007 \001(\0132 .tensorflow.profiler.StepSum"
  "mary\022A\n\027host_compile_ms_summary\030\010 \001(\0132 ."
  "tensorflow.profiler.StepSummary\"\215\004\n\033Inpu"
  "tPipelineAnalysisResult\0228\n\rhardware_type"
  "\030\001 \001(\0162!.tensorflow.profiler.HardwareTyp"
  "e\022;\n\021step_time_summary\030\002 \001(\0132 .tensorflo"
  "w.profiler.StepSummary\022@\n\026infeed_percent"
  "_summary\030\003 \001(\0132 .tensorflow.profiler.Ste"
  "pSummary\022*\n\014step_details\030\004 \003(\0132\024.google."
  "protobuf.Any\022E\n\024input_time_breakdown\030\005 \001"
  "(\0132\'.tensorflow.profiler.InputTimeBreakd"
  "own\022=\n\020input_op_details\030\006 \003(\0132#.tensorfl"
  "ow.profiler.InputOpDetails\022P\n\016recommenda"
  "tion\030\007 \001(\01328.tensorflow.profiler.InputPi"
  "pelineAnalysisRecommendation\0221\n\023step_tim"
  "e_breakdown\030\010 \001(\0132\024.google.protobuf.Anyb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2fhardware_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_sccs[7] = {
  &scc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_PerGenericStepDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
  &scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto, "tensorflow/core/profiler/protobuf/input_pipeline.proto", 2007,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto, 7, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto), true);
namespace tensorflow {
namespace profiler {

// ===================================================================

void StepSummary::InitAsDefaultInstance() {
}
class StepSummary::_Internal {
 public:
};

StepSummary::StepSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.StepSummary)
}
StepSummary::StepSummary(const StepSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&average_, &from.average_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_) -
    reinterpret_cast<char*>(&average_)) + sizeof(maximum_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.StepSummary)
}

void StepSummary::SharedCtor() {
  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&average_)) + sizeof(maximum_));
}

StepSummary::~StepSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.StepSummary)
  SharedDtor();
}

void StepSummary::SharedDtor() {
}

void StepSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepSummary& StepSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepSummary_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void StepSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.StepSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_) -
      reinterpret_cast<char*>(&average_)) + sizeof(maximum_));
  _internal_metadata_.Clear();
}

const char* StepSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double average = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double standard_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          standard_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double minimum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maximum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StepSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.StepSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double average = 1;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_average(), target);
  }

  // double standard_deviation = 2;
  if (!(this->standard_deviation() <= 0 && this->standard_deviation() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_standard_deviation(), target);
  }

  // double minimum = 3;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_minimum(), target);
  }

  // double maximum = 4;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_maximum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.StepSummary)
  return target;
}

size_t StepSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.StepSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double average = 1;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    total_size += 1 + 8;
  }

  // double standard_deviation = 2;
  if (!(this->standard_deviation() <= 0 && this->standard_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  // double minimum = 3;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    total_size += 1 + 8;
  }

  // double maximum = 4;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.StepSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const StepSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.StepSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.StepSummary)
    MergeFrom(*source);
  }
}

void StepSummary::MergeFrom(const StepSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.StepSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.average() <= 0 && from.average() >= 0)) {
    _internal_set_average(from._internal_average());
  }
  if (!(from.standard_deviation() <= 0 && from.standard_deviation() >= 0)) {
    _internal_set_standard_deviation(from._internal_standard_deviation());
  }
  if (!(from.minimum() <= 0 && from.minimum() >= 0)) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (!(from.maximum() <= 0 && from.maximum() >= 0)) {
    _internal_set_maximum(from._internal_maximum());
  }
}

void StepSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.StepSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSummary::CopyFrom(const StepSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.StepSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSummary::IsInitialized() const {
  return true;
}

void StepSummary::InternalSwap(StepSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(average_, other->average_);
  swap(standard_deviation_, other->standard_deviation_);
  swap(minimum_, other->minimum_);
  swap(maximum_, other->maximum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerGenericStepDetails::InitAsDefaultInstance() {
}
class PerGenericStepDetails::_Internal {
 public:
};

PerGenericStepDetails::PerGenericStepDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.PerGenericStepDetails)
}
PerGenericStepDetails::PerGenericStepDetails(const PerGenericStepDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_time_ms_, &from.step_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_number_) -
    reinterpret_cast<char*>(&step_time_ms_)) + sizeof(step_number_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.PerGenericStepDetails)
}

void PerGenericStepDetails::SharedCtor() {
  ::memset(&step_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_number_) -
      reinterpret_cast<char*>(&step_time_ms_)) + sizeof(step_number_));
}

PerGenericStepDetails::~PerGenericStepDetails() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.PerGenericStepDetails)
  SharedDtor();
}

void PerGenericStepDetails::SharedDtor() {
}

void PerGenericStepDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerGenericStepDetails& PerGenericStepDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerGenericStepDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void PerGenericStepDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.PerGenericStepDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&step_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_number_) -
      reinterpret_cast<char*>(&step_time_ms_)) + sizeof(step_number_));
  _internal_metadata_.Clear();
}

const char* PerGenericStepDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 step_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double step_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          step_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double unknown_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          unknown_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double infeed_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          infeed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outfeed_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          outfeed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double device_compute_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          device_compute_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double device_to_device_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          device_to_device_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double host_compute_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          host_compute_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double host_prepare_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          host_prepare_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double host_compile_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          host_compile_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerGenericStepDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.PerGenericStepDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step_number = 1;
  if (this->step_number() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_step_number(), target);
  }

  // double step_time_ms = 2;
  if (!(this->step_time_ms() <= 0 && this->step_time_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_step_time_ms(), target);
  }

  // double unknown_time_ms = 3;
  if (!(this->unknown_time_ms() <= 0 && this->unknown_time_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_unknown_time_ms(), target);
  }

  // double infeed_ms = 4;
  if (!(this->infeed_ms() <= 0 && this->infeed_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_infeed_ms(), target);
  }

  // double outfeed_ms = 5;
  if (!(this->outfeed_ms() <= 0 && this->outfeed_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_outfeed_ms(), target);
  }

  // double device_compute_ms = 6;
  if (!(this->device_compute_ms() <= 0 && this->device_compute_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_device_compute_ms(), target);
  }

  // double device_to_device_ms = 7;
  if (!(this->device_to_device_ms() <= 0 && this->device_to_device_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_device_to_device_ms(), target);
  }

  // double host_compute_ms = 8;
  if (!(this->host_compute_ms() <= 0 && this->host_compute_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_host_compute_ms(), target);
  }

  // double host_prepare_ms = 9;
  if (!(this->host_prepare_ms() <= 0 && this->host_prepare_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_host_prepare_ms(), target);
  }

  // double host_compile_ms = 10;
  if (!(this->host_compile_ms() <= 0 && this->host_compile_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_host_compile_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.PerGenericStepDetails)
  return target;
}

size_t PerGenericStepDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.PerGenericStepDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double step_time_ms = 2;
  if (!(this->step_time_ms() <= 0 && this->step_time_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double unknown_time_ms = 3;
  if (!(this->unknown_time_ms() <= 0 && this->unknown_time_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double infeed_ms = 4;
  if (!(this->infeed_ms() <= 0 && this->infeed_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double outfeed_ms = 5;
  if (!(this->outfeed_ms() <= 0 && this->outfeed_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double device_compute_ms = 6;
  if (!(this->device_compute_ms() <= 0 && this->device_compute_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double device_to_device_ms = 7;
  if (!(this->device_to_device_ms() <= 0 && this->device_to_device_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double host_compute_ms = 8;
  if (!(this->host_compute_ms() <= 0 && this->host_compute_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double host_prepare_ms = 9;
  if (!(this->host_prepare_ms() <= 0 && this->host_prepare_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double host_compile_ms = 10;
  if (!(this->host_compile_ms() <= 0 && this->host_compile_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 step_number = 1;
  if (this->step_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerGenericStepDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.PerGenericStepDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PerGenericStepDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerGenericStepDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.PerGenericStepDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.PerGenericStepDetails)
    MergeFrom(*source);
  }
}

void PerGenericStepDetails::MergeFrom(const PerGenericStepDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.PerGenericStepDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.step_time_ms() <= 0 && from.step_time_ms() >= 0)) {
    _internal_set_step_time_ms(from._internal_step_time_ms());
  }
  if (!(from.unknown_time_ms() <= 0 && from.unknown_time_ms() >= 0)) {
    _internal_set_unknown_time_ms(from._internal_unknown_time_ms());
  }
  if (!(from.infeed_ms() <= 0 && from.infeed_ms() >= 0)) {
    _internal_set_infeed_ms(from._internal_infeed_ms());
  }
  if (!(from.outfeed_ms() <= 0 && from.outfeed_ms() >= 0)) {
    _internal_set_outfeed_ms(from._internal_outfeed_ms());
  }
  if (!(from.device_compute_ms() <= 0 && from.device_compute_ms() >= 0)) {
    _internal_set_device_compute_ms(from._internal_device_compute_ms());
  }
  if (!(from.device_to_device_ms() <= 0 && from.device_to_device_ms() >= 0)) {
    _internal_set_device_to_device_ms(from._internal_device_to_device_ms());
  }
  if (!(from.host_compute_ms() <= 0 && from.host_compute_ms() >= 0)) {
    _internal_set_host_compute_ms(from._internal_host_compute_ms());
  }
  if (!(from.host_prepare_ms() <= 0 && from.host_prepare_ms() >= 0)) {
    _internal_set_host_prepare_ms(from._internal_host_prepare_ms());
  }
  if (!(from.host_compile_ms() <= 0 && from.host_compile_ms() >= 0)) {
    _internal_set_host_compile_ms(from._internal_host_compile_ms());
  }
  if (from.step_number() != 0) {
    _internal_set_step_number(from._internal_step_number());
  }
}

void PerGenericStepDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.PerGenericStepDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerGenericStepDetails::CopyFrom(const PerGenericStepDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.PerGenericStepDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerGenericStepDetails::IsInitialized() const {
  return true;
}

void PerGenericStepDetails::InternalSwap(PerGenericStepDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(step_time_ms_, other->step_time_ms_);
  swap(unknown_time_ms_, other->unknown_time_ms_);
  swap(infeed_ms_, other->infeed_ms_);
  swap(outfeed_ms_, other->outfeed_ms_);
  swap(device_compute_ms_, other->device_compute_ms_);
  swap(device_to_device_ms_, other->device_to_device_ms_);
  swap(host_compute_ms_, other->host_compute_ms_);
  swap(host_prepare_ms_, other->host_prepare_ms_);
  swap(host_compile_ms_, other->host_compile_ms_);
  swap(step_number_, other->step_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerGenericStepDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputTimeBreakdown::InitAsDefaultInstance() {
}
class InputTimeBreakdown::_Internal {
 public:
};

InputTimeBreakdown::InputTimeBreakdown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.InputTimeBreakdown)
}
InputTimeBreakdown::InputTimeBreakdown(const InputTimeBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&demanded_file_read_us_, &from.demanded_file_read_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&unclassified_non_enqueue_us_) -
    reinterpret_cast<char*>(&demanded_file_read_us_)) + sizeof(unclassified_non_enqueue_us_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.InputTimeBreakdown)
}

void InputTimeBreakdown::SharedCtor() {
  ::memset(&demanded_file_read_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unclassified_non_enqueue_us_) -
      reinterpret_cast<char*>(&demanded_file_read_us_)) + sizeof(unclassified_non_enqueue_us_));
}

InputTimeBreakdown::~InputTimeBreakdown() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.InputTimeBreakdown)
  SharedDtor();
}

void InputTimeBreakdown::SharedDtor() {
}

void InputTimeBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputTimeBreakdown& InputTimeBreakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void InputTimeBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.InputTimeBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&demanded_file_read_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unclassified_non_enqueue_us_) -
      reinterpret_cast<char*>(&demanded_file_read_us_)) + sizeof(unclassified_non_enqueue_us_));
  _internal_metadata_.Clear();
}

const char* InputTimeBreakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double demanded_file_read_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          demanded_file_read_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double advanced_file_read_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          advanced_file_read_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double preprocessing_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          preprocessing_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double enqueue_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          enqueue_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double unclassified_non_enqueue_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          unclassified_non_enqueue_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputTimeBreakdown::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.InputTimeBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double demanded_file_read_us = 1;
  if (!(this->demanded_file_read_us() <= 0 && this->demanded_file_read_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_demanded_file_read_us(), target);
  }

  // double advanced_file_read_us = 2;
  if (!(this->advanced_file_read_us() <= 0 && this->advanced_file_read_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_advanced_file_read_us(), target);
  }

  // double preprocessing_us = 3;
  if (!(this->preprocessing_us() <= 0 && this->preprocessing_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_preprocessing_us(), target);
  }

  // double enqueue_us = 4;
  if (!(this->enqueue_us() <= 0 && this->enqueue_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_enqueue_us(), target);
  }

  // double unclassified_non_enqueue_us = 5;
  if (!(this->unclassified_non_enqueue_us() <= 0 && this->unclassified_non_enqueue_us() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_unclassified_non_enqueue_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.InputTimeBreakdown)
  return target;
}

size_t InputTimeBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.InputTimeBreakdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double demanded_file_read_us = 1;
  if (!(this->demanded_file_read_us() <= 0 && this->demanded_file_read_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double advanced_file_read_us = 2;
  if (!(this->advanced_file_read_us() <= 0 && this->advanced_file_read_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double preprocessing_us = 3;
  if (!(this->preprocessing_us() <= 0 && this->preprocessing_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double enqueue_us = 4;
  if (!(this->enqueue_us() <= 0 && this->enqueue_us() >= 0)) {
    total_size += 1 + 8;
  }

  // double unclassified_non_enqueue_us = 5;
  if (!(this->unclassified_non_enqueue_us() <= 0 && this->unclassified_non_enqueue_us() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputTimeBreakdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.InputTimeBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const InputTimeBreakdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputTimeBreakdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.InputTimeBreakdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.InputTimeBreakdown)
    MergeFrom(*source);
  }
}

void InputTimeBreakdown::MergeFrom(const InputTimeBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.InputTimeBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.demanded_file_read_us() <= 0 && from.demanded_file_read_us() >= 0)) {
    _internal_set_demanded_file_read_us(from._internal_demanded_file_read_us());
  }
  if (!(from.advanced_file_read_us() <= 0 && from.advanced_file_read_us() >= 0)) {
    _internal_set_advanced_file_read_us(from._internal_advanced_file_read_us());
  }
  if (!(from.preprocessing_us() <= 0 && from.preprocessing_us() >= 0)) {
    _internal_set_preprocessing_us(from._internal_preprocessing_us());
  }
  if (!(from.enqueue_us() <= 0 && from.enqueue_us() >= 0)) {
    _internal_set_enqueue_us(from._internal_enqueue_us());
  }
  if (!(from.unclassified_non_enqueue_us() <= 0 && from.unclassified_non_enqueue_us() >= 0)) {
    _internal_set_unclassified_non_enqueue_us(from._internal_unclassified_non_enqueue_us());
  }
}

void InputTimeBreakdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.InputTimeBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputTimeBreakdown::CopyFrom(const InputTimeBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.InputTimeBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputTimeBreakdown::IsInitialized() const {
  return true;
}

void InputTimeBreakdown::InternalSwap(InputTimeBreakdown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(demanded_file_read_us_, other->demanded_file_read_us_);
  swap(advanced_file_read_us_, other->advanced_file_read_us_);
  swap(preprocessing_us_, other->preprocessing_us_);
  swap(enqueue_us_, other->enqueue_us_);
  swap(unclassified_non_enqueue_us_, other->unclassified_non_enqueue_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputTimeBreakdown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputOpDetails::InitAsDefaultInstance() {
}
class InputOpDetails::_Internal {
 public:
};

InputOpDetails::InputOpDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.InputOpDetails)
}
InputOpDetails::InputOpDetails(const InputOpDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category().empty()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_time_in_percent_) -
    reinterpret_cast<char*>(&count_)) + sizeof(self_time_in_percent_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.InputOpDetails)
}

void InputOpDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_time_in_percent_) -
      reinterpret_cast<char*>(&count_)) + sizeof(self_time_in_percent_));
}

InputOpDetails::~InputOpDetails() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.InputOpDetails)
  SharedDtor();
}

void InputOpDetails::SharedDtor() {
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputOpDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputOpDetails& InputOpDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputOpDetails_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void InputOpDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.InputOpDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_time_in_percent_) -
      reinterpret_cast<char*>(&count_)) + sizeof(self_time_in_percent_));
  _internal_metadata_.Clear();
}

const char* InputOpDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op_name(), ptr, ctx, "tensorflow.profiler.InputOpDetails.op_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time_in_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time_in_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          time_in_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double self_time_in_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          self_time_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double self_time_in_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          self_time_in_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string category = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_category(), ptr, ctx, "tensorflow.profiler.InputOpDetails.category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOpDetails::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.InputOpDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_name = 1;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.InputOpDetails.op_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_name(), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // double time_in_ms = 3;
  if (!(this->time_in_ms() <= 0 && this->time_in_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_in_ms(), target);
  }

  // double time_in_percent = 4;
  if (!(this->time_in_percent() <= 0 && this->time_in_percent() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_in_percent(), target);
  }

  // double self_time_in_ms = 5;
  if (!(this->self_time_in_ms() <= 0 && this->self_time_in_ms() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_self_time_in_ms(), target);
  }

  // double self_time_in_percent = 6;
  if (!(this->self_time_in_percent() <= 0 && this->self_time_in_percent() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_self_time_in_percent(), target);
  }

  // string category = 7;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.InputOpDetails.category");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.InputOpDetails)
  return target;
}

size_t InputOpDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.InputOpDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op_name = 1;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string category = 7;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // double time_in_ms = 3;
  if (!(this->time_in_ms() <= 0 && this->time_in_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double time_in_percent = 4;
  if (!(this->time_in_percent() <= 0 && this->time_in_percent() >= 0)) {
    total_size += 1 + 8;
  }

  // double self_time_in_ms = 5;
  if (!(this->self_time_in_ms() <= 0 && this->self_time_in_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // double self_time_in_percent = 6;
  if (!(this->self_time_in_percent() <= 0 && this->self_time_in_percent() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputOpDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.InputOpDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const InputOpDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputOpDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.InputOpDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.InputOpDetails)
    MergeFrom(*source);
  }
}

void InputOpDetails::MergeFrom(const InputOpDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.InputOpDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_name().size() > 0) {

    op_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.time_in_ms() <= 0 && from.time_in_ms() >= 0)) {
    _internal_set_time_in_ms(from._internal_time_in_ms());
  }
  if (!(from.time_in_percent() <= 0 && from.time_in_percent() >= 0)) {
    _internal_set_time_in_percent(from._internal_time_in_percent());
  }
  if (!(from.self_time_in_ms() <= 0 && from.self_time_in_ms() >= 0)) {
    _internal_set_self_time_in_ms(from._internal_self_time_in_ms());
  }
  if (!(from.self_time_in_percent() <= 0 && from.self_time_in_percent() >= 0)) {
    _internal_set_self_time_in_percent(from._internal_self_time_in_percent());
  }
}

void InputOpDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.InputOpDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOpDetails::CopyFrom(const InputOpDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.InputOpDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOpDetails::IsInitialized() const {
  return true;
}

void InputOpDetails::InternalSwap(InputOpDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(time_in_ms_, other->time_in_ms_);
  swap(time_in_percent_, other->time_in_percent_);
  swap(self_time_in_ms_, other->self_time_in_ms_);
  swap(self_time_in_percent_, other->self_time_in_percent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOpDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputPipelineAnalysisRecommendation::InitAsDefaultInstance() {
}
class InputPipelineAnalysisRecommendation::_Internal {
 public:
};

InputPipelineAnalysisRecommendation::InputPipelineAnalysisRecommendation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.InputPipelineAnalysisRecommendation)
}
InputPipelineAnalysisRecommendation::InputPipelineAnalysisRecommendation(const InputPipelineAnalysisRecommendation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      details_(from.details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.InputPipelineAnalysisRecommendation)
}

void InputPipelineAnalysisRecommendation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
}

InputPipelineAnalysisRecommendation::~InputPipelineAnalysisRecommendation() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  SharedDtor();
}

void InputPipelineAnalysisRecommendation::SharedDtor() {
}

void InputPipelineAnalysisRecommendation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputPipelineAnalysisRecommendation& InputPipelineAnalysisRecommendation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputPipelineAnalysisRecommendation_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void InputPipelineAnalysisRecommendation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  _internal_metadata_.Clear();
}

const char* InputPipelineAnalysisRecommendation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_details(), ptr, ctx, "tensorflow.profiler.InputPipelineAnalysisRecommendation.details");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputPipelineAnalysisRecommendation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string details = 1;
  for (int i = 0, n = this->_internal_details_size(); i < n; i++) {
    const auto& s = this->_internal_details(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.InputPipelineAnalysisRecommendation.details");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  return target;
}

size_t InputPipelineAnalysisRecommendation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string details = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(details_.size());
  for (int i = 0, n = details_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      details_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputPipelineAnalysisRecommendation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  GOOGLE_DCHECK_NE(&from, this);
  const InputPipelineAnalysisRecommendation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputPipelineAnalysisRecommendation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.InputPipelineAnalysisRecommendation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.InputPipelineAnalysisRecommendation)
    MergeFrom(*source);
  }
}

void InputPipelineAnalysisRecommendation::MergeFrom(const InputPipelineAnalysisRecommendation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
}

void InputPipelineAnalysisRecommendation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputPipelineAnalysisRecommendation::CopyFrom(const InputPipelineAnalysisRecommendation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.InputPipelineAnalysisRecommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputPipelineAnalysisRecommendation::IsInitialized() const {
  return true;
}

void InputPipelineAnalysisRecommendation::InternalSwap(InputPipelineAnalysisRecommendation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputPipelineAnalysisRecommendation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericStepTimeBreakdown::InitAsDefaultInstance() {
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->unknown_time_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->infeed_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->outfeed_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->device_compute_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->device_to_device_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->host_compute_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->host_prepare_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_GenericStepTimeBreakdown_default_instance_._instance.get_mutable()->host_compile_ms_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
}
class GenericStepTimeBreakdown::_Internal {
 public:
  static const ::tensorflow::profiler::StepSummary& unknown_time_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& infeed_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& outfeed_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& device_compute_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& device_to_device_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& host_compute_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& host_prepare_ms_summary(const GenericStepTimeBreakdown* msg);
  static const ::tensorflow::profiler::StepSummary& host_compile_ms_summary(const GenericStepTimeBreakdown* msg);
};

const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::unknown_time_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->unknown_time_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::infeed_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->infeed_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::outfeed_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->outfeed_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::device_compute_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->device_compute_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::device_to_device_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->device_to_device_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::host_compute_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->host_compute_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::host_prepare_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->host_prepare_ms_summary_;
}
const ::tensorflow::profiler::StepSummary&
GenericStepTimeBreakdown::_Internal::host_compile_ms_summary(const GenericStepTimeBreakdown* msg) {
  return *msg->host_compile_ms_summary_;
}
GenericStepTimeBreakdown::GenericStepTimeBreakdown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.GenericStepTimeBreakdown)
}
GenericStepTimeBreakdown::GenericStepTimeBreakdown(const GenericStepTimeBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_unknown_time_ms_summary()) {
    unknown_time_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.unknown_time_ms_summary_);
  } else {
    unknown_time_ms_summary_ = nullptr;
  }
  if (from._internal_has_infeed_ms_summary()) {
    infeed_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.infeed_ms_summary_);
  } else {
    infeed_ms_summary_ = nullptr;
  }
  if (from._internal_has_outfeed_ms_summary()) {
    outfeed_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.outfeed_ms_summary_);
  } else {
    outfeed_ms_summary_ = nullptr;
  }
  if (from._internal_has_device_compute_ms_summary()) {
    device_compute_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.device_compute_ms_summary_);
  } else {
    device_compute_ms_summary_ = nullptr;
  }
  if (from._internal_has_device_to_device_ms_summary()) {
    device_to_device_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.device_to_device_ms_summary_);
  } else {
    device_to_device_ms_summary_ = nullptr;
  }
  if (from._internal_has_host_compute_ms_summary()) {
    host_compute_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.host_compute_ms_summary_);
  } else {
    host_compute_ms_summary_ = nullptr;
  }
  if (from._internal_has_host_prepare_ms_summary()) {
    host_prepare_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.host_prepare_ms_summary_);
  } else {
    host_prepare_ms_summary_ = nullptr;
  }
  if (from._internal_has_host_compile_ms_summary()) {
    host_compile_ms_summary_ = new ::tensorflow::profiler::StepSummary(*from.host_compile_ms_summary_);
  } else {
    host_compile_ms_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.GenericStepTimeBreakdown)
}

void GenericStepTimeBreakdown::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  ::memset(&unknown_time_ms_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_compile_ms_summary_) -
      reinterpret_cast<char*>(&unknown_time_ms_summary_)) + sizeof(host_compile_ms_summary_));
}

GenericStepTimeBreakdown::~GenericStepTimeBreakdown() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.GenericStepTimeBreakdown)
  SharedDtor();
}

void GenericStepTimeBreakdown::SharedDtor() {
  if (this != internal_default_instance()) delete unknown_time_ms_summary_;
  if (this != internal_default_instance()) delete infeed_ms_summary_;
  if (this != internal_default_instance()) delete outfeed_ms_summary_;
  if (this != internal_default_instance()) delete device_compute_ms_summary_;
  if (this != internal_default_instance()) delete device_to_device_ms_summary_;
  if (this != internal_default_instance()) delete host_compute_ms_summary_;
  if (this != internal_default_instance()) delete host_prepare_ms_summary_;
  if (this != internal_default_instance()) delete host_compile_ms_summary_;
}

void GenericStepTimeBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericStepTimeBreakdown& GenericStepTimeBreakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericStepTimeBreakdown_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void GenericStepTimeBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.GenericStepTimeBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && unknown_time_ms_summary_ != nullptr) {
    delete unknown_time_ms_summary_;
  }
  unknown_time_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && infeed_ms_summary_ != nullptr) {
    delete infeed_ms_summary_;
  }
  infeed_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && outfeed_ms_summary_ != nullptr) {
    delete outfeed_ms_summary_;
  }
  outfeed_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && device_compute_ms_summary_ != nullptr) {
    delete device_compute_ms_summary_;
  }
  device_compute_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && device_to_device_ms_summary_ != nullptr) {
    delete device_to_device_ms_summary_;
  }
  device_to_device_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_compute_ms_summary_ != nullptr) {
    delete host_compute_ms_summary_;
  }
  host_compute_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_prepare_ms_summary_ != nullptr) {
    delete host_prepare_ms_summary_;
  }
  host_prepare_ms_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_compile_ms_summary_ != nullptr) {
    delete host_compile_ms_summary_;
  }
  host_compile_ms_summary_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GenericStepTimeBreakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.profiler.StepSummary unknown_time_ms_summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_time_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary infeed_ms_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_infeed_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary outfeed_ms_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outfeed_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary device_compute_ms_summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_compute_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary device_to_device_ms_summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_to_device_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary host_compute_ms_summary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_compute_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary host_prepare_ms_summary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_prepare_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary host_compile_ms_summary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_compile_ms_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericStepTimeBreakdown::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.GenericStepTimeBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.StepSummary unknown_time_ms_summary = 1;
  if (this->has_unknown_time_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::unknown_time_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary infeed_ms_summary = 2;
  if (this->has_infeed_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::infeed_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary outfeed_ms_summary = 3;
  if (this->has_outfeed_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::outfeed_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary device_compute_ms_summary = 4;
  if (this->has_device_compute_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::device_compute_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary device_to_device_ms_summary = 5;
  if (this->has_device_to_device_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::device_to_device_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary host_compute_ms_summary = 6;
  if (this->has_host_compute_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::host_compute_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary host_prepare_ms_summary = 7;
  if (this->has_host_prepare_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::host_prepare_ms_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary host_compile_ms_summary = 8;
  if (this->has_host_compile_ms_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::host_compile_ms_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.GenericStepTimeBreakdown)
  return target;
}

size_t GenericStepTimeBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.GenericStepTimeBreakdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.profiler.StepSummary unknown_time_ms_summary = 1;
  if (this->has_unknown_time_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unknown_time_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary infeed_ms_summary = 2;
  if (this->has_infeed_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infeed_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary outfeed_ms_summary = 3;
  if (this->has_outfeed_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outfeed_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary device_compute_ms_summary = 4;
  if (this->has_device_compute_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_compute_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary device_to_device_ms_summary = 5;
  if (this->has_device_to_device_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_to_device_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary host_compute_ms_summary = 6;
  if (this->has_host_compute_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_compute_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary host_prepare_ms_summary = 7;
  if (this->has_host_prepare_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_prepare_ms_summary_);
  }

  // .tensorflow.profiler.StepSummary host_compile_ms_summary = 8;
  if (this->has_host_compile_ms_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_compile_ms_summary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericStepTimeBreakdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.GenericStepTimeBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericStepTimeBreakdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericStepTimeBreakdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.GenericStepTimeBreakdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.GenericStepTimeBreakdown)
    MergeFrom(*source);
  }
}

void GenericStepTimeBreakdown::MergeFrom(const GenericStepTimeBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.GenericStepTimeBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unknown_time_ms_summary()) {
    _internal_mutable_unknown_time_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_unknown_time_ms_summary());
  }
  if (from.has_infeed_ms_summary()) {
    _internal_mutable_infeed_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_infeed_ms_summary());
  }
  if (from.has_outfeed_ms_summary()) {
    _internal_mutable_outfeed_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_outfeed_ms_summary());
  }
  if (from.has_device_compute_ms_summary()) {
    _internal_mutable_device_compute_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_device_compute_ms_summary());
  }
  if (from.has_device_to_device_ms_summary()) {
    _internal_mutable_device_to_device_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_device_to_device_ms_summary());
  }
  if (from.has_host_compute_ms_summary()) {
    _internal_mutable_host_compute_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_host_compute_ms_summary());
  }
  if (from.has_host_prepare_ms_summary()) {
    _internal_mutable_host_prepare_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_host_prepare_ms_summary());
  }
  if (from.has_host_compile_ms_summary()) {
    _internal_mutable_host_compile_ms_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_host_compile_ms_summary());
  }
}

void GenericStepTimeBreakdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.GenericStepTimeBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericStepTimeBreakdown::CopyFrom(const GenericStepTimeBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.GenericStepTimeBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericStepTimeBreakdown::IsInitialized() const {
  return true;
}

void GenericStepTimeBreakdown::InternalSwap(GenericStepTimeBreakdown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(unknown_time_ms_summary_, other->unknown_time_ms_summary_);
  swap(infeed_ms_summary_, other->infeed_ms_summary_);
  swap(outfeed_ms_summary_, other->outfeed_ms_summary_);
  swap(device_compute_ms_summary_, other->device_compute_ms_summary_);
  swap(device_to_device_ms_summary_, other->device_to_device_ms_summary_);
  swap(host_compute_ms_summary_, other->host_compute_ms_summary_);
  swap(host_prepare_ms_summary_, other->host_prepare_ms_summary_);
  swap(host_compile_ms_summary_, other->host_compile_ms_summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericStepTimeBreakdown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputPipelineAnalysisResult::InitAsDefaultInstance() {
  ::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_._instance.get_mutable()->step_time_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_._instance.get_mutable()->infeed_percent_summary_ = const_cast< ::tensorflow::profiler::StepSummary*>(
      ::tensorflow::profiler::StepSummary::internal_default_instance());
  ::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_._instance.get_mutable()->input_time_breakdown_ = const_cast< ::tensorflow::profiler::InputTimeBreakdown*>(
      ::tensorflow::profiler::InputTimeBreakdown::internal_default_instance());
  ::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_._instance.get_mutable()->recommendation_ = const_cast< ::tensorflow::profiler::InputPipelineAnalysisRecommendation*>(
      ::tensorflow::profiler::InputPipelineAnalysisRecommendation::internal_default_instance());
  ::tensorflow::profiler::_InputPipelineAnalysisResult_default_instance_._instance.get_mutable()->step_time_breakdown_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class InputPipelineAnalysisResult::_Internal {
 public:
  static const ::tensorflow::profiler::StepSummary& step_time_summary(const InputPipelineAnalysisResult* msg);
  static const ::tensorflow::profiler::StepSummary& infeed_percent_summary(const InputPipelineAnalysisResult* msg);
  static const ::tensorflow::profiler::InputTimeBreakdown& input_time_breakdown(const InputPipelineAnalysisResult* msg);
  static const ::tensorflow::profiler::InputPipelineAnalysisRecommendation& recommendation(const InputPipelineAnalysisResult* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& step_time_breakdown(const InputPipelineAnalysisResult* msg);
};

const ::tensorflow::profiler::StepSummary&
InputPipelineAnalysisResult::_Internal::step_time_summary(const InputPipelineAnalysisResult* msg) {
  return *msg->step_time_summary_;
}
const ::tensorflow::profiler::StepSummary&
InputPipelineAnalysisResult::_Internal::infeed_percent_summary(const InputPipelineAnalysisResult* msg) {
  return *msg->infeed_percent_summary_;
}
const ::tensorflow::profiler::InputTimeBreakdown&
InputPipelineAnalysisResult::_Internal::input_time_breakdown(const InputPipelineAnalysisResult* msg) {
  return *msg->input_time_breakdown_;
}
const ::tensorflow::profiler::InputPipelineAnalysisRecommendation&
InputPipelineAnalysisResult::_Internal::recommendation(const InputPipelineAnalysisResult* msg) {
  return *msg->recommendation_;
}
const PROTOBUF_NAMESPACE_ID::Any&
InputPipelineAnalysisResult::_Internal::step_time_breakdown(const InputPipelineAnalysisResult* msg) {
  return *msg->step_time_breakdown_;
}
void InputPipelineAnalysisResult::clear_step_details() {
  step_details_.Clear();
}
void InputPipelineAnalysisResult::clear_step_time_breakdown() {
  if (GetArenaNoVirtual() == nullptr && step_time_breakdown_ != nullptr) {
    delete step_time_breakdown_;
  }
  step_time_breakdown_ = nullptr;
}
InputPipelineAnalysisResult::InputPipelineAnalysisResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.InputPipelineAnalysisResult)
}
InputPipelineAnalysisResult::InputPipelineAnalysisResult(const InputPipelineAnalysisResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      step_details_(from.step_details_),
      input_op_details_(from.input_op_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_step_time_summary()) {
    step_time_summary_ = new ::tensorflow::profiler::StepSummary(*from.step_time_summary_);
  } else {
    step_time_summary_ = nullptr;
  }
  if (from._internal_has_infeed_percent_summary()) {
    infeed_percent_summary_ = new ::tensorflow::profiler::StepSummary(*from.infeed_percent_summary_);
  } else {
    infeed_percent_summary_ = nullptr;
  }
  if (from._internal_has_input_time_breakdown()) {
    input_time_breakdown_ = new ::tensorflow::profiler::InputTimeBreakdown(*from.input_time_breakdown_);
  } else {
    input_time_breakdown_ = nullptr;
  }
  if (from._internal_has_recommendation()) {
    recommendation_ = new ::tensorflow::profiler::InputPipelineAnalysisRecommendation(*from.recommendation_);
  } else {
    recommendation_ = nullptr;
  }
  if (from._internal_has_step_time_breakdown()) {
    step_time_breakdown_ = new PROTOBUF_NAMESPACE_ID::Any(*from.step_time_breakdown_);
  } else {
    step_time_breakdown_ = nullptr;
  }
  hardware_type_ = from.hardware_type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.InputPipelineAnalysisResult)
}

void InputPipelineAnalysisResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  ::memset(&step_time_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardware_type_) -
      reinterpret_cast<char*>(&step_time_summary_)) + sizeof(hardware_type_));
}

InputPipelineAnalysisResult::~InputPipelineAnalysisResult() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.InputPipelineAnalysisResult)
  SharedDtor();
}

void InputPipelineAnalysisResult::SharedDtor() {
  if (this != internal_default_instance()) delete step_time_summary_;
  if (this != internal_default_instance()) delete infeed_percent_summary_;
  if (this != internal_default_instance()) delete input_time_breakdown_;
  if (this != internal_default_instance()) delete recommendation_;
  if (this != internal_default_instance()) delete step_time_breakdown_;
}

void InputPipelineAnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputPipelineAnalysisResult& InputPipelineAnalysisResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputPipelineAnalysisResult_tensorflow_2fcore_2fprofiler_2fprotobuf_2finput_5fpipeline_2eproto.base);
  return *internal_default_instance();
}


void InputPipelineAnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.InputPipelineAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_details_.Clear();
  input_op_details_.Clear();
  if (GetArenaNoVirtual() == nullptr && step_time_summary_ != nullptr) {
    delete step_time_summary_;
  }
  step_time_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && infeed_percent_summary_ != nullptr) {
    delete infeed_percent_summary_;
  }
  infeed_percent_summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_time_breakdown_ != nullptr) {
    delete input_time_breakdown_;
  }
  input_time_breakdown_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recommendation_ != nullptr) {
    delete recommendation_;
  }
  recommendation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && step_time_breakdown_ != nullptr) {
    delete step_time_breakdown_;
  }
  step_time_breakdown_ = nullptr;
  hardware_type_ = 0;
  _internal_metadata_.Clear();
}

const char* InputPipelineAnalysisResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.profiler.HardwareType hardware_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_hardware_type(static_cast<::tensorflow::profiler::HardwareType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary step_time_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_time_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.StepSummary infeed_percent_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_infeed_percent_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any step_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_step_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.InputTimeBreakdown input_time_breakdown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_time_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.InputOpDetails input_op_details = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_op_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.InputPipelineAnalysisRecommendation recommendation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any step_time_breakdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_step_time_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputPipelineAnalysisResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.InputPipelineAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.HardwareType hardware_type = 1;
  if (this->hardware_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_hardware_type(), target);
  }

  // .tensorflow.profiler.StepSummary step_time_summary = 2;
  if (this->has_step_time_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::step_time_summary(this), target, stream);
  }

  // .tensorflow.profiler.StepSummary infeed_percent_summary = 3;
  if (this->has_infeed_percent_summary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::infeed_percent_summary(this), target, stream);
  }

  // repeated .google.protobuf.Any step_details = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_step_details_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_step_details(i), target, stream);
  }

  // .tensorflow.profiler.InputTimeBreakdown input_time_breakdown = 5;
  if (this->has_input_time_breakdown()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::input_time_breakdown(this), target, stream);
  }

  // repeated .tensorflow.profiler.InputOpDetails input_op_details = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_op_details_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_input_op_details(i), target, stream);
  }

  // .tensorflow.profiler.InputPipelineAnalysisRecommendation recommendation = 7;
  if (this->has_recommendation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::recommendation(this), target, stream);
  }

  // .google.protobuf.Any step_time_breakdown = 8;
  if (this->has_step_time_breakdown()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::step_time_breakdown(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.InputPipelineAnalysisResult)
  return target;
}

size_t InputPipelineAnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.InputPipelineAnalysisResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any step_details = 4;
  total_size += 1UL * this->_internal_step_details_size();
  for (const auto& msg : this->step_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.profiler.InputOpDetails input_op_details = 6;
  total_size += 1UL * this->_internal_input_op_details_size();
  for (const auto& msg : this->input_op_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.profiler.StepSummary step_time_summary = 2;
  if (this->has_step_time_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *step_time_summary_);
  }

  // .tensorflow.profiler.StepSummary infeed_percent_summary = 3;
  if (this->has_infeed_percent_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infeed_percent_summary_);
  }

  // .tensorflow.profiler.InputTimeBreakdown input_time_breakdown = 5;
  if (this->has_input_time_breakdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_time_breakdown_);
  }

  // .tensorflow.profiler.InputPipelineAnalysisRecommendation recommendation = 7;
  if (this->has_recommendation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recommendation_);
  }

  // .google.protobuf.Any step_time_breakdown = 8;
  if (this->has_step_time_breakdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *step_time_breakdown_);
  }

  // .tensorflow.profiler.HardwareType hardware_type = 1;
  if (this->hardware_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hardware_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputPipelineAnalysisResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.InputPipelineAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InputPipelineAnalysisResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputPipelineAnalysisResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.InputPipelineAnalysisResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.InputPipelineAnalysisResult)
    MergeFrom(*source);
  }
}

void InputPipelineAnalysisResult::MergeFrom(const InputPipelineAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.InputPipelineAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_details_.MergeFrom(from.step_details_);
  input_op_details_.MergeFrom(from.input_op_details_);
  if (from.has_step_time_summary()) {
    _internal_mutable_step_time_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_step_time_summary());
  }
  if (from.has_infeed_percent_summary()) {
    _internal_mutable_infeed_percent_summary()->::tensorflow::profiler::StepSummary::MergeFrom(from._internal_infeed_percent_summary());
  }
  if (from.has_input_time_breakdown()) {
    _internal_mutable_input_time_breakdown()->::tensorflow::profiler::InputTimeBreakdown::MergeFrom(from._internal_input_time_breakdown());
  }
  if (from.has_recommendation()) {
    _internal_mutable_recommendation()->::tensorflow::profiler::InputPipelineAnalysisRecommendation::MergeFrom(from._internal_recommendation());
  }
  if (from.has_step_time_breakdown()) {
    _internal_mutable_step_time_breakdown()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_step_time_breakdown());
  }
  if (from.hardware_type() != 0) {
    _internal_set_hardware_type(from._internal_hardware_type());
  }
}

void InputPipelineAnalysisResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.InputPipelineAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputPipelineAnalysisResult::CopyFrom(const InputPipelineAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.InputPipelineAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputPipelineAnalysisResult::IsInitialized() const {
  return true;
}

void InputPipelineAnalysisResult::InternalSwap(InputPipelineAnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  step_details_.InternalSwap(&other->step_details_);
  input_op_details_.InternalSwap(&other->input_op_details_);
  swap(step_time_summary_, other->step_time_summary_);
  swap(infeed_percent_summary_, other->infeed_percent_summary_);
  swap(input_time_breakdown_, other->input_time_breakdown_);
  swap(recommendation_, other->recommendation_);
  swap(step_time_breakdown_, other->step_time_breakdown_);
  swap(hardware_type_, other->hardware_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputPipelineAnalysisResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::StepSummary* Arena::CreateMaybeMessage< ::tensorflow::profiler::StepSummary >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::StepSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::PerGenericStepDetails* Arena::CreateMaybeMessage< ::tensorflow::profiler::PerGenericStepDetails >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::PerGenericStepDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::InputTimeBreakdown* Arena::CreateMaybeMessage< ::tensorflow::profiler::InputTimeBreakdown >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::InputTimeBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::InputOpDetails* Arena::CreateMaybeMessage< ::tensorflow::profiler::InputOpDetails >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::InputOpDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::InputPipelineAnalysisRecommendation* Arena::CreateMaybeMessage< ::tensorflow::profiler::InputPipelineAnalysisRecommendation >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::InputPipelineAnalysisRecommendation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::GenericStepTimeBreakdown* Arena::CreateMaybeMessage< ::tensorflow::profiler::GenericStepTimeBreakdown >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::GenericStepTimeBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::InputPipelineAnalysisResult* Arena::CreateMaybeMessage< ::tensorflow::profiler::InputPipelineAnalysisResult >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::InputPipelineAnalysisResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
