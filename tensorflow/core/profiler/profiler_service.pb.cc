// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profiler_service.proto

#include "tensorflow/core/profiler/profiler_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RunMetadata_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
namespace tensorflow {
class ProfileOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileOptions> _instance;
} _ProfileOptions_default_instance_;
class ToolRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToolRequestOptions> _instance;
} _ToolRequestOptions_default_instance_;
class ProfileRequest_ToolOptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileRequest_ToolOptionsEntry_DoNotUse> _instance;
} _ProfileRequest_ToolOptionsEntry_DoNotUse_default_instance_;
class ProfileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileRequest> _instance;
} _ProfileRequest_default_instance_;
class ProfileToolDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileToolData> _instance;
} _ProfileToolData_default_instance_;
class ProfileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileResponse> _instance;
} _ProfileResponse_default_instance_;
class MonitorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorRequest> _instance;
} _MonitorRequest_default_instance_;
class MonitorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorResponse> _instance;
} _MonitorResponse_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_MonitorRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MonitorRequest_default_instance_;
    new (ptr) ::tensorflow::MonitorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MonitorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonitorRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MonitorResponse_default_instance_;
    new (ptr) ::tensorflow::MonitorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MonitorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {
      &scc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileOptions_default_instance_;
    new (ptr) ::tensorflow::ProfileOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileRequest_default_instance_;
    new (ptr) ::tensorflow::ProfileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {
      &scc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
      &scc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileRequest_ToolOptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse();
  }
  ::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {
      &scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileResponse_default_instance_;
    new (ptr) ::tensorflow::ProfileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {
      &scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto.base,
      &scc_info_RunMetadata_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto.base,
      &scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
      &scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfileToolData_default_instance_;
    new (ptr) ::tensorflow::ProfileToolData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfileToolData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ToolRequestOptions_default_instance_;
    new (ptr) ::tensorflow::ToolRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ToolRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, include_dataset_ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ToolRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ToolRequestOptions, output_formats_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ToolRequestOptions, save_to_repo_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, max_events_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, tools_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, tool_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, repository_root_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileRequest, host_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileToolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileToolData, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileToolData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, computation_graph_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, hlo_metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, encoded_trace_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, op_profile_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, tool_data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileResponse, empty_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorRequest, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorRequest, monitoring_level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorResponse, data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MonitorResponse, monitor_result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::ProfileOptions)},
  { 6, -1, sizeof(::tensorflow::ToolRequestOptions)},
  { 13, 20, sizeof(::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse)},
  { 22, -1, sizeof(::tensorflow::ProfileRequest)},
  { 35, -1, sizeof(::tensorflow::ProfileToolData)},
  { 42, -1, sizeof(::tensorflow::ProfileResponse)},
  { 53, -1, sizeof(::tensorflow::MonitorRequest)},
  { 61, -1, sizeof(::tensorflow::MonitorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ToolRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileRequest_ToolOptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileToolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MonitorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MonitorResponse_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/tensorflow/core/profiler/profiler_serv"
  "ice.proto\022\ntensorflow\032%tensorflow/core/f"
  "ramework/graph.proto\032)tensorflow/core/pr"
  "ofiler/op_profile.proto\032%tensorflow/core"
  "/protobuf/config.proto\032>tensorflow/core/"
  "profiler/profiler_service_monitor_result"
  ".proto\"-\n\016ProfileOptions\022\033\n\023include_data"
  "set_ops\030\001 \001(\010\"B\n\022ToolRequestOptions\022\026\n\016o"
  "utput_formats\030\002 \001(\t\022\024\n\014save_to_repo\030\003 \001("
  "\010\"\311\002\n\016ProfileRequest\022\023\n\013duration_ms\030\001 \001("
  "\004\022\022\n\nmax_events\030\002 \001(\004\022\r\n\005tools\030\003 \003(\t\022A\n\014"
  "tool_options\030\010 \003(\0132+.tensorflow.ProfileR"
  "equest.ToolOptionsEntry\022(\n\004opts\030\004 \001(\0132\032."
  "tensorflow.ProfileOptions\022\027\n\017repository_"
  "root\030\005 \001(\t\022\022\n\nsession_id\030\006 \001(\t\022\021\n\thost_n"
  "ame\030\007 \001(\t\032R\n\020ToolOptionsEntry\022\013\n\003key\030\001 \001"
  "(\t\022-\n\005value\030\002 \001(\0132\036.tensorflow.ToolReque"
  "stOptions:\0028\001\"-\n\017ProfileToolData\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\220\002\n\017ProfileResponse"
  "\022/\n\021computation_graph\030\002 \003(\0132\024.tensorflow"
  ".GraphDef\022-\n\014hlo_metadata\030\005 \001(\0132\027.tensor"
  "flow.RunMetadata\022\025\n\rencoded_trace\030\003 \001(\014\022"
  ";\n\nop_profile\030\004 \001(\0132\'.tensorflow.profile"
  "r.op_profile.Profile\022.\n\ttool_data\030\006 \003(\0132"
  "\033.tensorflow.ProfileToolData\022\023\n\013empty_tr"
  "ace\030\007 \001(\010J\004\010\001\020\002\"R\n\016MonitorRequest\022\023\n\013dur"
  "ation_ms\030\001 \001(\004\022\030\n\020monitoring_level\030\002 \001(\005"
  "\022\021\n\ttimestamp\030\003 \001(\010\"\221\001\n\017MonitorResponse\022"
  "\014\n\004data\030\001 \001(\t\022@\n\016monitor_result\030\n \001(\0132(."
  "tensorflow.ProfilerServiceMonitorResultJ"
  "\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020"
  "\tJ\004\010\t\020\n2\235\001\n\017ProfilerService\022D\n\007Profile\022\032"
  ".tensorflow.ProfileRequest\032\033.tensorflow."
  "ProfileResponse\"\000\022D\n\007Monitor\022\032.tensorflo"
  "w.MonitorRequest\032\033.tensorflow.MonitorRes"
  "ponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_deps[4] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_sccs[8] = {
  &scc_info_MonitorRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ProfileRequest_ToolOptionsEntry_DoNotUse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
  &scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto, "tensorflow/core/profiler/profiler_service.proto", 1415,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto_deps, 8, 4,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto, 8, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto), true);
namespace tensorflow {

// ===================================================================

void ProfileOptions::InitAsDefaultInstance() {
}
class ProfileOptions::_Internal {
 public:
};

ProfileOptions::ProfileOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileOptions)
}
ProfileOptions::ProfileOptions(const ProfileOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_dataset_ops_ = from.include_dataset_ops_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileOptions)
}

void ProfileOptions::SharedCtor() {
  include_dataset_ops_ = false;
}

ProfileOptions::~ProfileOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileOptions)
  SharedDtor();
}

void ProfileOptions::SharedDtor() {
}

void ProfileOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileOptions& ProfileOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ProfileOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_dataset_ops_ = false;
  _internal_metadata_.Clear();
}

const char* ProfileOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_dataset_ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_dataset_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_dataset_ops = 1;
  if (this->include_dataset_ops() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_dataset_ops(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileOptions)
  return target;
}

size_t ProfileOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_dataset_ops = 1;
  if (this->include_dataset_ops() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileOptions)
    MergeFrom(*source);
  }
}

void ProfileOptions::MergeFrom(const ProfileOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_dataset_ops() != 0) {
    _internal_set_include_dataset_ops(from._internal_include_dataset_ops());
  }
}

void ProfileOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileOptions::CopyFrom(const ProfileOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileOptions::IsInitialized() const {
  return true;
}

void ProfileOptions::InternalSwap(ProfileOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(include_dataset_ops_, other->include_dataset_ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToolRequestOptions::InitAsDefaultInstance() {
}
class ToolRequestOptions::_Internal {
 public:
};

ToolRequestOptions::ToolRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ToolRequestOptions)
}
ToolRequestOptions::ToolRequestOptions(const ToolRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_formats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_formats().empty()) {
    output_formats_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_formats_);
  }
  save_to_repo_ = from.save_to_repo_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ToolRequestOptions)
}

void ToolRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  output_formats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_to_repo_ = false;
}

ToolRequestOptions::~ToolRequestOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ToolRequestOptions)
  SharedDtor();
}

void ToolRequestOptions::SharedDtor() {
  output_formats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ToolRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolRequestOptions& ToolRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToolRequestOptions_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ToolRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ToolRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_formats_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_to_repo_ = false;
  _internal_metadata_.Clear();
}

const char* ToolRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string output_formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_output_formats(), ptr, ctx, "tensorflow.ToolRequestOptions.output_formats");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool save_to_repo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          save_to_repo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolRequestOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ToolRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_formats = 2;
  if (this->output_formats().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_formats().data(), static_cast<int>(this->_internal_output_formats().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ToolRequestOptions.output_formats");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_formats(), target);
  }

  // bool save_to_repo = 3;
  if (this->save_to_repo() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_save_to_repo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ToolRequestOptions)
  return target;
}

size_t ToolRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ToolRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output_formats = 2;
  if (this->output_formats().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_formats());
  }

  // bool save_to_repo = 3;
  if (this->save_to_repo() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ToolRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ToolRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ToolRequestOptions)
    MergeFrom(*source);
  }
}

void ToolRequestOptions::MergeFrom(const ToolRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ToolRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_formats().size() > 0) {

    output_formats_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_formats_);
  }
  if (from.save_to_repo() != 0) {
    _internal_set_save_to_repo(from._internal_save_to_repo());
  }
}

void ToolRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ToolRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolRequestOptions::CopyFrom(const ToolRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ToolRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolRequestOptions::IsInitialized() const {
  return true;
}

void ToolRequestOptions::InternalSwap(ToolRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_formats_.Swap(&other->output_formats_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(save_to_repo_, other->save_to_repo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProfileRequest_ToolOptionsEntry_DoNotUse::ProfileRequest_ToolOptionsEntry_DoNotUse() {}
ProfileRequest_ToolOptionsEntry_DoNotUse::ProfileRequest_ToolOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileRequest_ToolOptionsEntry_DoNotUse::MergeFrom(const ProfileRequest_ToolOptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProfileRequest_ToolOptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProfileRequest_ToolOptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProfileRequest::InitAsDefaultInstance() {
  ::tensorflow::_ProfileRequest_default_instance_._instance.get_mutable()->opts_ = const_cast< ::tensorflow::ProfileOptions*>(
      ::tensorflow::ProfileOptions::internal_default_instance());
}
class ProfileRequest::_Internal {
 public:
  static const ::tensorflow::ProfileOptions& opts(const ProfileRequest* msg);
};

const ::tensorflow::ProfileOptions&
ProfileRequest::_Internal::opts(const ProfileRequest* msg) {
  return *msg->opts_;
}
ProfileRequest::ProfileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileRequest)
}
ProfileRequest::ProfileRequest(const ProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tools_(from.tools_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_options_.MergeFrom(from.tool_options_);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repository_root().empty()) {
    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_name().empty()) {
    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from._internal_has_opts()) {
    opts_ = new ::tensorflow::ProfileOptions(*from.opts_);
  } else {
    opts_ = nullptr;
  }
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_events_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(max_events_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileRequest)
}

void ProfileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  repository_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&opts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_events_) -
      reinterpret_cast<char*>(&opts_)) + sizeof(max_events_));
}

ProfileRequest::~ProfileRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileRequest)
  SharedDtor();
}

void ProfileRequest::SharedDtor() {
  repository_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete opts_;
}

void ProfileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileRequest& ProfileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tools_.Clear();
  tool_options_.Clear();
  repository_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && opts_ != nullptr) {
    delete opts_;
  }
  opts_ = nullptr;
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_events_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(max_events_));
  _internal_metadata_.Clear();
}

const char* ProfileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tools = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_tools(), ptr, ctx, "tensorflow.ProfileRequest.tools");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.ProfileOptions opts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string repository_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_repository_root(), ptr, ctx, "tensorflow.ProfileRequest.repository_root");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_session_id(), ptr, ctx, "tensorflow.ProfileRequest.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host_name(), ptr, ctx, "tensorflow.ProfileRequest.host_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.ToolRequestOptions> tool_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tool_options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 duration_ms = 1;
  if (this->duration_ms() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_duration_ms(), target);
  }

  // uint64 max_events = 2;
  if (this->max_events() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_events(), target);
  }

  // repeated string tools = 3;
  for (int i = 0, n = this->_internal_tools_size(); i < n; i++) {
    const auto& s = this->_internal_tools(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileRequest.tools");
    target = stream->WriteString(3, s, target);
  }

  // .tensorflow.ProfileOptions opts = 4;
  if (this->has_opts()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::opts(this), target, stream);
  }

  // string repository_root = 5;
  if (this->repository_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_root().data(), static_cast<int>(this->_internal_repository_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileRequest.repository_root");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_repository_root(), target);
  }

  // string session_id = 6;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileRequest.session_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_session_id(), target);
  }

  // string host_name = 7;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileRequest.host_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_host_name(), target);
  }

  // map<string, .tensorflow.ToolRequestOptions> tool_options = 8;
  if (!this->_internal_tool_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::ToolRequestOptions >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ProfileRequest.ToolOptionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tool_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tool_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::ToolRequestOptions >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::ToolRequestOptions >::const_iterator
          it = this->_internal_tool_options().begin();
          it != this->_internal_tool_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProfileRequest_ToolOptionsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::ToolRequestOptions >::const_iterator
          it = this->_internal_tool_options().begin();
          it != this->_internal_tool_options().end(); ++it) {
        target = ProfileRequest_ToolOptionsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileRequest)
  return target;
}

size_t ProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tools = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tools_.size());
  for (int i = 0, n = tools_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tools_.Get(i));
  }

  // map<string, .tensorflow.ToolRequestOptions> tool_options = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tool_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::ToolRequestOptions >::const_iterator
      it = this->_internal_tool_options().begin();
      it != this->_internal_tool_options().end(); ++it) {
    total_size += ProfileRequest_ToolOptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string repository_root = 5;
  if (this->repository_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_root());
  }

  // string session_id = 6;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string host_name = 7;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // .tensorflow.ProfileOptions opts = 4;
  if (this->has_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opts_);
  }

  // uint64 duration_ms = 1;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_duration_ms());
  }

  // uint64 max_events = 2;
  if (this->max_events() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_events());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileRequest)
    MergeFrom(*source);
  }
}

void ProfileRequest::MergeFrom(const ProfileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tools_.MergeFrom(from.tools_);
  tool_options_.MergeFrom(from.tool_options_);
  if (from.repository_root().size() > 0) {

    repository_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repository_root_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.has_opts()) {
    _internal_mutable_opts()->::tensorflow::ProfileOptions::MergeFrom(from._internal_opts());
  }
  if (from.duration_ms() != 0) {
    _internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from.max_events() != 0) {
    _internal_set_max_events(from._internal_max_events());
  }
}

void ProfileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileRequest::CopyFrom(const ProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileRequest::IsInitialized() const {
  return true;
}

void ProfileRequest::InternalSwap(ProfileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tools_.InternalSwap(&other->tools_);
  tool_options_.Swap(&other->tool_options_);
  repository_root_.Swap(&other->repository_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(opts_, other->opts_);
  swap(duration_ms_, other->duration_ms_);
  swap(max_events_, other->max_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileToolData::InitAsDefaultInstance() {
}
class ProfileToolData::_Internal {
 public:
};

ProfileToolData::ProfileToolData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileToolData)
}
ProfileToolData::ProfileToolData(const ProfileToolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileToolData)
}

void ProfileToolData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileToolData::~ProfileToolData() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileToolData)
  SharedDtor();
}

void ProfileToolData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileToolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileToolData& ProfileToolData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileToolData_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ProfileToolData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileToolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProfileToolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.ProfileToolData.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileToolData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileToolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileToolData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileToolData)
  return target;
}

size_t ProfileToolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileToolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileToolData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileToolData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileToolData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileToolData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileToolData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileToolData)
    MergeFrom(*source);
  }
}

void ProfileToolData::MergeFrom(const ProfileToolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileToolData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ProfileToolData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileToolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileToolData::CopyFrom(const ProfileToolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileToolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileToolData::IsInitialized() const {
  return true;
}

void ProfileToolData::InternalSwap(ProfileToolData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileToolData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileResponse::InitAsDefaultInstance() {
  ::tensorflow::_ProfileResponse_default_instance_._instance.get_mutable()->hlo_metadata_ = const_cast< ::tensorflow::RunMetadata*>(
      ::tensorflow::RunMetadata::internal_default_instance());
  ::tensorflow::_ProfileResponse_default_instance_._instance.get_mutable()->op_profile_ = const_cast< ::tensorflow::profiler::op_profile::Profile*>(
      ::tensorflow::profiler::op_profile::Profile::internal_default_instance());
}
class ProfileResponse::_Internal {
 public:
  static const ::tensorflow::RunMetadata& hlo_metadata(const ProfileResponse* msg);
  static const ::tensorflow::profiler::op_profile::Profile& op_profile(const ProfileResponse* msg);
};

const ::tensorflow::RunMetadata&
ProfileResponse::_Internal::hlo_metadata(const ProfileResponse* msg) {
  return *msg->hlo_metadata_;
}
const ::tensorflow::profiler::op_profile::Profile&
ProfileResponse::_Internal::op_profile(const ProfileResponse* msg) {
  return *msg->op_profile_;
}
void ProfileResponse::clear_computation_graph() {
  computation_graph_.Clear();
}
void ProfileResponse::clear_hlo_metadata() {
  if (GetArenaNoVirtual() == nullptr && hlo_metadata_ != nullptr) {
    delete hlo_metadata_;
  }
  hlo_metadata_ = nullptr;
}
void ProfileResponse::clear_op_profile() {
  if (GetArenaNoVirtual() == nullptr && op_profile_ != nullptr) {
    delete op_profile_;
  }
  op_profile_ = nullptr;
}
ProfileResponse::ProfileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfileResponse)
}
ProfileResponse::ProfileResponse(const ProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      computation_graph_(from.computation_graph_),
      tool_data_(from.tool_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoded_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded_trace().empty()) {
    encoded_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_trace_);
  }
  if (from._internal_has_op_profile()) {
    op_profile_ = new ::tensorflow::profiler::op_profile::Profile(*from.op_profile_);
  } else {
    op_profile_ = nullptr;
  }
  if (from._internal_has_hlo_metadata()) {
    hlo_metadata_ = new ::tensorflow::RunMetadata(*from.hlo_metadata_);
  } else {
    hlo_metadata_ = nullptr;
  }
  empty_trace_ = from.empty_trace_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileResponse)
}

void ProfileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  encoded_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_profile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&empty_trace_) -
      reinterpret_cast<char*>(&op_profile_)) + sizeof(empty_trace_));
}

ProfileResponse::~ProfileResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileResponse)
  SharedDtor();
}

void ProfileResponse::SharedDtor() {
  encoded_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete op_profile_;
  if (this != internal_default_instance()) delete hlo_metadata_;
}

void ProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileResponse& ProfileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  computation_graph_.Clear();
  tool_data_.Clear();
  encoded_trace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && op_profile_ != nullptr) {
    delete op_profile_;
  }
  op_profile_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hlo_metadata_ != nullptr) {
    delete hlo_metadata_;
  }
  hlo_metadata_ = nullptr;
  empty_trace_ = false;
  _internal_metadata_.Clear();
}

const char* ProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.GraphDef computation_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computation_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes encoded_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_encoded_trace(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Profile op_profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunMetadata hlo_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hlo_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.ProfileToolData tool_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool empty_trace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          empty_trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDef computation_graph = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_computation_graph_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_computation_graph(i), target, stream);
  }

  // bytes encoded_trace = 3;
  if (this->encoded_trace().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encoded_trace(), target);
  }

  // .tensorflow.profiler.op_profile.Profile op_profile = 4;
  if (this->has_op_profile()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::op_profile(this), target, stream);
  }

  // .tensorflow.RunMetadata hlo_metadata = 5;
  if (this->has_hlo_metadata()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::hlo_metadata(this), target, stream);
  }

  // repeated .tensorflow.ProfileToolData tool_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tool_data_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_tool_data(i), target, stream);
  }

  // bool empty_trace = 7;
  if (this->empty_trace() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_empty_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileResponse)
  return target;
}

size_t ProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDef computation_graph = 2;
  total_size += 1UL * this->_internal_computation_graph_size();
  for (const auto& msg : this->computation_graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.ProfileToolData tool_data = 6;
  total_size += 1UL * this->_internal_tool_data_size();
  for (const auto& msg : this->tool_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes encoded_trace = 3;
  if (this->encoded_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_trace());
  }

  // .tensorflow.profiler.op_profile.Profile op_profile = 4;
  if (this->has_op_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_profile_);
  }

  // .tensorflow.RunMetadata hlo_metadata = 5;
  if (this->has_hlo_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hlo_metadata_);
  }

  // bool empty_trace = 7;
  if (this->empty_trace() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfileResponse)
    MergeFrom(*source);
  }
}

void ProfileResponse::MergeFrom(const ProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  computation_graph_.MergeFrom(from.computation_graph_);
  tool_data_.MergeFrom(from.tool_data_);
  if (from.encoded_trace().size() > 0) {

    encoded_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_trace_);
  }
  if (from.has_op_profile()) {
    _internal_mutable_op_profile()->::tensorflow::profiler::op_profile::Profile::MergeFrom(from._internal_op_profile());
  }
  if (from.has_hlo_metadata()) {
    _internal_mutable_hlo_metadata()->::tensorflow::RunMetadata::MergeFrom(from._internal_hlo_metadata());
  }
  if (from.empty_trace() != 0) {
    _internal_set_empty_trace(from._internal_empty_trace());
  }
}

void ProfileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileResponse::CopyFrom(const ProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileResponse::IsInitialized() const {
  return true;
}

void ProfileResponse::InternalSwap(ProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  computation_graph_.InternalSwap(&other->computation_graph_);
  tool_data_.InternalSwap(&other->tool_data_);
  encoded_trace_.Swap(&other->encoded_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_profile_, other->op_profile_);
  swap(hlo_metadata_, other->hlo_metadata_);
  swap(empty_trace_, other->empty_trace_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorRequest::InitAsDefaultInstance() {
}
class MonitorRequest::_Internal {
 public:
};

MonitorRequest::MonitorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MonitorRequest)
}
MonitorRequest::MonitorRequest(const MonitorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MonitorRequest)
}

void MonitorRequest::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(timestamp_));
}

MonitorRequest::~MonitorRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.MonitorRequest)
  SharedDtor();
}

void MonitorRequest::SharedDtor() {
}

void MonitorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorRequest& MonitorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorRequest_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MonitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MonitorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

const char* MonitorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monitoring_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monitoring_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MonitorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 duration_ms = 1;
  if (this->duration_ms() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_duration_ms(), target);
  }

  // int32 monitoring_level = 2;
  if (this->monitoring_level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monitoring_level(), target);
  }

  // bool timestamp = 3;
  if (this->timestamp() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MonitorRequest)
  return target;
}

size_t MonitorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MonitorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 duration_ms = 1;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_duration_ms());
  }

  // int32 monitoring_level = 2;
  if (this->monitoring_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monitoring_level());
  }

  // bool timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MonitorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MonitorRequest)
    MergeFrom(*source);
  }
}

void MonitorRequest::MergeFrom(const MonitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration_ms() != 0) {
    _internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from.monitoring_level() != 0) {
    _internal_set_monitoring_level(from._internal_monitoring_level());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MonitorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorRequest::CopyFrom(const MonitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorRequest::IsInitialized() const {
  return true;
}

void MonitorRequest::InternalSwap(MonitorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_ms_, other->duration_ms_);
  swap(monitoring_level_, other->monitoring_level_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorResponse::InitAsDefaultInstance() {
  ::tensorflow::_MonitorResponse_default_instance_._instance.get_mutable()->monitor_result_ = const_cast< ::tensorflow::ProfilerServiceMonitorResult*>(
      ::tensorflow::ProfilerServiceMonitorResult::internal_default_instance());
}
class MonitorResponse::_Internal {
 public:
  static const ::tensorflow::ProfilerServiceMonitorResult& monitor_result(const MonitorResponse* msg);
};

const ::tensorflow::ProfilerServiceMonitorResult&
MonitorResponse::_Internal::monitor_result(const MonitorResponse* msg) {
  return *msg->monitor_result_;
}
void MonitorResponse::clear_monitor_result() {
  if (GetArenaNoVirtual() == nullptr && monitor_result_ != nullptr) {
    delete monitor_result_;
  }
  monitor_result_ = nullptr;
}
MonitorResponse::MonitorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MonitorResponse)
}
MonitorResponse::MonitorResponse(const MonitorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_monitor_result()) {
    monitor_result_ = new ::tensorflow::ProfilerServiceMonitorResult(*from.monitor_result_);
  } else {
    monitor_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MonitorResponse)
}

void MonitorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  monitor_result_ = nullptr;
}

MonitorResponse::~MonitorResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.MonitorResponse)
  SharedDtor();
}

void MonitorResponse::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete monitor_result_;
}

void MonitorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorResponse& MonitorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorResponse_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MonitorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MonitorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && monitor_result_ != nullptr) {
    delete monitor_result_;
  }
  monitor_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MonitorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_data(), ptr, ctx, "tensorflow.MonitorResponse.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ProfilerServiceMonitorResult monitor_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitor_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MonitorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MonitorResponse.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .tensorflow.ProfilerServiceMonitorResult monitor_result = 10;
  if (this->has_monitor_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::monitor_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MonitorResponse)
  return target;
}

size_t MonitorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MonitorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .tensorflow.ProfilerServiceMonitorResult monitor_result = 10;
  if (this->has_monitor_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monitor_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MonitorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MonitorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MonitorResponse)
    MergeFrom(*source);
  }
}

void MonitorResponse::MergeFrom(const MonitorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MonitorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_monitor_result()) {
    _internal_mutable_monitor_result()->::tensorflow::ProfilerServiceMonitorResult::MergeFrom(from._internal_monitor_result());
  }
}

void MonitorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MonitorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorResponse::CopyFrom(const MonitorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MonitorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorResponse::IsInitialized() const {
  return true;
}

void MonitorResponse::InternalSwap(MonitorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(monitor_result_, other->monitor_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileOptions* Arena::CreateMaybeMessage< ::tensorflow::ProfileOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ToolRequestOptions* Arena::CreateMaybeMessage< ::tensorflow::ToolRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ToolRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileRequest* Arena::CreateMaybeMessage< ::tensorflow::ProfileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileToolData* Arena::CreateMaybeMessage< ::tensorflow::ProfileToolData >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileToolData >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileResponse* Arena::CreateMaybeMessage< ::tensorflow::ProfileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MonitorRequest* Arena::CreateMaybeMessage< ::tensorflow::MonitorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::MonitorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MonitorResponse* Arena::CreateMaybeMessage< ::tensorflow::MonitorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::MonitorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
