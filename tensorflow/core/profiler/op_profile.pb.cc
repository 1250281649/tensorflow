// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/op_profile.proto

#include "tensorflow/core/profiler/op_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto;
namespace tensorflow {
namespace profiler {
namespace op_profile {
class ProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile> _instance;
} _Profile_default_instance_;
class Node_InstructionCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node_InstructionCategory> _instance;
} _Node_InstructionCategory_default_instance_;
class Node_XLAInstruction_LayoutAnalysis_DimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node_XLAInstruction_LayoutAnalysis_Dimension> _instance;
} _Node_XLAInstruction_LayoutAnalysis_Dimension_default_instance_;
class Node_XLAInstruction_LayoutAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node_XLAInstruction_LayoutAnalysis> _instance;
} _Node_XLAInstruction_LayoutAnalysis_default_instance_;
class Node_XLAInstructionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node_XLAInstruction> _instance;
} _Node_XLAInstruction_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
  const ::tensorflow::profiler::op_profile::Node_InstructionCategory* category_;
  const ::tensorflow::profiler::op_profile::Node_XLAInstruction* xla_;
} _Node_default_instance_;
class MetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metrics> _instance;
} _Metrics_default_instance_;
}  // namespace op_profile
}  // namespace profiler
}  // namespace tensorflow
static void InitDefaultsscc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Metrics_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Metrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Metrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Node_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {
      &scc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
      &scc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
      &scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Node_InstructionCategory_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Node_InstructionCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Node_InstructionCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Node_XLAInstruction_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Node_XLAInstruction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Node_XLAInstruction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {
      &scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Node_XLAInstruction_LayoutAnalysis_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {
      &scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Node_XLAInstruction_LayoutAnalysis_Dimension_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::profiler::op_profile::_Profile_default_instance_;
    new (ptr) ::tensorflow::profiler::op_profile::Profile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::profiler::op_profile::Profile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto}, {
      &scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Profile, by_category_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Profile, by_program_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Profile, device_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_InstructionCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension, size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension, alignment_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension, semantics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, expression_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, provenance_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, category_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node_XLAInstruction, layout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, metrics_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, children_),
  offsetof(::tensorflow::profiler::op_profile::NodeDefaultTypeInternal, category_),
  offsetof(::tensorflow::profiler::op_profile::NodeDefaultTypeInternal, xla_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, num_children_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Node, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, flops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, memory_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, raw_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, raw_flops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::op_profile::Metrics, raw_bytes_accessed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::profiler::op_profile::Profile)},
  { 8, -1, sizeof(::tensorflow::profiler::op_profile::Node_InstructionCategory)},
  { 13, -1, sizeof(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension)},
  { 21, -1, sizeof(::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis)},
  { 27, -1, sizeof(::tensorflow::profiler::op_profile::Node_XLAInstruction)},
  { 37, -1, sizeof(::tensorflow::profiler::op_profile::Node)},
  { 49, -1, sizeof(::tensorflow::profiler::op_profile::Metrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Profile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Node_InstructionCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Node_XLAInstruction_LayoutAnalysis_Dimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Node_XLAInstruction_LayoutAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Node_XLAInstruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::profiler::op_profile::_Metrics_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)tensorflow/core/profiler/op_profile.pr"
  "oto\022\036tensorflow.profiler.op_profile\"\302\001\n\007"
  "Profile\0229\n\013by_category\030\001 \001(\0132$.tensorflo"
  "w.profiler.op_profile.Node\0228\n\nby_program"
  "\030\004 \001(\0132$.tensorflow.profiler.op_profile."
  "Node\022\023\n\013device_type\030\005 \001(\tJ\004\010\002\020\003J\004\010\003\020\004R\024b"
  "y_program_structureR\013per_program\"\264\005\n\004Nod"
  "e\022\014\n\004name\030\001 \001(\t\0228\n\007metrics\030\002 \001(\0132\'.tenso"
  "rflow.profiler.op_profile.Metrics\0226\n\010chi"
  "ldren\030\003 \003(\0132$.tensorflow.profiler.op_pro"
  "file.Node\022L\n\010category\030\004 \001(\01328.tensorflow"
  ".profiler.op_profile.Node.InstructionCat"
  "egoryH\000\022B\n\003xla\030\005 \001(\01323.tensorflow.profil"
  "er.op_profile.Node.XLAInstructionH\000\022\024\n\014n"
  "um_children\030\006 \001(\005\032\025\n\023InstructionCategory"
  "\032\340\002\n\016XLAInstruction\022\n\n\002op\030\001 \001(\t\022\022\n\nexpre"
  "ssion\030\002 \001(\t\022\022\n\nprovenance\030\003 \001(\t\022\020\n\010categ"
  "ory\030\004 \001(\t\022R\n\006layout\030\005 \001(\0132B.tensorflow.p"
  "rofiler.op_profile.Node.XLAInstruction.L"
  "ayoutAnalysis\032\263\001\n\016LayoutAnalysis\022`\n\ndime"
  "nsions\030\001 \003(\0132L.tensorflow.profiler.op_pr"
  "ofile.Node.XLAInstruction.LayoutAnalysis"
  ".Dimension\032\?\n\tDimension\022\014\n\004size\030\001 \001(\005\022\021\n"
  "\talignment\030\002 \001(\005\022\021\n\tsemantics\030\003 \001(\tB\n\n\010c"
  "ontents\"\201\001\n\007Metrics\022\014\n\004time\030\001 \001(\001\022\r\n\005flo"
  "ps\030\002 \001(\001\022\030\n\020memory_bandwidth\030\003 \001(\001\022\020\n\010ra"
  "w_time\030\013 \001(\001\022\021\n\traw_flops\030\014 \001(\001\022\032\n\022raw_b"
  "ytes_accessed\030\r \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_sccs[7] = {
  &scc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
  &scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto, "tensorflow/core/profiler/op_profile.proto", 1107,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto, 7, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto), true);
namespace tensorflow {
namespace profiler {
namespace op_profile {

// ===================================================================

void Profile::InitAsDefaultInstance() {
  ::tensorflow::profiler::op_profile::_Profile_default_instance_._instance.get_mutable()->by_category_ = const_cast< ::tensorflow::profiler::op_profile::Node*>(
      ::tensorflow::profiler::op_profile::Node::internal_default_instance());
  ::tensorflow::profiler::op_profile::_Profile_default_instance_._instance.get_mutable()->by_program_ = const_cast< ::tensorflow::profiler::op_profile::Node*>(
      ::tensorflow::profiler::op_profile::Node::internal_default_instance());
}
class Profile::_Internal {
 public:
  static const ::tensorflow::profiler::op_profile::Node& by_category(const Profile* msg);
  static const ::tensorflow::profiler::op_profile::Node& by_program(const Profile* msg);
};

const ::tensorflow::profiler::op_profile::Node&
Profile::_Internal::by_category(const Profile* msg) {
  return *msg->by_category_;
}
const ::tensorflow::profiler::op_profile::Node&
Profile::_Internal::by_program(const Profile* msg) {
  return *msg->by_program_;
}
Profile::Profile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from._internal_has_by_category()) {
    by_category_ = new ::tensorflow::profiler::op_profile::Node(*from.by_category_);
  } else {
    by_category_ = nullptr;
  }
  if (from._internal_has_by_program()) {
    by_program_ = new ::tensorflow::profiler::op_profile::Node(*from.by_program_);
  } else {
    by_program_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Profile)
}

void Profile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&by_category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_program_) -
      reinterpret_cast<char*>(&by_category_)) + sizeof(by_program_));
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete by_category_;
  if (this != internal_default_instance()) delete by_program_;
}

void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile& Profile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && by_category_ != nullptr) {
    delete by_category_;
  }
  by_category_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && by_program_ != nullptr) {
    delete by_program_;
  }
  by_program_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.profiler.op_profile.Node by_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Node by_program = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_by_program(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_device_type(), ptr, ctx, "tensorflow.profiler.op_profile.Profile.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.profiler.op_profile.Node by_category = 1;
  if (this->has_by_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::by_category(this), target, stream);
  }

  // .tensorflow.profiler.op_profile.Node by_program = 4;
  if (this->has_by_program()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::by_program(this), target, stream);
  }

  // string device_type = 5;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Profile.device_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Profile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_type = 5;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // .tensorflow.profiler.op_profile.Node by_category = 1;
  if (this->has_by_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *by_category_);
  }

  // .tensorflow.profiler.op_profile.Node by_program = 4;
  if (this->has_by_program()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *by_program_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Profile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.has_by_category()) {
    _internal_mutable_by_category()->::tensorflow::profiler::op_profile::Node::MergeFrom(from._internal_by_category());
  }
  if (from.has_by_program()) {
    _internal_mutable_by_program()->::tensorflow::profiler::op_profile::Node::MergeFrom(from._internal_by_program());
  }
}

void Profile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(by_category_, other->by_category_);
  swap(by_program_, other->by_program_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node_InstructionCategory::InitAsDefaultInstance() {
}
class Node_InstructionCategory::_Internal {
 public:
};

Node_InstructionCategory::Node_InstructionCategory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Node.InstructionCategory)
}
Node_InstructionCategory::Node_InstructionCategory(const Node_InstructionCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Node.InstructionCategory)
}

void Node_InstructionCategory::SharedCtor() {
}

Node_InstructionCategory::~Node_InstructionCategory() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Node.InstructionCategory)
  SharedDtor();
}

void Node_InstructionCategory::SharedDtor() {
}

void Node_InstructionCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node_InstructionCategory& Node_InstructionCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_InstructionCategory_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Node_InstructionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Node_InstructionCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node_InstructionCategory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Node.InstructionCategory)
  return target;
}

size_t Node_InstructionCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_InstructionCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_InstructionCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node_InstructionCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Node.InstructionCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Node.InstructionCategory)
    MergeFrom(*source);
  }
}

void Node_InstructionCategory::MergeFrom(const Node_InstructionCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Node_InstructionCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_InstructionCategory::CopyFrom(const Node_InstructionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Node.InstructionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_InstructionCategory::IsInitialized() const {
  return true;
}

void Node_InstructionCategory::InternalSwap(Node_InstructionCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_InstructionCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node_XLAInstruction_LayoutAnalysis_Dimension::InitAsDefaultInstance() {
}
class Node_XLAInstruction_LayoutAnalysis_Dimension::_Internal {
 public:
};

Node_XLAInstruction_LayoutAnalysis_Dimension::Node_XLAInstruction_LayoutAnalysis_Dimension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
}
Node_XLAInstruction_LayoutAnalysis_Dimension::Node_XLAInstruction_LayoutAnalysis_Dimension(const Node_XLAInstruction_LayoutAnalysis_Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  semantics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_semantics().empty()) {
    semantics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&alignment_) -
    reinterpret_cast<char*>(&size_)) + sizeof(alignment_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  semantics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alignment_) -
      reinterpret_cast<char*>(&size_)) + sizeof(alignment_));
}

Node_XLAInstruction_LayoutAnalysis_Dimension::~Node_XLAInstruction_LayoutAnalysis_Dimension() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  SharedDtor();
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::SharedDtor() {
  semantics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node_XLAInstruction_LayoutAnalysis_Dimension& Node_XLAInstruction_LayoutAnalysis_Dimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_XLAInstruction_LayoutAnalysis_Dimension_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Node_XLAInstruction_LayoutAnalysis_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  semantics_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alignment_) -
      reinterpret_cast<char*>(&size_)) + sizeof(alignment_));
  _internal_metadata_.Clear();
}

const char* Node_XLAInstruction_LayoutAnalysis_Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string semantics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_semantics(), ptr, ctx, "tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension.semantics");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node_XLAInstruction_LayoutAnalysis_Dimension::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  // int32 alignment = 2;
  if (this->alignment() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_alignment(), target);
  }

  // string semantics = 3;
  if (this->semantics().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_semantics().data(), static_cast<int>(this->_internal_semantics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension.semantics");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_semantics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  return target;
}

size_t Node_XLAInstruction_LayoutAnalysis_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string semantics = 3;
  if (this->semantics().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_semantics());
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 alignment = 2;
  if (this->alignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_alignment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_XLAInstruction_LayoutAnalysis_Dimension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node_XLAInstruction_LayoutAnalysis_Dimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
    MergeFrom(*source);
  }
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::MergeFrom(const Node_XLAInstruction_LayoutAnalysis_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.semantics().size() > 0) {

    semantics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.alignment() != 0) {
    _internal_set_alignment(from._internal_alignment());
  }
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::CopyFrom(const Node_XLAInstruction_LayoutAnalysis_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_XLAInstruction_LayoutAnalysis_Dimension::IsInitialized() const {
  return true;
}

void Node_XLAInstruction_LayoutAnalysis_Dimension::InternalSwap(Node_XLAInstruction_LayoutAnalysis_Dimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  semantics_.Swap(&other->semantics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(alignment_, other->alignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_XLAInstruction_LayoutAnalysis_Dimension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node_XLAInstruction_LayoutAnalysis::InitAsDefaultInstance() {
}
class Node_XLAInstruction_LayoutAnalysis::_Internal {
 public:
};

Node_XLAInstruction_LayoutAnalysis::Node_XLAInstruction_LayoutAnalysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
}
Node_XLAInstruction_LayoutAnalysis::Node_XLAInstruction_LayoutAnalysis(const Node_XLAInstruction_LayoutAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
}

void Node_XLAInstruction_LayoutAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
}

Node_XLAInstruction_LayoutAnalysis::~Node_XLAInstruction_LayoutAnalysis() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  SharedDtor();
}

void Node_XLAInstruction_LayoutAnalysis::SharedDtor() {
}

void Node_XLAInstruction_LayoutAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node_XLAInstruction_LayoutAnalysis& Node_XLAInstruction_LayoutAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_XLAInstruction_LayoutAnalysis_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Node_XLAInstruction_LayoutAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  _internal_metadata_.Clear();
}

const char* Node_XLAInstruction_LayoutAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node_XLAInstruction_LayoutAnalysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension dimensions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dimensions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_dimensions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  return target;
}

size_t Node_XLAInstruction_LayoutAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_XLAInstruction_LayoutAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_XLAInstruction_LayoutAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node_XLAInstruction_LayoutAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
    MergeFrom(*source);
  }
}

void Node_XLAInstruction_LayoutAnalysis::MergeFrom(const Node_XLAInstruction_LayoutAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
}

void Node_XLAInstruction_LayoutAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_XLAInstruction_LayoutAnalysis::CopyFrom(const Node_XLAInstruction_LayoutAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_XLAInstruction_LayoutAnalysis::IsInitialized() const {
  return true;
}

void Node_XLAInstruction_LayoutAnalysis::InternalSwap(Node_XLAInstruction_LayoutAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_XLAInstruction_LayoutAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node_XLAInstruction::InitAsDefaultInstance() {
  ::tensorflow::profiler::op_profile::_Node_XLAInstruction_default_instance_._instance.get_mutable()->layout_ = const_cast< ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis*>(
      ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis::internal_default_instance());
}
class Node_XLAInstruction::_Internal {
 public:
  static const ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis& layout(const Node_XLAInstruction* msg);
};

const ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis&
Node_XLAInstruction::_Internal::layout(const Node_XLAInstruction* msg) {
  return *msg->layout_;
}
Node_XLAInstruction::Node_XLAInstruction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Node.XLAInstruction)
}
Node_XLAInstruction::Node_XLAInstruction(const Node_XLAInstruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op().empty()) {
    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expression().empty()) {
    expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  provenance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provenance().empty()) {
    provenance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category().empty()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from._internal_has_layout()) {
    layout_ = new ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Node.XLAInstruction)
}

void Node_XLAInstruction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layout_ = nullptr;
}

Node_XLAInstruction::~Node_XLAInstruction() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Node.XLAInstruction)
  SharedDtor();
}

void Node_XLAInstruction::SharedDtor() {
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layout_;
}

void Node_XLAInstruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node_XLAInstruction& Node_XLAInstruction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_XLAInstruction_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Node_XLAInstruction::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provenance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Node_XLAInstruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op(), ptr, ctx, "tensorflow.profiler.op_profile.Node.XLAInstruction.op");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_expression(), ptr, ctx, "tensorflow.profiler.op_profile.Node.XLAInstruction.expression");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provenance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_provenance(), ptr, ctx, "tensorflow.profiler.op_profile.Node.XLAInstruction.provenance");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_category(), ptr, ctx, "tensorflow.profiler.op_profile.Node.XLAInstruction.category");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis layout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node_XLAInstruction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.XLAInstruction.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // string expression = 2;
  if (this->expression().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expression().data(), static_cast<int>(this->_internal_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.XLAInstruction.expression");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expression(), target);
  }

  // string provenance = 3;
  if (this->provenance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provenance().data(), static_cast<int>(this->_internal_provenance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.XLAInstruction.provenance");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_provenance(), target);
  }

  // string category = 4;
  if (this->category().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.XLAInstruction.category");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_category(), target);
  }

  // .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis layout = 5;
  if (this->has_layout()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::layout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Node.XLAInstruction)
  return target;
}

size_t Node_XLAInstruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // string expression = 2;
  if (this->expression().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expression());
  }

  // string provenance = 3;
  if (this->provenance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provenance());
  }

  // string category = 4;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis layout = 5;
  if (this->has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node_XLAInstruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  const Node_XLAInstruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node_XLAInstruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Node.XLAInstruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Node.XLAInstruction)
    MergeFrom(*source);
  }
}

void Node_XLAInstruction::MergeFrom(const Node_XLAInstruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.expression().size() > 0) {

    expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  if (from.provenance().size() > 0) {

    provenance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provenance_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_layout()) {
    _internal_mutable_layout()->::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis::MergeFrom(from._internal_layout());
  }
}

void Node_XLAInstruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_XLAInstruction::CopyFrom(const Node_XLAInstruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Node.XLAInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_XLAInstruction::IsInitialized() const {
  return true;
}

void Node_XLAInstruction::InternalSwap(Node_XLAInstruction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expression_.Swap(&other->expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  provenance_.Swap(&other->provenance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layout_, other->layout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node_XLAInstruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::tensorflow::profiler::op_profile::_Node_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::tensorflow::profiler::op_profile::Metrics*>(
      ::tensorflow::profiler::op_profile::Metrics::internal_default_instance());
  ::tensorflow::profiler::op_profile::_Node_default_instance_.category_ = const_cast< ::tensorflow::profiler::op_profile::Node_InstructionCategory*>(
      ::tensorflow::profiler::op_profile::Node_InstructionCategory::internal_default_instance());
  ::tensorflow::profiler::op_profile::_Node_default_instance_.xla_ = const_cast< ::tensorflow::profiler::op_profile::Node_XLAInstruction*>(
      ::tensorflow::profiler::op_profile::Node_XLAInstruction::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::tensorflow::profiler::op_profile::Metrics& metrics(const Node* msg);
  static const ::tensorflow::profiler::op_profile::Node_InstructionCategory& category(const Node* msg);
  static const ::tensorflow::profiler::op_profile::Node_XLAInstruction& xla(const Node* msg);
};

const ::tensorflow::profiler::op_profile::Metrics&
Node::_Internal::metrics(const Node* msg) {
  return *msg->metrics_;
}
const ::tensorflow::profiler::op_profile::Node_InstructionCategory&
Node::_Internal::category(const Node* msg) {
  return *msg->contents_.category_;
}
const ::tensorflow::profiler::op_profile::Node_XLAInstruction&
Node::_Internal::xla(const Node* msg) {
  return *msg->contents_.xla_;
}
void Node::set_allocated_category(::tensorflow::profiler::op_profile::Node_InstructionCategory* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    set_has_category();
    contents_.category_ = category;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.op_profile.Node.category)
}
void Node::set_allocated_xla(::tensorflow::profiler::op_profile::Node_XLAInstruction* xla) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (xla) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      xla = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xla, submessage_arena);
    }
    set_has_xla();
    contents_.xla_ = xla;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.profiler.op_profile.Node.xla)
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::tensorflow::profiler::op_profile::Metrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  num_children_ = from.num_children_;
  clear_has_contents();
  switch (from.contents_case()) {
    case kCategory: {
      _internal_mutable_category()->::tensorflow::profiler::op_profile::Node_InstructionCategory::MergeFrom(from._internal_category());
      break;
    }
    case kXla: {
      _internal_mutable_xla()->::tensorflow::profiler::op_profile::Node_XLAInstruction::MergeFrom(from._internal_xla());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_children_) -
      reinterpret_cast<char*>(&metrics_)) + sizeof(num_children_));
  clear_has_contents();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metrics_;
  if (has_contents()) {
    clear_contents();
  }
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.profiler.op_profile.Node)
  switch (contents_case()) {
    case kCategory: {
      delete contents_.category_;
      break;
    }
    case kXla: {
      delete contents_.xla_;
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  num_children_ = 0;
  clear_contents();
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "tensorflow.profiler.op_profile.Node.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Metrics metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.op_profile.Node children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Node.InstructionCategory category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.profiler.op_profile.Node.XLAInstruction xla = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_xla(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_children = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.op_profile.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.profiler.op_profile.Metrics metrics = 2;
  if (this->has_metrics()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::metrics(this), target, stream);
  }

  // repeated .tensorflow.profiler.op_profile.Node children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_children(i), target, stream);
  }

  // .tensorflow.profiler.op_profile.Node.InstructionCategory category = 4;
  if (_internal_has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::category(this), target, stream);
  }

  // .tensorflow.profiler.op_profile.Node.XLAInstruction xla = 5;
  if (_internal_has_xla()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::xla(this), target, stream);
  }

  // int32 num_children = 6;
  if (this->num_children() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_children(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.op_profile.Node children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.profiler.op_profile.Metrics metrics = 2;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // int32 num_children = 6;
  if (this->num_children() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_children());
  }

  switch (contents_case()) {
    // .tensorflow.profiler.op_profile.Node.InstructionCategory category = 4;
    case kCategory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.category_);
      break;
    }
    // .tensorflow.profiler.op_profile.Node.XLAInstruction xla = 5;
    case kXla: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.xla_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::tensorflow::profiler::op_profile::Metrics::MergeFrom(from._internal_metrics());
  }
  if (from.num_children() != 0) {
    _internal_set_num_children(from._internal_num_children());
  }
  switch (from.contents_case()) {
    case kCategory: {
      _internal_mutable_category()->::tensorflow::profiler::op_profile::Node_InstructionCategory::MergeFrom(from._internal_category());
      break;
    }
    case kXla: {
      _internal_mutable_xla()->::tensorflow::profiler::op_profile::Node_XLAInstruction::MergeFrom(from._internal_xla());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metrics_, other->metrics_);
  swap(num_children_, other->num_children_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Metrics::InitAsDefaultInstance() {
}
class Metrics::_Internal {
 public:
};

Metrics::Metrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.profiler.op_profile.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_bytes_accessed_) -
    reinterpret_cast<char*>(&time_)) + sizeof(raw_bytes_accessed_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.op_profile.Metrics)
}

void Metrics::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_bytes_accessed_) -
      reinterpret_cast<char*>(&time_)) + sizeof(raw_bytes_accessed_));
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.op_profile.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
}

void Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metrics& Metrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metrics_tensorflow_2fcore_2fprofiler_2fop_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.op_profile.Metrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_bytes_accessed_) -
      reinterpret_cast<char*>(&time_)) + sizeof(raw_bytes_accessed_));
  _internal_metadata_.Clear();
}

const char* Metrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double flops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          flops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double memory_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          memory_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double raw_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          raw_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double raw_flops = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          raw_flops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double raw_bytes_accessed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          raw_bytes_accessed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.op_profile.Metrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // double flops = 2;
  if (!(this->flops() <= 0 && this->flops() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_flops(), target);
  }

  // double memory_bandwidth = 3;
  if (!(this->memory_bandwidth() <= 0 && this->memory_bandwidth() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_memory_bandwidth(), target);
  }

  // double raw_time = 11;
  if (!(this->raw_time() <= 0 && this->raw_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_raw_time(), target);
  }

  // double raw_flops = 12;
  if (!(this->raw_flops() <= 0 && this->raw_flops() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_raw_flops(), target);
  }

  // double raw_bytes_accessed = 13;
  if (!(this->raw_bytes_accessed() <= 0 && this->raw_bytes_accessed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_raw_bytes_accessed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.op_profile.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.op_profile.Metrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // double flops = 2;
  if (!(this->flops() <= 0 && this->flops() >= 0)) {
    total_size += 1 + 8;
  }

  // double memory_bandwidth = 3;
  if (!(this->memory_bandwidth() <= 0 && this->memory_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double raw_time = 11;
  if (!(this->raw_time() <= 0 && this->raw_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double raw_flops = 12;
  if (!(this->raw_flops() <= 0 && this->raw_flops() >= 0)) {
    total_size += 1 + 8;
  }

  // double raw_bytes_accessed = 13;
  if (!(this->raw_bytes_accessed() <= 0 && this->raw_bytes_accessed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.profiler.op_profile.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.profiler.op_profile.Metrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.profiler.op_profile.Metrics)
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.op_profile.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.flops() <= 0 && from.flops() >= 0)) {
    _internal_set_flops(from._internal_flops());
  }
  if (!(from.memory_bandwidth() <= 0 && from.memory_bandwidth() >= 0)) {
    _internal_set_memory_bandwidth(from._internal_memory_bandwidth());
  }
  if (!(from.raw_time() <= 0 && from.raw_time() >= 0)) {
    _internal_set_raw_time(from._internal_raw_time());
  }
  if (!(from.raw_flops() <= 0 && from.raw_flops() >= 0)) {
    _internal_set_raw_flops(from._internal_raw_flops());
  }
  if (!(from.raw_bytes_accessed() <= 0 && from.raw_bytes_accessed() >= 0)) {
    _internal_set_raw_bytes_accessed(from._internal_raw_bytes_accessed());
  }
}

void Metrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.profiler.op_profile.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.op_profile.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(flops_, other->flops_);
  swap(memory_bandwidth_, other->memory_bandwidth_);
  swap(raw_time_, other->raw_time_);
  swap(raw_flops_, other->raw_flops_);
  swap(raw_bytes_accessed_, other->raw_bytes_accessed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace op_profile
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Profile* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Profile >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Node_InstructionCategory* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Node_InstructionCategory >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Node_InstructionCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis_Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Node_XLAInstruction_LayoutAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Node_XLAInstruction* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Node_XLAInstruction >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Node_XLAInstruction >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Node* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Node >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::op_profile::Metrics* Arena::CreateMaybeMessage< ::tensorflow::profiler::op_profile::Metrics >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::profiler::op_profile::Metrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
