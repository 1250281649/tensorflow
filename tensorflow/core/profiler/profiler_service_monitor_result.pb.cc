// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profiler_service_monitor_result.proto

#include "tensorflow/core/profiler/profiler_service_monitor_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace tensorflow {
class ProfilerServiceMonitorResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerServiceMonitorResult> _instance;
} _ProfilerServiceMonitorResult_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ProfilerServiceMonitorResult_default_instance_;
    new (ptr) ::tensorflow::ProfilerServiceMonitorResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ProfilerServiceMonitorResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, response_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, device_idle_time_percent_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, matrix_unit_utilization_percent_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, step_time_ms_avg_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, step_time_ms_min_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, step_time_ms_max_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, infeed_percent_avg_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, infeed_percent_min_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfilerServiceMonitorResult, infeed_percent_max_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::ProfilerServiceMonitorResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ProfilerServiceMonitorResult_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>tensorflow/core/profiler/profiler_serv"
  "ice_monitor_result.proto\022\ntensorflow\"\255\003\n"
  "\034ProfilerServiceMonitorResult\022L\n\rrespons"
  "e_type\030\001 \001(\01625.tensorflow.ProfilerServic"
  "eMonitorResult.ResponseType\022 \n\030device_id"
  "le_time_percent\030\002 \001(\001\022\'\n\037matrix_unit_uti"
  "lization_percent\030\003 \001(\001\022\030\n\020step_time_ms_a"
  "vg\030\004 \001(\001\022\030\n\020step_time_ms_min\030\005 \001(\001\022\030\n\020st"
  "ep_time_ms_max\030\006 \001(\001\022\032\n\022infeed_percent_a"
  "vg\030\007 \001(\001\022\032\n\022infeed_percent_min\030\010 \001(\001\022\032\n\022"
  "infeed_percent_max\030\t \001(\001\"R\n\014ResponseType"
  "\022\020\n\014EMPTY_RESULT\020\000\022\r\n\tUTIL_ONLY\020\001\022\r\n\tUTI"
  "L_IDLE\020\002\022\022\n\016UTIL_IDLE_STEP\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_sccs[1] = {
  &scc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto, "tensorflow/core/profiler/profiler_service_monitor_result.proto", 516,
  &descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_once, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto, 1, file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilerServiceMonitorResult_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto[0];
}
bool ProfilerServiceMonitorResult_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::EMPTY_RESULT;
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::UTIL_ONLY;
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::UTIL_IDLE;
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::UTIL_IDLE_STEP;
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::ResponseType_MIN;
constexpr ProfilerServiceMonitorResult_ResponseType ProfilerServiceMonitorResult::ResponseType_MAX;
constexpr int ProfilerServiceMonitorResult::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ProfilerServiceMonitorResult::InitAsDefaultInstance() {
}
class ProfilerServiceMonitorResult::_Internal {
 public:
};

ProfilerServiceMonitorResult::ProfilerServiceMonitorResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ProfilerServiceMonitorResult)
}
ProfilerServiceMonitorResult::ProfilerServiceMonitorResult(const ProfilerServiceMonitorResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_idle_time_percent_, &from.device_idle_time_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_idle_time_percent_)) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfilerServiceMonitorResult)
}

void ProfilerServiceMonitorResult::SharedCtor() {
  ::memset(&device_idle_time_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_type_) -
      reinterpret_cast<char*>(&device_idle_time_percent_)) + sizeof(response_type_));
}

ProfilerServiceMonitorResult::~ProfilerServiceMonitorResult() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfilerServiceMonitorResult)
  SharedDtor();
}

void ProfilerServiceMonitorResult::SharedDtor() {
}

void ProfilerServiceMonitorResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerServiceMonitorResult& ProfilerServiceMonitorResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerServiceMonitorResult_tensorflow_2fcore_2fprofiler_2fprofiler_5fservice_5fmonitor_5fresult_2eproto.base);
  return *internal_default_instance();
}


void ProfilerServiceMonitorResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfilerServiceMonitorResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_idle_time_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_type_) -
      reinterpret_cast<char*>(&device_idle_time_percent_)) + sizeof(response_type_));
  _internal_metadata_.Clear();
}

const char* ProfilerServiceMonitorResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.ProfilerServiceMonitorResult.ResponseType response_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_response_type(static_cast<::tensorflow::ProfilerServiceMonitorResult_ResponseType>(val));
        } else goto handle_unusual;
        continue;
      // double device_idle_time_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          device_idle_time_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double matrix_unit_utilization_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          matrix_unit_utilization_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double step_time_ms_avg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          step_time_ms_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double step_time_ms_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          step_time_ms_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double step_time_ms_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          step_time_ms_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double infeed_percent_avg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          infeed_percent_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double infeed_percent_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          infeed_percent_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double infeed_percent_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          infeed_percent_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerServiceMonitorResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfilerServiceMonitorResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ProfilerServiceMonitorResult.ResponseType response_type = 1;
  if (this->response_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response_type(), target);
  }

  // double device_idle_time_percent = 2;
  if (!(this->device_idle_time_percent() <= 0 && this->device_idle_time_percent() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_device_idle_time_percent(), target);
  }

  // double matrix_unit_utilization_percent = 3;
  if (!(this->matrix_unit_utilization_percent() <= 0 && this->matrix_unit_utilization_percent() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_matrix_unit_utilization_percent(), target);
  }

  // double step_time_ms_avg = 4;
  if (!(this->step_time_ms_avg() <= 0 && this->step_time_ms_avg() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_time_ms_avg(), target);
  }

  // double step_time_ms_min = 5;
  if (!(this->step_time_ms_min() <= 0 && this->step_time_ms_min() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_step_time_ms_min(), target);
  }

  // double step_time_ms_max = 6;
  if (!(this->step_time_ms_max() <= 0 && this->step_time_ms_max() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_step_time_ms_max(), target);
  }

  // double infeed_percent_avg = 7;
  if (!(this->infeed_percent_avg() <= 0 && this->infeed_percent_avg() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_infeed_percent_avg(), target);
  }

  // double infeed_percent_min = 8;
  if (!(this->infeed_percent_min() <= 0 && this->infeed_percent_min() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_infeed_percent_min(), target);
  }

  // double infeed_percent_max = 9;
  if (!(this->infeed_percent_max() <= 0 && this->infeed_percent_max() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_infeed_percent_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfilerServiceMonitorResult)
  return target;
}

size_t ProfilerServiceMonitorResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfilerServiceMonitorResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double device_idle_time_percent = 2;
  if (!(this->device_idle_time_percent() <= 0 && this->device_idle_time_percent() >= 0)) {
    total_size += 1 + 8;
  }

  // double matrix_unit_utilization_percent = 3;
  if (!(this->matrix_unit_utilization_percent() <= 0 && this->matrix_unit_utilization_percent() >= 0)) {
    total_size += 1 + 8;
  }

  // double step_time_ms_avg = 4;
  if (!(this->step_time_ms_avg() <= 0 && this->step_time_ms_avg() >= 0)) {
    total_size += 1 + 8;
  }

  // double step_time_ms_min = 5;
  if (!(this->step_time_ms_min() <= 0 && this->step_time_ms_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double step_time_ms_max = 6;
  if (!(this->step_time_ms_max() <= 0 && this->step_time_ms_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double infeed_percent_avg = 7;
  if (!(this->infeed_percent_avg() <= 0 && this->infeed_percent_avg() >= 0)) {
    total_size += 1 + 8;
  }

  // double infeed_percent_min = 8;
  if (!(this->infeed_percent_min() <= 0 && this->infeed_percent_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double infeed_percent_max = 9;
  if (!(this->infeed_percent_max() <= 0 && this->infeed_percent_max() >= 0)) {
    total_size += 1 + 8;
  }

  // .tensorflow.ProfilerServiceMonitorResult.ResponseType response_type = 1;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerServiceMonitorResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ProfilerServiceMonitorResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerServiceMonitorResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerServiceMonitorResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ProfilerServiceMonitorResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ProfilerServiceMonitorResult)
    MergeFrom(*source);
  }
}

void ProfilerServiceMonitorResult::MergeFrom(const ProfilerServiceMonitorResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfilerServiceMonitorResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.device_idle_time_percent() <= 0 && from.device_idle_time_percent() >= 0)) {
    _internal_set_device_idle_time_percent(from._internal_device_idle_time_percent());
  }
  if (!(from.matrix_unit_utilization_percent() <= 0 && from.matrix_unit_utilization_percent() >= 0)) {
    _internal_set_matrix_unit_utilization_percent(from._internal_matrix_unit_utilization_percent());
  }
  if (!(from.step_time_ms_avg() <= 0 && from.step_time_ms_avg() >= 0)) {
    _internal_set_step_time_ms_avg(from._internal_step_time_ms_avg());
  }
  if (!(from.step_time_ms_min() <= 0 && from.step_time_ms_min() >= 0)) {
    _internal_set_step_time_ms_min(from._internal_step_time_ms_min());
  }
  if (!(from.step_time_ms_max() <= 0 && from.step_time_ms_max() >= 0)) {
    _internal_set_step_time_ms_max(from._internal_step_time_ms_max());
  }
  if (!(from.infeed_percent_avg() <= 0 && from.infeed_percent_avg() >= 0)) {
    _internal_set_infeed_percent_avg(from._internal_infeed_percent_avg());
  }
  if (!(from.infeed_percent_min() <= 0 && from.infeed_percent_min() >= 0)) {
    _internal_set_infeed_percent_min(from._internal_infeed_percent_min());
  }
  if (!(from.infeed_percent_max() <= 0 && from.infeed_percent_max() >= 0)) {
    _internal_set_infeed_percent_max(from._internal_infeed_percent_max());
  }
  if (from.response_type() != 0) {
    _internal_set_response_type(from._internal_response_type());
  }
}

void ProfilerServiceMonitorResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ProfilerServiceMonitorResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerServiceMonitorResult::CopyFrom(const ProfilerServiceMonitorResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfilerServiceMonitorResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerServiceMonitorResult::IsInitialized() const {
  return true;
}

void ProfilerServiceMonitorResult::InternalSwap(ProfilerServiceMonitorResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(device_idle_time_percent_, other->device_idle_time_percent_);
  swap(matrix_unit_utilization_percent_, other->matrix_unit_utilization_percent_);
  swap(step_time_ms_avg_, other->step_time_ms_avg_);
  swap(step_time_ms_min_, other->step_time_ms_min_);
  swap(step_time_ms_max_, other->step_time_ms_max_);
  swap(infeed_percent_avg_, other->infeed_percent_avg_);
  swap(infeed_percent_min_, other->infeed_percent_min_);
  swap(infeed_percent_max_, other->infeed_percent_max_);
  swap(response_type_, other->response_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerServiceMonitorResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ProfilerServiceMonitorResult* Arena::CreateMaybeMessage< ::tensorflow::ProfilerServiceMonitorResult >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ProfilerServiceMonitorResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
