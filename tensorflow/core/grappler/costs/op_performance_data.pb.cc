// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/grappler/costs/op_performance_data.proto

#include "tensorflow/core/grappler/costs/op_performance_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceProperties_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
namespace tensorflow {
class SessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionInfo> _instance;
} _SessionInfo_default_instance_;
class OpInfo_AttrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpInfo_AttrEntry_DoNotUse> _instance;
} _OpInfo_AttrEntry_DoNotUse_default_instance_;
class OpInfo_TensorPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpInfo_TensorProperties> _instance;
} _OpInfo_TensorProperties_default_instance_;
class OpInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpInfo> _instance;
} _OpInfo_default_instance_;
class NormalDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalDistribution> _instance;
} _NormalDistribution_default_instance_;
class LogNormalDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogNormalDistribution> _instance;
} _LogNormalDistribution_default_instance_;
class OpPerformance_OpMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpPerformance_OpMemory> _instance;
} _OpPerformance_OpMemory_default_instance_;
class OpPerformanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpPerformance> _instance;
  const ::tensorflow::NormalDistribution* execution_time_normal_;
  const ::tensorflow::LogNormalDistribution* execution_time_log_normal_;
} _OpPerformance_default_instance_;
class OpPerformanceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpPerformanceList> _instance;
} _OpPerformanceList_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LogNormalDistribution_default_instance_;
    new (ptr) ::tensorflow::LogNormalDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LogNormalDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_NormalDistribution_default_instance_;
    new (ptr) ::tensorflow::NormalDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::NormalDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpInfo_default_instance_;
    new (ptr) ::tensorflow::OpInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::OpInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {
      &scc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_DeviceProperties_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto.base,
      &scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpInfo_AttrEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::OpInfo_AttrEntry_DoNotUse();
  }
  ::tensorflow::OpInfo_AttrEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {
      &scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpInfo_TensorProperties_default_instance_;
    new (ptr) ::tensorflow::OpInfo_TensorProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::OpInfo_TensorProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpPerformance_default_instance_;
    new (ptr) ::tensorflow::OpPerformance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::OpPerformance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {
      &scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
      &scc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpPerformance_OpMemory_default_instance_;
    new (ptr) ::tensorflow::OpPerformance_OpMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::OpPerformance_OpMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_OpPerformanceList_default_instance_;
    new (ptr) ::tensorflow::OpPerformanceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::OpPerformanceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {
      &scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SessionInfo_default_instance_;
    new (ptr) ::tensorflow::SessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SessionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionInfo, intra_op_parallelism_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_AttrEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_AttrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_AttrEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_AttrEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_TensorProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_TensorProperties, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_TensorProperties, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo_TensorProperties, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, attr_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpInfo, session_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NormalDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NormalDistribution, mu_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NormalDistribution, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogNormalDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogNormalDistribution, mu_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogNormalDistribution, sigma_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, output_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, temp_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, persistent_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, device_temp_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance_OpMemory, device_persistent_memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, session_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, temporary_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, compute_cost_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, compute_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, memory_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, compute_efficiency_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, memory_efficiency_),
  offsetof(::tensorflow::OpPerformanceDefaultTypeInternal, execution_time_normal_),
  offsetof(::tensorflow::OpPerformanceDefaultTypeInternal, execution_time_log_normal_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, op_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformance, execution_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformanceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::OpPerformanceList, op_performance_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::SessionInfo)},
  { 6, 13, sizeof(::tensorflow::OpInfo_AttrEntry_DoNotUse)},
  { 15, -1, sizeof(::tensorflow::OpInfo_TensorProperties)},
  { 23, -1, sizeof(::tensorflow::OpInfo)},
  { 34, -1, sizeof(::tensorflow::NormalDistribution)},
  { 41, -1, sizeof(::tensorflow::LogNormalDistribution)},
  { 48, -1, sizeof(::tensorflow::OpPerformance_OpMemory)},
  { 58, -1, sizeof(::tensorflow::OpPerformance)},
  { 76, -1, sizeof(::tensorflow::OpPerformanceList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpInfo_AttrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpInfo_TensorProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NormalDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LogNormalDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpPerformance_OpMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpPerformance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_OpPerformanceList_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8tensorflow/core/grappler/costs/op_perf"
  "ormance_data.proto\022\ntensorflow\032&tensorfl"
  "ow/core/framework/tensor.proto\032,tensorfl"
  "ow/core/framework/tensor_shape.proto\032%te"
  "nsorflow/core/framework/types.proto\032*ten"
  "sorflow/core/framework/attr_value.proto\032"
  "0tensorflow/core/protobuf/device_propert"
  "ies.proto\"+\n\013SessionInfo\022\034\n\024intra_op_par"
  "allelism\030\001 \001(\003\"\333\003\n\006OpInfo\022\n\n\002op\030\001 \001(\t\022*\n"
  "\004attr\030\002 \003(\0132\034.tensorflow.OpInfo.AttrEntr"
  "y\0223\n\006inputs\030\003 \003(\0132#.tensorflow.OpInfo.Te"
  "nsorProperties\0224\n\007outputs\030\005 \003(\0132#.tensor"
  "flow.OpInfo.TensorProperties\022,\n\006device\030\004"
  " \001(\0132\034.tensorflow.DeviceProperties\022-\n\014se"
  "ssion_info\030\006 \001(\0132\027.tensorflow.SessionInf"
  "o\032B\n\tAttrEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001"
  "(\0132\025.tensorflow.AttrValue:\0028\001\032\214\001\n\020Tensor"
  "Properties\022#\n\005dtype\030\001 \001(\0162\024.tensorflow.D"
  "ataType\022+\n\005shape\030\002 \001(\0132\034.tensorflow.Tens"
  "orShapeProto\022&\n\005value\030\003 \001(\0132\027.tensorflow"
  ".TensorProto\"/\n\022NormalDistribution\022\n\n\002mu"
  "\030\001 \001(\001\022\r\n\005sigma\030\002 \001(\001\"2\n\025LogNormalDistri"
  "bution\022\n\n\002mu\030\001 \001(\001\022\r\n\005sigma\030\002 \001(\001\"\363\004\n\rOp"
  "Performance\022\036\n\002op\030\001 \001(\0132\022.tensorflow.OpI"
  "nfo\0221\n\014session_info\030\014 \001(\0132\027.tensorflow.S"
  "essionInfoB\002\030\001\022\014\n\004node\030\005 \001(\t\022\035\n\025temporar"
  "y_memory_size\030\002 \001(\003\022\024\n\014compute_cost\030\003 \001("
  "\003\022\024\n\014compute_time\030\006 \001(\003\022\023\n\013memory_time\030\007"
  " \001(\003\022\032\n\022compute_efficiency\030\004 \001(\001\022\031\n\021memo"
  "ry_efficiency\030\010 \001(\001\022\?\n\025execution_time_no"
  "rmal\030\n \001(\0132\036.tensorflow.NormalDistributi"
  "onH\000\022F\n\031execution_time_log_normal\030\013 \001(\0132"
  "!.tensorflow.LogNormalDistributionH\000\0225\n\t"
  "op_memory\030\t \001(\0132\".tensorflow.OpPerforman"
  "ce.OpMemory\032\227\001\n\010OpMemory\022\025\n\routput_memor"
  "y\030\001 \003(\003\022\023\n\013temp_memory\030\002 \001(\003\022\031\n\021persiste"
  "nt_memory\030\004 \001(\003\022\036\n\022device_temp_memory\030\003 "
  "\001(\003B\002\030\001\022$\n\030device_persistent_memory\030\005 \001("
  "\003B\002\030\001B\020\n\016execution_time\"F\n\021OpPerformance"
  "List\0221\n\016op_performance\030\001 \003(\0132\031.tensorflo"
  "w.OpPerformanceB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_deps[5] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_sccs[9] = {
  &scc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpInfo_AttrEntry_DoNotUse_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
  &scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto, "tensorflow/core/grappler/costs/op_performance_data.proto", 1628,
  &descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once, descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto, 9, file_level_enum_descriptors_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto), true);
namespace tensorflow {

// ===================================================================

void SessionInfo::InitAsDefaultInstance() {
}
class SessionInfo::_Internal {
 public:
};

SessionInfo::SessionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SessionInfo)
}
SessionInfo::SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intra_op_parallelism_ = from.intra_op_parallelism_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionInfo)
}

void SessionInfo::SharedCtor() {
  intra_op_parallelism_ = PROTOBUF_LONGLONG(0);
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SessionInfo::ArenaDtor(void* object) {
  SessionInfo* _this = reinterpret_cast< SessionInfo* >(object);
  (void)_this;
}
void SessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionInfo& SessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intra_op_parallelism_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 intra_op_parallelism = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          intra_op_parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 intra_op_parallelism = 1;
  if (this->intra_op_parallelism() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_intra_op_parallelism(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionInfo)
  return target;
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 intra_op_parallelism = 1;
  if (this->intra_op_parallelism() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intra_op_parallelism());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SessionInfo)
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intra_op_parallelism() != 0) {
    _internal_set_intra_op_parallelism(from._internal_intra_op_parallelism());
  }
}

void SessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  return true;
}

void SessionInfo::InternalSwap(SessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(intra_op_parallelism_, other->intra_op_parallelism_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpInfo_AttrEntry_DoNotUse::OpInfo_AttrEntry_DoNotUse() {}
OpInfo_AttrEntry_DoNotUse::OpInfo_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpInfo_AttrEntry_DoNotUse::MergeFrom(const OpInfo_AttrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpInfo_AttrEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpInfo_AttrEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpInfo_TensorProperties::InitAsDefaultInstance() {
  ::tensorflow::_OpInfo_TensorProperties_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  ::tensorflow::_OpInfo_TensorProperties_default_instance_._instance.get_mutable()->value_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class OpInfo_TensorProperties::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const OpInfo_TensorProperties* msg);
  static const ::tensorflow::TensorProto& value(const OpInfo_TensorProperties* msg);
};

const ::tensorflow::TensorShapeProto&
OpInfo_TensorProperties::_Internal::shape(const OpInfo_TensorProperties* msg) {
  return *msg->shape_;
}
const ::tensorflow::TensorProto&
OpInfo_TensorProperties::_Internal::value(const OpInfo_TensorProperties* msg) {
  return *msg->value_;
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == nullptr) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.shape)
}
void OpInfo_TensorProperties::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_value(
    ::tensorflow::TensorProto* value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.value)
}
void OpInfo_TensorProperties::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
OpInfo_TensorProperties::OpInfo_TensorProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo.TensorProperties)
}
OpInfo_TensorProperties::OpInfo_TensorProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo.TensorProperties)
}
OpInfo_TensorProperties::OpInfo_TensorProperties(const OpInfo_TensorProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::tensorflow::TensorProto(*from.value_);
  } else {
    value_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo.TensorProperties)
}

void OpInfo_TensorProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

OpInfo_TensorProperties::~OpInfo_TensorProperties() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo.TensorProperties)
  SharedDtor();
}

void OpInfo_TensorProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete value_;
}

void OpInfo_TensorProperties::ArenaDtor(void* object) {
  OpInfo_TensorProperties* _this = reinterpret_cast< OpInfo_TensorProperties* >(object);
  (void)_this;
}
void OpInfo_TensorProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpInfo_TensorProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpInfo_TensorProperties& OpInfo_TensorProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpInfo_TensorProperties_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpInfo_TensorProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo.TensorProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

const char* OpInfo_TensorProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpInfo_TensorProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo.TensorProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::shape(this), target, stream);
  }

  // .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo.TensorProperties)
  return target;
}

size_t OpInfo_TensorProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo.TensorProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInfo_TensorProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo_TensorProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpInfo_TensorProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo.TensorProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo.TensorProperties)
    MergeFrom(*source);
  }
}

void OpInfo_TensorProperties::MergeFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::tensorflow::TensorProto::MergeFrom(from._internal_value());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void OpInfo_TensorProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo_TensorProperties::CopyFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo_TensorProperties::IsInitialized() const {
  return true;
}

void OpInfo_TensorProperties::InternalSwap(OpInfo_TensorProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shape_, other->shape_);
  swap(value_, other->value_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpInfo_TensorProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpInfo::InitAsDefaultInstance() {
  ::tensorflow::_OpInfo_default_instance_._instance.get_mutable()->device_ = const_cast< ::tensorflow::DeviceProperties*>(
      ::tensorflow::DeviceProperties::internal_default_instance());
  ::tensorflow::_OpInfo_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::tensorflow::SessionInfo*>(
      ::tensorflow::SessionInfo::internal_default_instance());
}
class OpInfo::_Internal {
 public:
  static const ::tensorflow::DeviceProperties& device(const OpInfo* msg);
  static const ::tensorflow::SessionInfo& session_info(const OpInfo* msg);
};

const ::tensorflow::DeviceProperties&
OpInfo::_Internal::device(const OpInfo* msg) {
  return *msg->device_;
}
const ::tensorflow::SessionInfo&
OpInfo::_Internal::session_info(const OpInfo* msg) {
  return *msg->session_info_;
}
void OpInfo::clear_attr() {
  attr_.Clear();
}
void OpInfo::unsafe_arena_set_allocated_device(
    ::tensorflow::DeviceProperties* device) {
  if (GetArenaNoVirtual() == nullptr) {
    delete device_;
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.device)
}
void OpInfo::clear_device() {
  if (GetArenaNoVirtual() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
void OpInfo::unsafe_arena_set_allocated_session_info(
    ::tensorflow::SessionInfo* session_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete session_info_;
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.session_info)
}
OpInfo::OpInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo)
}
OpInfo::OpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  attr_(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo)
}
OpInfo::OpInfo(const OpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op().empty()) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_device()) {
    device_ = new ::tensorflow::DeviceProperties(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_session_info()) {
    session_info_ = new ::tensorflow::SessionInfo(*from.session_info_);
  } else {
    session_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo)
}

void OpInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_info_) -
      reinterpret_cast<char*>(&device_)) + sizeof(session_info_));
}

OpInfo::~OpInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo)
  SharedDtor();
}

void OpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete session_info_;
}

void OpInfo::ArenaDtor(void* object) {
  OpInfo* _this = reinterpret_cast< OpInfo* >(object);
  (void)_this;
}
void OpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpInfo& OpInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpInfo_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && session_info_ != nullptr) {
    delete session_info_;
  }
  session_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_op(), ptr, ctx, "tensorflow.OpInfo.op");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceProperties device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.SessionInfo session_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpInfo.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  if (!this->_internal_attr().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.OpInfo.AttrEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpInfo_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_attr().begin();
          it != this->_internal_attr().end(); ++it) {
        target = OpInfo_AttrEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_inputs(i), target, stream);
  }

  // .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::device(this), target, stream);
  }

  // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_outputs(i), target, stream);
  }

  // .tensorflow.SessionInfo session_info = 6;
  if (this->has_session_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::session_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo)
  return target;
}

size_t OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.AttrValue> attr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->_internal_attr().begin();
      it != this->_internal_attr().end(); ++it) {
    total_size += OpInfo_AttrEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string op = 1;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .tensorflow.SessionInfo session_info = 6;
  if (this->has_session_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo)
    MergeFrom(*source);
  }
}

void OpInfo::MergeFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.op().size() > 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::tensorflow::DeviceProperties::MergeFrom(from._internal_device());
  }
  if (from.has_session_info()) {
    _internal_mutable_session_info()->::tensorflow::SessionInfo::MergeFrom(from._internal_session_info());
  }
}

void OpInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo::CopyFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo::IsInitialized() const {
  return true;
}

void OpInfo::InternalSwap(OpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attr_.Swap(&other->attr_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  op_.Swap(&other->op_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_, other->device_);
  swap(session_info_, other->session_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalDistribution::InitAsDefaultInstance() {
}
class NormalDistribution::_Internal {
 public:
};

NormalDistribution::NormalDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NormalDistribution)
}
NormalDistribution::NormalDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NormalDistribution)
}
NormalDistribution::NormalDistribution(const NormalDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.NormalDistribution)
}

void NormalDistribution::SharedCtor() {
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
}

NormalDistribution::~NormalDistribution() {
  // @@protoc_insertion_point(destructor:tensorflow.NormalDistribution)
  SharedDtor();
}

void NormalDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void NormalDistribution::ArenaDtor(void* object) {
  NormalDistribution* _this = reinterpret_cast< NormalDistribution* >(object);
  (void)_this;
}
void NormalDistribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalDistribution& NormalDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void NormalDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

const char* NormalDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sigma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalDistribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mu(), target);
  }

  // double sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NormalDistribution)
  return target;
}

size_t NormalDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NormalDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mu = 1;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    total_size += 1 + 8;
  }

  // double sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NormalDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NormalDistribution)
    MergeFrom(*source);
  }
}

void NormalDistribution::MergeFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mu() <= 0 && from.mu() >= 0)) {
    _internal_set_mu(from._internal_mu());
  }
  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void NormalDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalDistribution::CopyFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalDistribution::IsInitialized() const {
  return true;
}

void NormalDistribution::InternalSwap(NormalDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mu_, other->mu_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogNormalDistribution::InitAsDefaultInstance() {
}
class LogNormalDistribution::_Internal {
 public:
};

LogNormalDistribution::LogNormalDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LogNormalDistribution)
}
LogNormalDistribution::LogNormalDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LogNormalDistribution)
}
LogNormalDistribution::LogNormalDistribution(const LogNormalDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.LogNormalDistribution)
}

void LogNormalDistribution::SharedCtor() {
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
}

LogNormalDistribution::~LogNormalDistribution() {
  // @@protoc_insertion_point(destructor:tensorflow.LogNormalDistribution)
  SharedDtor();
}

void LogNormalDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void LogNormalDistribution::ArenaDtor(void* object) {
  LogNormalDistribution* _this = reinterpret_cast< LogNormalDistribution* >(object);
  (void)_this;
}
void LogNormalDistribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogNormalDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogNormalDistribution& LogNormalDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogNormalDistribution_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LogNormalDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LogNormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

const char* LogNormalDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sigma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogNormalDistribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LogNormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mu(), target);
  }

  // double sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sigma(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LogNormalDistribution)
  return target;
}

size_t LogNormalDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LogNormalDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mu = 1;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    total_size += 1 + 8;
  }

  // double sigma = 2;
  if (!(this->sigma() <= 0 && this->sigma() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogNormalDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LogNormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LogNormalDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogNormalDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LogNormalDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LogNormalDistribution)
    MergeFrom(*source);
  }
}

void LogNormalDistribution::MergeFrom(const LogNormalDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LogNormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mu() <= 0 && from.mu() >= 0)) {
    _internal_set_mu(from._internal_mu());
  }
  if (!(from.sigma() <= 0 && from.sigma() >= 0)) {
    _internal_set_sigma(from._internal_sigma());
  }
}

void LogNormalDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LogNormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogNormalDistribution::CopyFrom(const LogNormalDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LogNormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogNormalDistribution::IsInitialized() const {
  return true;
}

void LogNormalDistribution::InternalSwap(LogNormalDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mu_, other->mu_);
  swap(sigma_, other->sigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogNormalDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpPerformance_OpMemory::InitAsDefaultInstance() {
}
class OpPerformance_OpMemory::_Internal {
 public:
};

OpPerformance_OpMemory::OpPerformance_OpMemory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance.OpMemory)
}
OpPerformance_OpMemory::OpPerformance_OpMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  output_memory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance.OpMemory)
}
OpPerformance_OpMemory::OpPerformance_OpMemory(const OpPerformance_OpMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      output_memory_(from.output_memory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&temp_memory_, &from.temp_memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_persistent_memory_) -
    reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance.OpMemory)
}

void OpPerformance_OpMemory::SharedCtor() {
  ::memset(&temp_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_) -
      reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
}

OpPerformance_OpMemory::~OpPerformance_OpMemory() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance.OpMemory)
  SharedDtor();
}

void OpPerformance_OpMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void OpPerformance_OpMemory::ArenaDtor(void* object) {
  OpPerformance_OpMemory* _this = reinterpret_cast< OpPerformance_OpMemory* >(object);
  (void)_this;
}
void OpPerformance_OpMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpPerformance_OpMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpPerformance_OpMemory& OpPerformance_OpMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpPerformance_OpMemory_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpPerformance_OpMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance.OpMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_memory_.Clear();
  ::memset(&temp_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_) -
      reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
  _internal_metadata_.Clear();
}

const char* OpPerformance_OpMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 output_memory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_memory(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_output_memory(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 temp_memory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          temp_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 device_temp_memory = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          device_temp_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 persistent_memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          persistent_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 device_persistent_memory = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          device_persistent_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpPerformance_OpMemory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance.OpMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 output_memory = 1;
  {
    int byte_size = _output_memory_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_output_memory(), byte_size, target);
    }
  }

  // int64 temp_memory = 2;
  if (this->temp_memory() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_temp_memory(), target);
  }

  // int64 device_temp_memory = 3 [deprecated = true];
  if (this->device_temp_memory() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_device_temp_memory(), target);
  }

  // int64 persistent_memory = 4;
  if (this->persistent_memory() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_persistent_memory(), target);
  }

  // int64 device_persistent_memory = 5 [deprecated = true];
  if (this->device_persistent_memory() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_device_persistent_memory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance.OpMemory)
  return target;
}

size_t OpPerformance_OpMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance.OpMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 output_memory = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->output_memory_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_memory_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 temp_memory = 2;
  if (this->temp_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_temp_memory());
  }

  // int64 device_temp_memory = 3 [deprecated = true];
  if (this->device_temp_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_device_temp_memory());
  }

  // int64 persistent_memory = 4;
  if (this->persistent_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_persistent_memory());
  }

  // int64 device_persistent_memory = 5 [deprecated = true];
  if (this->device_persistent_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_device_persistent_memory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpPerformance_OpMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance.OpMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformance_OpMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpPerformance_OpMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance.OpMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance.OpMemory)
    MergeFrom(*source);
  }
}

void OpPerformance_OpMemory::MergeFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance.OpMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_memory_.MergeFrom(from.output_memory_);
  if (from.temp_memory() != 0) {
    _internal_set_temp_memory(from._internal_temp_memory());
  }
  if (from.device_temp_memory() != 0) {
    _internal_set_device_temp_memory(from._internal_device_temp_memory());
  }
  if (from.persistent_memory() != 0) {
    _internal_set_persistent_memory(from._internal_persistent_memory());
  }
  if (from.device_persistent_memory() != 0) {
    _internal_set_device_persistent_memory(from._internal_device_persistent_memory());
  }
}

void OpPerformance_OpMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance_OpMemory::CopyFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformance_OpMemory::IsInitialized() const {
  return true;
}

void OpPerformance_OpMemory::InternalSwap(OpPerformance_OpMemory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_memory_.InternalSwap(&other->output_memory_);
  swap(temp_memory_, other->temp_memory_);
  swap(device_temp_memory_, other->device_temp_memory_);
  swap(persistent_memory_, other->persistent_memory_);
  swap(device_persistent_memory_, other->device_persistent_memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpPerformance_OpMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpPerformance::InitAsDefaultInstance() {
  ::tensorflow::_OpPerformance_default_instance_._instance.get_mutable()->op_ = const_cast< ::tensorflow::OpInfo*>(
      ::tensorflow::OpInfo::internal_default_instance());
  ::tensorflow::_OpPerformance_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::tensorflow::SessionInfo*>(
      ::tensorflow::SessionInfo::internal_default_instance());
  ::tensorflow::_OpPerformance_default_instance_.execution_time_normal_ = const_cast< ::tensorflow::NormalDistribution*>(
      ::tensorflow::NormalDistribution::internal_default_instance());
  ::tensorflow::_OpPerformance_default_instance_.execution_time_log_normal_ = const_cast< ::tensorflow::LogNormalDistribution*>(
      ::tensorflow::LogNormalDistribution::internal_default_instance());
  ::tensorflow::_OpPerformance_default_instance_._instance.get_mutable()->op_memory_ = const_cast< ::tensorflow::OpPerformance_OpMemory*>(
      ::tensorflow::OpPerformance_OpMemory::internal_default_instance());
}
class OpPerformance::_Internal {
 public:
  static const ::tensorflow::OpInfo& op(const OpPerformance* msg);
  static const ::tensorflow::SessionInfo& session_info(const OpPerformance* msg);
  static const ::tensorflow::NormalDistribution& execution_time_normal(const OpPerformance* msg);
  static const ::tensorflow::LogNormalDistribution& execution_time_log_normal(const OpPerformance* msg);
  static const ::tensorflow::OpPerformance_OpMemory& op_memory(const OpPerformance* msg);
};

const ::tensorflow::OpInfo&
OpPerformance::_Internal::op(const OpPerformance* msg) {
  return *msg->op_;
}
const ::tensorflow::SessionInfo&
OpPerformance::_Internal::session_info(const OpPerformance* msg) {
  return *msg->session_info_;
}
const ::tensorflow::NormalDistribution&
OpPerformance::_Internal::execution_time_normal(const OpPerformance* msg) {
  return *msg->execution_time_.execution_time_normal_;
}
const ::tensorflow::LogNormalDistribution&
OpPerformance::_Internal::execution_time_log_normal(const OpPerformance* msg) {
  return *msg->execution_time_.execution_time_log_normal_;
}
const ::tensorflow::OpPerformance_OpMemory&
OpPerformance::_Internal::op_memory(const OpPerformance* msg) {
  return *msg->op_memory_;
}
void OpPerformance::unsafe_arena_set_allocated_op(
    ::tensorflow::OpInfo* op) {
  if (GetArenaNoVirtual() == nullptr) {
    delete op_;
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op)
}
void OpPerformance::unsafe_arena_set_allocated_session_info(
    ::tensorflow::SessionInfo* session_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete session_info_;
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.session_info)
}
void OpPerformance::set_allocated_execution_time_normal(::tensorflow::NormalDistribution* execution_time_normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_execution_time();
  if (execution_time_normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_time_normal);
    if (message_arena != submessage_arena) {
      execution_time_normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_time_normal, submessage_arena);
    }
    set_has_execution_time_normal();
    execution_time_.execution_time_normal_ = execution_time_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.execution_time_normal)
}
void OpPerformance::set_allocated_execution_time_log_normal(::tensorflow::LogNormalDistribution* execution_time_log_normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_execution_time();
  if (execution_time_log_normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_time_log_normal);
    if (message_arena != submessage_arena) {
      execution_time_log_normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_time_log_normal, submessage_arena);
    }
    set_has_execution_time_log_normal();
    execution_time_.execution_time_log_normal_ = execution_time_log_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.execution_time_log_normal)
}
void OpPerformance::unsafe_arena_set_allocated_op_memory(
    ::tensorflow::OpPerformance_OpMemory* op_memory) {
  if (GetArenaNoVirtual() == nullptr) {
    delete op_memory_;
  }
  op_memory_ = op_memory;
  if (op_memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op_memory)
}
OpPerformance::OpPerformance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance)
}
OpPerformance::OpPerformance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance)
}
OpPerformance::OpPerformance(const OpPerformance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node().empty()) {
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_op()) {
    op_ = new ::tensorflow::OpInfo(*from.op_);
  } else {
    op_ = nullptr;
  }
  if (from._internal_has_op_memory()) {
    op_memory_ = new ::tensorflow::OpPerformance_OpMemory(*from.op_memory_);
  } else {
    op_memory_ = nullptr;
  }
  if (from._internal_has_session_info()) {
    session_info_ = new ::tensorflow::SessionInfo(*from.session_info_);
  } else {
    session_info_ = nullptr;
  }
  ::memcpy(&temporary_memory_size_, &from.temporary_memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_efficiency_) -
    reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(memory_efficiency_));
  clear_has_execution_time();
  switch (from.execution_time_case()) {
    case kExecutionTimeNormal: {
      _internal_mutable_execution_time_normal()->::tensorflow::NormalDistribution::MergeFrom(from._internal_execution_time_normal());
      break;
    }
    case kExecutionTimeLogNormal: {
      _internal_mutable_execution_time_log_normal()->::tensorflow::LogNormalDistribution::MergeFrom(from._internal_execution_time_log_normal());
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance)
}

void OpPerformance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_efficiency_) -
      reinterpret_cast<char*>(&op_)) + sizeof(memory_efficiency_));
  clear_has_execution_time();
}

OpPerformance::~OpPerformance() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance)
  SharedDtor();
}

void OpPerformance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete op_;
  if (this != internal_default_instance()) delete op_memory_;
  if (this != internal_default_instance()) delete session_info_;
  if (has_execution_time()) {
    clear_execution_time();
  }
}

void OpPerformance::ArenaDtor(void* object) {
  OpPerformance* _this = reinterpret_cast< OpPerformance* >(object);
  (void)_this;
}
void OpPerformance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpPerformance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpPerformance& OpPerformance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpPerformance_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpPerformance::clear_execution_time() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.OpPerformance)
  switch (execution_time_case()) {
    case kExecutionTimeNormal: {
      if (GetArenaNoVirtual() == nullptr) {
        delete execution_time_.execution_time_normal_;
      }
      break;
    }
    case kExecutionTimeLogNormal: {
      if (GetArenaNoVirtual() == nullptr) {
        delete execution_time_.execution_time_log_normal_;
      }
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXECUTION_TIME_NOT_SET;
}


void OpPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && op_memory_ != nullptr) {
    delete op_memory_;
  }
  op_memory_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && session_info_ != nullptr) {
    delete session_info_;
  }
  session_info_ = nullptr;
  ::memset(&temporary_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_efficiency_) -
      reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(memory_efficiency_));
  clear_execution_time();
  _internal_metadata_.Clear();
}

const char* OpPerformance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.OpInfo op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 temporary_memory_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          temporary_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compute_cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compute_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double compute_efficiency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          compute_efficiency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_node(), ptr, ctx, "tensorflow.OpPerformance.node");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compute_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          memory_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double memory_efficiency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          memory_efficiency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tensorflow.OpPerformance.OpMemory op_memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.NormalDistribution execution_time_normal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_time_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_time_log_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpPerformance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::op(this), target, stream);
  }

  // int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_temporary_memory_size(), target);
  }

  // int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_compute_cost(), target);
  }

  // double compute_efficiency = 4;
  if (!(this->compute_efficiency() <= 0 && this->compute_efficiency() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_compute_efficiency(), target);
  }

  // string node = 5;
  if (this->node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpPerformance.node");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_node(), target);
  }

  // int64 compute_time = 6;
  if (this->compute_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_compute_time(), target);
  }

  // int64 memory_time = 7;
  if (this->memory_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_memory_time(), target);
  }

  // double memory_efficiency = 8;
  if (!(this->memory_efficiency() <= 0 && this->memory_efficiency() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_memory_efficiency(), target);
  }

  // .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::op_memory(this), target, stream);
  }

  // .tensorflow.NormalDistribution execution_time_normal = 10;
  if (_internal_has_execution_time_normal()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::execution_time_normal(this), target, stream);
  }

  // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
  if (_internal_has_execution_time_log_normal()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::execution_time_log_normal(this), target, stream);
  }

  // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
  if (this->has_session_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::session_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance)
  return target;
}

size_t OpPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node = 5;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  // .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_memory_);
  }

  // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
  if (this->has_session_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_info_);
  }

  // int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_temporary_memory_size());
  }

  // int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compute_cost());
  }

  // double compute_efficiency = 4;
  if (!(this->compute_efficiency() <= 0 && this->compute_efficiency() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 compute_time = 6;
  if (this->compute_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compute_time());
  }

  // int64 memory_time = 7;
  if (this->memory_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_time());
  }

  // double memory_efficiency = 8;
  if (!(this->memory_efficiency() <= 0 && this->memory_efficiency() >= 0)) {
    total_size += 1 + 8;
  }

  switch (execution_time_case()) {
    // .tensorflow.NormalDistribution execution_time_normal = 10;
    case kExecutionTimeNormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *execution_time_.execution_time_normal_);
      break;
    }
    // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
    case kExecutionTimeLogNormal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *execution_time_.execution_time_log_normal_);
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpPerformance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpPerformance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance)
    MergeFrom(*source);
  }
}

void OpPerformance::MergeFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node().size() > 0) {
    _internal_set_node(from._internal_node());
  }
  if (from.has_op()) {
    _internal_mutable_op()->::tensorflow::OpInfo::MergeFrom(from._internal_op());
  }
  if (from.has_op_memory()) {
    _internal_mutable_op_memory()->::tensorflow::OpPerformance_OpMemory::MergeFrom(from._internal_op_memory());
  }
  if (from.has_session_info()) {
    _internal_mutable_session_info()->::tensorflow::SessionInfo::MergeFrom(from._internal_session_info());
  }
  if (from.temporary_memory_size() != 0) {
    _internal_set_temporary_memory_size(from._internal_temporary_memory_size());
  }
  if (from.compute_cost() != 0) {
    _internal_set_compute_cost(from._internal_compute_cost());
  }
  if (!(from.compute_efficiency() <= 0 && from.compute_efficiency() >= 0)) {
    _internal_set_compute_efficiency(from._internal_compute_efficiency());
  }
  if (from.compute_time() != 0) {
    _internal_set_compute_time(from._internal_compute_time());
  }
  if (from.memory_time() != 0) {
    _internal_set_memory_time(from._internal_memory_time());
  }
  if (!(from.memory_efficiency() <= 0 && from.memory_efficiency() >= 0)) {
    _internal_set_memory_efficiency(from._internal_memory_efficiency());
  }
  switch (from.execution_time_case()) {
    case kExecutionTimeNormal: {
      _internal_mutable_execution_time_normal()->::tensorflow::NormalDistribution::MergeFrom(from._internal_execution_time_normal());
      break;
    }
    case kExecutionTimeLogNormal: {
      _internal_mutable_execution_time_log_normal()->::tensorflow::LogNormalDistribution::MergeFrom(from._internal_execution_time_log_normal());
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
}

void OpPerformance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance::CopyFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformance::IsInitialized() const {
  return true;
}

void OpPerformance::InternalSwap(OpPerformance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_.Swap(&other->node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_, other->op_);
  swap(op_memory_, other->op_memory_);
  swap(session_info_, other->session_info_);
  swap(temporary_memory_size_, other->temporary_memory_size_);
  swap(compute_cost_, other->compute_cost_);
  swap(compute_efficiency_, other->compute_efficiency_);
  swap(compute_time_, other->compute_time_);
  swap(memory_time_, other->memory_time_);
  swap(memory_efficiency_, other->memory_efficiency_);
  swap(execution_time_, other->execution_time_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpPerformance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpPerformanceList::InitAsDefaultInstance() {
}
class OpPerformanceList::_Internal {
 public:
};

OpPerformanceList::OpPerformanceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformanceList)
}
OpPerformanceList::OpPerformanceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  op_performance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformanceList)
}
OpPerformanceList::OpPerformanceList(const OpPerformanceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      op_performance_(from.op_performance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformanceList)
}

void OpPerformanceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
}

OpPerformanceList::~OpPerformanceList() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformanceList)
  SharedDtor();
}

void OpPerformanceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void OpPerformanceList::ArenaDtor(void* object) {
  OpPerformanceList* _this = reinterpret_cast< OpPerformanceList* >(object);
  (void)_this;
}
void OpPerformanceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpPerformanceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpPerformanceList& OpPerformanceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpPerformanceList_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto.base);
  return *internal_default_instance();
}


void OpPerformanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_performance_.Clear();
  _internal_metadata_.Clear();
}

const char* OpPerformanceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.OpPerformance op_performance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_op_performance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpPerformanceList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformanceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.OpPerformance op_performance = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_op_performance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_op_performance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformanceList)
  return target;
}

size_t OpPerformanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformanceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.OpPerformance op_performance = 1;
  total_size += 1UL * this->_internal_op_performance_size();
  for (const auto& msg : this->op_performance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpPerformanceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformanceList)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformanceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpPerformanceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformanceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformanceList)
    MergeFrom(*source);
  }
}

void OpPerformanceList::MergeFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformanceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_performance_.MergeFrom(from.op_performance_);
}

void OpPerformanceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformanceList::CopyFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformanceList::IsInitialized() const {
  return true;
}

void OpPerformanceList::InternalSwap(OpPerformanceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  op_performance_.InternalSwap(&other->op_performance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpPerformanceList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SessionInfo* Arena::CreateMaybeMessage< ::tensorflow::SessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpInfo_AttrEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::OpInfo_AttrEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpInfo_AttrEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpInfo_TensorProperties* Arena::CreateMaybeMessage< ::tensorflow::OpInfo_TensorProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpInfo_TensorProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpInfo* Arena::CreateMaybeMessage< ::tensorflow::OpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NormalDistribution* Arena::CreateMaybeMessage< ::tensorflow::NormalDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NormalDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LogNormalDistribution* Arena::CreateMaybeMessage< ::tensorflow::LogNormalDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LogNormalDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpPerformance_OpMemory* Arena::CreateMaybeMessage< ::tensorflow::OpPerformance_OpMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpPerformance_OpMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpPerformance* Arena::CreateMaybeMessage< ::tensorflow::OpPerformance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpPerformance >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::OpPerformanceList* Arena::CreateMaybeMessage< ::tensorflow::OpPerformanceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::OpPerformanceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
