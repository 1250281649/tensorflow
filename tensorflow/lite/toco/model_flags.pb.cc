// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/model_flags.proto

#include "tensorflow/lite/toco/model_flags.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto;
namespace toco {
class InputArrayShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputArrayShape> _instance;
} _InputArrayShape_default_instance_;
class InputArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputArray> _instance;
} _InputArray_default_instance_;
class RnnStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RnnState> _instance;
} _RnnState_default_instance_;
class ArraysExtraInfo_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArraysExtraInfo_Entry> _instance;
} _ArraysExtraInfo_Entry_default_instance_;
class ArraysExtraInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArraysExtraInfo> _instance;
} _ArraysExtraInfo_default_instance_;
class ModelFlags_ModelCheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelFlags_ModelCheck> _instance;
} _ModelFlags_ModelCheck_default_instance_;
class ModelFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelFlags> _instance;
} _ModelFlags_default_instance_;
}  // namespace toco
static void InitDefaultsscc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_ArraysExtraInfo_default_instance_;
    new (ptr) ::toco::ArraysExtraInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::ArraysExtraInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {
      &scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,}};

static void InitDefaultsscc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_ArraysExtraInfo_Entry_default_instance_;
    new (ptr) ::toco::ArraysExtraInfo_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::ArraysExtraInfo_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {
      &scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,}};

static void InitDefaultsscc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_InputArray_default_instance_;
    new (ptr) ::toco::InputArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::InputArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {
      &scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,}};

static void InitDefaultsscc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_InputArrayShape_default_instance_;
    new (ptr) ::toco::InputArrayShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::InputArrayShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {}};

static void InitDefaultsscc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_ModelFlags_default_instance_;
    new (ptr) ::toco::ModelFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::ModelFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {
      &scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
      &scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
      &scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
      &scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,}};

static void InitDefaultsscc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.DefaultConstruct();
  *::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get_mutable() = std::string("None", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get_mutable());
  {
    void* ptr = &::toco::_ModelFlags_ModelCheck_default_instance_;
    new (ptr) ::toco::ModelFlags_ModelCheck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::ModelFlags_ModelCheck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {}};

static void InitDefaultsscc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_RnnState_default_instance_;
    new (ptr) ::toco::RnnState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::RnnState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::toco::InputArrayShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArrayShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::InputArrayShape, dims_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, name_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, shape_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, mean_value_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, std_value_),
  PROTOBUF_FIELD_OFFSET(::toco::InputArray, data_type_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, state_array_),
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, back_edge_source_array_),
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, discardable_),
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, size_),
  PROTOBUF_FIELD_OFFSET(::toco::RnnState, num_dims_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, name_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, name_regexp_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, min_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, max_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, data_type_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, shape_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo_Entry, constant_float_value_),
  0,
  1,
  3,
  4,
  5,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::ArraysExtraInfo, entries_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags_ModelCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags_ModelCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags_ModelCheck, count_type_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags_ModelCheck, count_min_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags_ModelCheck, count_max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, input_arrays_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, output_arrays_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, variable_batch_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, rnn_states_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, model_checks_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, allow_nonexistent_arrays_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, allow_nonascii_arrays_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, arrays_extra_info_),
  PROTOBUF_FIELD_OFFSET(::toco::ModelFlags, change_concat_input_ranges_),
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
  3,
  0,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::toco::InputArrayShape)},
  { 7, 17, sizeof(::toco::InputArray)},
  { 22, 32, sizeof(::toco::RnnState)},
  { 37, 49, sizeof(::toco::ArraysExtraInfo_Entry)},
  { 56, 62, sizeof(::toco::ArraysExtraInfo)},
  { 63, 71, sizeof(::toco::ModelFlags_ModelCheck)},
  { 74, 88, sizeof(::toco::ModelFlags)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_InputArrayShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_InputArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_RnnState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_ArraysExtraInfo_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_ArraysExtraInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_ModelFlags_ModelCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_ModelFlags_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&tensorflow/lite/toco/model_flags.proto"
  "\022\004toco\032 tensorflow/lite/toco/types.proto"
  "\"\037\n\017InputArrayShape\022\014\n\004dims\030\002 \003(\005\"\217\001\n\nIn"
  "putArray\022\014\n\004name\030\001 \001(\t\022$\n\005shape\030\006 \001(\0132\025."
  "toco.InputArrayShape\022\022\n\nmean_value\030\003 \001(\002"
  "\022\024\n\tstd_value\030\004 \001(\002:\0011\022#\n\tdata_type\030\005 \001("
  "\0162\020.toco.IODataType\"t\n\010RnnState\022\023\n\013state"
  "_array\030\001 \001(\t\022\036\n\026back_edge_source_array\030\002"
  " \001(\t\022\023\n\013discardable\030\005 \001(\010\022\014\n\004size\030\003 \001(\005\022"
  "\020\n\010num_dims\030\004 \001(\005\"\357\001\n\017ArraysExtraInfo\022,\n"
  "\007entries\030\001 \003(\0132\033.toco.ArraysExtraInfo.En"
  "try\032\255\001\n\005Entry\022\014\n\004name\030\001 \001(\t\022\023\n\013name_rege"
  "xp\030\007 \001(\t\022\013\n\003min\030\002 \001(\001\022\013\n\003max\030\003 \001(\001\022#\n\tda"
  "ta_type\030\004 \001(\0162\020.toco.IODataType\022$\n\005shape"
  "\030\005 \001(\0132\025.toco.InputArrayShape\022\034\n\024constan"
  "t_float_value\030\006 \001(\002\"\255\003\n\nModelFlags\022&\n\014in"
  "put_arrays\030\001 \003(\0132\020.toco.InputArray\022\025\n\rou"
  "tput_arrays\030\002 \003(\t\022\026\n\016variable_batch\030\n \001("
  "\010\022\"\n\nrnn_states\030\014 \003(\0132\016.toco.RnnState\0221\n"
  "\014model_checks\030\016 \003(\0132\033.toco.ModelFlags.Mo"
  "delCheck\022 \n\030allow_nonexistent_arrays\030\020 \001"
  "(\010\022\035\n\025allow_nonascii_arrays\030\021 \001(\010\0220\n\021arr"
  "ays_extra_info\030\022 \001(\0132\025.toco.ArraysExtraI"
  "nfo\022(\n\032change_concat_input_ranges\030\023 \001(\010:"
  "\004true\032T\n\nModelCheck\022\030\n\ncount_type\030\001 \001(\t:"
  "\004None\022\025\n\tcount_min\030\002 \001(\005:\002-1\022\025\n\tcount_ma"
  "x\030\003 \001(\005:\002-1"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2flite_2ftoco_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_sccs[7] = {
  &scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
  &scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_once;
static bool descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto = {
  &descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_initialized, descriptor_table_protodef_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto, "tensorflow/lite/toco/model_flags.proto", 1051,
  &descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_once, descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_sccs, descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto::offsets,
  file_level_metadata_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto, 7, file_level_enum_descriptors_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto, file_level_service_descriptors_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto), true);
namespace toco {

// ===================================================================

void InputArrayShape::InitAsDefaultInstance() {
}
class InputArrayShape::_Internal {
 public:
  using HasBits = decltype(std::declval<InputArrayShape>()._has_bits_);
};

InputArrayShape::InputArrayShape()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.InputArrayShape)
}
InputArrayShape::InputArrayShape(const InputArrayShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:toco.InputArrayShape)
}

void InputArrayShape::SharedCtor() {
}

InputArrayShape::~InputArrayShape() {
  // @@protoc_insertion_point(destructor:toco.InputArrayShape)
  SharedDtor();
}

void InputArrayShape::SharedDtor() {
}

void InputArrayShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputArrayShape& InputArrayShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputArrayShape_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void InputArrayShape::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.InputArrayShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputArrayShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputArrayShape::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.InputArrayShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dims = 2;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dims(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.InputArrayShape)
  return target;
}

size_t InputArrayShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.InputArrayShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dims = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputArrayShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.InputArrayShape)
  GOOGLE_DCHECK_NE(&from, this);
  const InputArrayShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputArrayShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.InputArrayShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.InputArrayShape)
    MergeFrom(*source);
  }
}

void InputArrayShape::MergeFrom(const InputArrayShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.InputArrayShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
}

void InputArrayShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.InputArrayShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputArrayShape::CopyFrom(const InputArrayShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.InputArrayShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputArrayShape::IsInitialized() const {
  return true;
}

void InputArrayShape::InternalSwap(InputArrayShape* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputArrayShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputArray::InitAsDefaultInstance() {
  ::toco::_InputArray_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toco::InputArrayShape*>(
      ::toco::InputArrayShape::internal_default_instance());
}
class InputArray::_Internal {
 public:
  using HasBits = decltype(std::declval<InputArray>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::toco::InputArrayShape& shape(const InputArray* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::toco::InputArrayShape&
InputArray::_Internal::shape(const InputArray* msg) {
  return *msg->shape_;
}
InputArray::InputArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.InputArray)
}
InputArray::InputArray(const InputArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_shape()) {
    shape_ = new ::toco::InputArrayShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&mean_value_, &from.mean_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_value_) -
    reinterpret_cast<char*>(&mean_value_)) + sizeof(std_value_));
  // @@protoc_insertion_point(copy_constructor:toco.InputArray)
}

void InputArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(data_type_));
  std_value_ = 1;
}

InputArray::~InputArray() {
  // @@protoc_insertion_point(destructor:toco.InputArray)
  SharedDtor();
}

void InputArray::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void InputArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputArray& InputArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputArray_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void InputArray::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.InputArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != nullptr);
      shape_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&mean_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_) -
        reinterpret_cast<char*>(&mean_value_)) + sizeof(data_type_));
    std_value_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name(), ptr, ctx, "toco.InputArray.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mean_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mean_value(&has_bits);
          mean_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_value = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_std_value(&has_bits);
          std_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .toco.IODataType data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::IODataType_IsValid(val))) {
            _internal_set_data_type(static_cast<::toco::IODataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .toco.InputArrayShape shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputArray::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.InputArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.InputArray.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float mean_value = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_value(), target);
  }

  // optional float std_value = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_std_value(), target);
  }

  // optional .toco.IODataType data_type = 5;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_type(), target);
  }

  // optional .toco.InputArrayShape shape = 6;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.InputArray)
  return target;
}

size_t InputArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.InputArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .toco.InputArrayShape shape = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional float mean_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .toco.IODataType data_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
    }

    // optional float std_value = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.InputArray)
  GOOGLE_DCHECK_NE(&from, this);
  const InputArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.InputArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.InputArray)
    MergeFrom(*source);
  }
}

void InputArray::MergeFrom(const InputArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.InputArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shape()->::toco::InputArrayShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000004u) {
      mean_value_ = from.mean_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      std_value_ = from.std_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.InputArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputArray::CopyFrom(const InputArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.InputArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputArray::IsInitialized() const {
  return true;
}

void InputArray::InternalSwap(InputArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(mean_value_, other->mean_value_);
  swap(data_type_, other->data_type_);
  swap(std_value_, other->std_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RnnState::InitAsDefaultInstance() {
}
class RnnState::_Internal {
 public:
  using HasBits = decltype(std::declval<RnnState>()._has_bits_);
  static void set_has_state_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_back_edge_source_array(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_discardable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RnnState::RnnState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.RnnState)
}
RnnState::RnnState(const RnnState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state_array()) {
    state_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_array_);
  }
  back_edge_source_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_back_edge_source_array()) {
    back_edge_source_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.back_edge_source_array_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&discardable_) -
    reinterpret_cast<char*>(&size_)) + sizeof(discardable_));
  // @@protoc_insertion_point(copy_constructor:toco.RnnState)
}

void RnnState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  state_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_edge_source_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discardable_) -
      reinterpret_cast<char*>(&size_)) + sizeof(discardable_));
}

RnnState::~RnnState() {
  // @@protoc_insertion_point(destructor:toco.RnnState)
  SharedDtor();
}

void RnnState::SharedDtor() {
  state_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_edge_source_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RnnState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RnnState& RnnState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RnnState_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void RnnState::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.RnnState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_array_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      back_edge_source_array_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&discardable_) -
        reinterpret_cast<char*>(&size_)) + sizeof(discardable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RnnState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string state_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_state_array(), ptr, ctx, "toco.RnnState.state_array");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string back_edge_source_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_back_edge_source_array(), ptr, ctx, "toco.RnnState.back_edge_source_array");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_dims = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_dims(&has_bits);
          num_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool discardable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_discardable(&has_bits);
          discardable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RnnState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.RnnState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string state_array = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state_array().data(), static_cast<int>(this->_internal_state_array().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.RnnState.state_array");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state_array(), target);
  }

  // optional string back_edge_source_array = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_back_edge_source_array().data(), static_cast<int>(this->_internal_back_edge_source_array().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.RnnState.back_edge_source_array");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_back_edge_source_array(), target);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // optional int32 num_dims = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_dims(), target);
  }

  // optional bool discardable = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_discardable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.RnnState)
  return target;
}

size_t RnnState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.RnnState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string state_array = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state_array());
    }

    // optional string back_edge_source_array = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_back_edge_source_array());
    }

    // optional int32 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 num_dims = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_dims());
    }

    // optional bool discardable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RnnState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.RnnState)
  GOOGLE_DCHECK_NE(&from, this);
  const RnnState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RnnState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.RnnState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.RnnState)
    MergeFrom(*source);
  }
}

void RnnState::MergeFrom(const RnnState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.RnnState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      state_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_array_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      back_edge_source_array_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.back_edge_source_array_);
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_dims_ = from.num_dims_;
    }
    if (cached_has_bits & 0x00000010u) {
      discardable_ = from.discardable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RnnState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.RnnState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RnnState::CopyFrom(const RnnState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.RnnState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RnnState::IsInitialized() const {
  return true;
}

void RnnState::InternalSwap(RnnState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_array_.Swap(&other->state_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  back_edge_source_array_.Swap(&other->back_edge_source_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(num_dims_, other->num_dims_);
  swap(discardable_, other->discardable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RnnState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArraysExtraInfo_Entry::InitAsDefaultInstance() {
  ::toco::_ArraysExtraInfo_Entry_default_instance_._instance.get_mutable()->shape_ = const_cast< ::toco::InputArrayShape*>(
      ::toco::InputArrayShape::internal_default_instance());
}
class ArraysExtraInfo_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ArraysExtraInfo_Entry>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_regexp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::toco::InputArrayShape& shape(const ArraysExtraInfo_Entry* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_constant_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::toco::InputArrayShape&
ArraysExtraInfo_Entry::_Internal::shape(const ArraysExtraInfo_Entry* msg) {
  return *msg->shape_;
}
ArraysExtraInfo_Entry::ArraysExtraInfo_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.ArraysExtraInfo.Entry)
}
ArraysExtraInfo_Entry::ArraysExtraInfo_Entry(const ArraysExtraInfo_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_regexp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_regexp()) {
    name_regexp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_regexp_);
  }
  if (from._internal_has_shape()) {
    shape_ = new ::toco::InputArrayShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&constant_float_value_) -
    reinterpret_cast<char*>(&min_)) + sizeof(constant_float_value_));
  // @@protoc_insertion_point(copy_constructor:toco.ArraysExtraInfo.Entry)
}

void ArraysExtraInfo_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_regexp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constant_float_value_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(constant_float_value_));
}

ArraysExtraInfo_Entry::~ArraysExtraInfo_Entry() {
  // @@protoc_insertion_point(destructor:toco.ArraysExtraInfo.Entry)
  SharedDtor();
}

void ArraysExtraInfo_Entry::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_regexp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void ArraysExtraInfo_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArraysExtraInfo_Entry& ArraysExtraInfo_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArraysExtraInfo_Entry_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void ArraysExtraInfo_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.ArraysExtraInfo.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_regexp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shape_ != nullptr);
      shape_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&constant_float_value_) -
        reinterpret_cast<char*>(&min_)) + sizeof(constant_float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ArraysExtraInfo_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name(), ptr, ctx, "toco.ArraysExtraInfo.Entry.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .toco.IODataType data_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::IODataType_IsValid(val))) {
            _internal_set_data_type(static_cast<::toco::IODataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .toco.InputArrayShape shape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float constant_float_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_constant_float_value(&has_bits);
          constant_float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string name_regexp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name_regexp(), ptr, ctx, "toco.ArraysExtraInfo.Entry.name_regexp");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArraysExtraInfo_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.ArraysExtraInfo.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.ArraysExtraInfo.Entry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double min = 2;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double max = 3;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max(), target);
  }

  // optional .toco.IODataType data_type = 4;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_type(), target);
  }

  // optional .toco.InputArrayShape shape = 5;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::shape(this), target, stream);
  }

  // optional float constant_float_value = 6;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_constant_float_value(), target);
  }

  // optional string name_regexp = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_regexp().data(), static_cast<int>(this->_internal_name_regexp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.ArraysExtraInfo.Entry.name_regexp");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name_regexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.ArraysExtraInfo.Entry)
  return target;
}

size_t ArraysExtraInfo_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.ArraysExtraInfo.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_regexp = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_regexp());
    }

    // optional .toco.InputArrayShape shape = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional double min = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .toco.IODataType data_type = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
    }

    // optional float constant_float_value = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArraysExtraInfo_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.ArraysExtraInfo.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ArraysExtraInfo_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArraysExtraInfo_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.ArraysExtraInfo.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.ArraysExtraInfo.Entry)
    MergeFrom(*source);
  }
}

void ArraysExtraInfo_Entry::MergeFrom(const ArraysExtraInfo_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.ArraysExtraInfo.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_regexp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_regexp_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shape()->::toco::InputArrayShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000008u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      constant_float_value_ = from.constant_float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArraysExtraInfo_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.ArraysExtraInfo.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArraysExtraInfo_Entry::CopyFrom(const ArraysExtraInfo_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.ArraysExtraInfo.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArraysExtraInfo_Entry::IsInitialized() const {
  return true;
}

void ArraysExtraInfo_Entry::InternalSwap(ArraysExtraInfo_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_regexp_.Swap(&other->name_regexp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(data_type_, other->data_type_);
  swap(constant_float_value_, other->constant_float_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArraysExtraInfo_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArraysExtraInfo::InitAsDefaultInstance() {
}
class ArraysExtraInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArraysExtraInfo>()._has_bits_);
};

ArraysExtraInfo::ArraysExtraInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.ArraysExtraInfo)
}
ArraysExtraInfo::ArraysExtraInfo(const ArraysExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:toco.ArraysExtraInfo)
}

void ArraysExtraInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
}

ArraysExtraInfo::~ArraysExtraInfo() {
  // @@protoc_insertion_point(destructor:toco.ArraysExtraInfo)
  SharedDtor();
}

void ArraysExtraInfo::SharedDtor() {
}

void ArraysExtraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArraysExtraInfo& ArraysExtraInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArraysExtraInfo_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void ArraysExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.ArraysExtraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ArraysExtraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .toco.ArraysExtraInfo.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArraysExtraInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.ArraysExtraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .toco.ArraysExtraInfo.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.ArraysExtraInfo)
  return target;
}

size_t ArraysExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.ArraysExtraInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toco.ArraysExtraInfo.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArraysExtraInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.ArraysExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArraysExtraInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArraysExtraInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.ArraysExtraInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.ArraysExtraInfo)
    MergeFrom(*source);
  }
}

void ArraysExtraInfo::MergeFrom(const ArraysExtraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.ArraysExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void ArraysExtraInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.ArraysExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArraysExtraInfo::CopyFrom(const ArraysExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.ArraysExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArraysExtraInfo::IsInitialized() const {
  return true;
}

void ArraysExtraInfo::InternalSwap(ArraysExtraInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArraysExtraInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelFlags_ModelCheck::InitAsDefaultInstance() {
}
class ModelFlags_ModelCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelFlags_ModelCheck>()._has_bits_);
  static void set_has_count_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_;
ModelFlags_ModelCheck::ModelFlags_ModelCheck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.ModelFlags.ModelCheck)
}
ModelFlags_ModelCheck::ModelFlags_ModelCheck(const ModelFlags_ModelCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_type_.UnsafeSetDefault(&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get());
  if (from._internal_has_count_type()) {
    count_type_.AssignWithDefault(&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get(), from.count_type_);
  }
  ::memcpy(&count_min_, &from.count_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_max_) -
    reinterpret_cast<char*>(&count_min_)) + sizeof(count_max_));
  // @@protoc_insertion_point(copy_constructor:toco.ModelFlags.ModelCheck)
}

void ModelFlags_ModelCheck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  count_type_.UnsafeSetDefault(&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get());
  count_min_ = -1;
  count_max_ = -1;
}

ModelFlags_ModelCheck::~ModelFlags_ModelCheck() {
  // @@protoc_insertion_point(destructor:toco.ModelFlags.ModelCheck)
  SharedDtor();
}

void ModelFlags_ModelCheck::SharedDtor() {
  count_type_.DestroyNoArena(&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get());
}

void ModelFlags_ModelCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelFlags_ModelCheck& ModelFlags_ModelCheck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelFlags_ModelCheck_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void ModelFlags_ModelCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.ModelFlags.ModelCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      count_type_.UnsafeMutablePointer()->assign(*&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get());
    }
    count_min_ = -1;
    count_max_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModelFlags_ModelCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string count_type = 1 [default = "None"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_count_type(), ptr, ctx, "toco.ModelFlags.ModelCheck.count_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_min = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count_min(&has_bits);
          count_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_max = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count_max(&has_bits);
          count_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelFlags_ModelCheck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.ModelFlags.ModelCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string count_type = 1 [default = "None"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_count_type().data(), static_cast<int>(this->_internal_count_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.ModelFlags.ModelCheck.count_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_count_type(), target);
  }

  // optional int32 count_min = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count_min(), target);
  }

  // optional int32 count_max = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.ModelFlags.ModelCheck)
  return target;
}

size_t ModelFlags_ModelCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.ModelFlags.ModelCheck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string count_type = 1 [default = "None"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_count_type());
    }

    // optional int32 count_min = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count_min());
    }

    // optional int32 count_max = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelFlags_ModelCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.ModelFlags.ModelCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelFlags_ModelCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelFlags_ModelCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.ModelFlags.ModelCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.ModelFlags.ModelCheck)
    MergeFrom(*source);
  }
}

void ModelFlags_ModelCheck::MergeFrom(const ModelFlags_ModelCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.ModelFlags.ModelCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      count_type_.AssignWithDefault(&::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get(), from.count_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_min_ = from.count_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_max_ = from.count_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelFlags_ModelCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.ModelFlags.ModelCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelFlags_ModelCheck::CopyFrom(const ModelFlags_ModelCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.ModelFlags.ModelCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFlags_ModelCheck::IsInitialized() const {
  return true;
}

void ModelFlags_ModelCheck::InternalSwap(ModelFlags_ModelCheck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  count_type_.Swap(&other->count_type_, &::toco::ModelFlags_ModelCheck::_i_give_permission_to_break_this_code_default_count_type_.get(),
    GetArenaNoVirtual());
  swap(count_min_, other->count_min_);
  swap(count_max_, other->count_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelFlags_ModelCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelFlags::InitAsDefaultInstance() {
  ::toco::_ModelFlags_default_instance_._instance.get_mutable()->arrays_extra_info_ = const_cast< ::toco::ArraysExtraInfo*>(
      ::toco::ArraysExtraInfo::internal_default_instance());
}
class ModelFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelFlags>()._has_bits_);
  static void set_has_variable_batch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allow_nonexistent_arrays(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_nonascii_arrays(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::toco::ArraysExtraInfo& arrays_extra_info(const ModelFlags* msg);
  static void set_has_arrays_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_concat_input_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::toco::ArraysExtraInfo&
ModelFlags::_Internal::arrays_extra_info(const ModelFlags* msg) {
  return *msg->arrays_extra_info_;
}
ModelFlags::ModelFlags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.ModelFlags)
}
ModelFlags::ModelFlags(const ModelFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_arrays_(from.input_arrays_),
      output_arrays_(from.output_arrays_),
      rnn_states_(from.rnn_states_),
      model_checks_(from.model_checks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_arrays_extra_info()) {
    arrays_extra_info_ = new ::toco::ArraysExtraInfo(*from.arrays_extra_info_);
  } else {
    arrays_extra_info_ = nullptr;
  }
  ::memcpy(&variable_batch_, &from.variable_batch_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_concat_input_ranges_) -
    reinterpret_cast<char*>(&variable_batch_)) + sizeof(change_concat_input_ranges_));
  // @@protoc_insertion_point(copy_constructor:toco.ModelFlags)
}

void ModelFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  ::memset(&arrays_extra_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_nonascii_arrays_) -
      reinterpret_cast<char*>(&arrays_extra_info_)) + sizeof(allow_nonascii_arrays_));
  change_concat_input_ranges_ = true;
}

ModelFlags::~ModelFlags() {
  // @@protoc_insertion_point(destructor:toco.ModelFlags)
  SharedDtor();
}

void ModelFlags::SharedDtor() {
  if (this != internal_default_instance()) delete arrays_extra_info_;
}

void ModelFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelFlags& ModelFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelFlags_tensorflow_2flite_2ftoco_2fmodel_5fflags_2eproto.base);
  return *internal_default_instance();
}


void ModelFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.ModelFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_arrays_.Clear();
  output_arrays_.Clear();
  rnn_states_.Clear();
  model_checks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(arrays_extra_info_ != nullptr);
    arrays_extra_info_->Clear();
  }
  ::memset(&variable_batch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_nonascii_arrays_) -
      reinterpret_cast<char*>(&variable_batch_)) + sizeof(allow_nonascii_arrays_));
  change_concat_input_ranges_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModelFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .toco.InputArray input_arrays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_arrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_arrays = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_output_arrays(), ptr, ctx, "toco.ModelFlags.output_arrays");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool variable_batch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_variable_batch(&has_bits);
          variable_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .toco.RnnState rnn_states = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rnn_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .toco.ModelFlags.ModelCheck model_checks = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_checks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool allow_nonexistent_arrays = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_allow_nonexistent_arrays(&has_bits);
          allow_nonexistent_arrays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_nonascii_arrays = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_allow_nonascii_arrays(&has_bits);
          allow_nonascii_arrays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .toco.ArraysExtraInfo arrays_extra_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrays_extra_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool change_concat_input_ranges = 19 [default = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_change_concat_input_ranges(&has_bits);
          change_concat_input_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelFlags::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.ModelFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .toco.InputArray input_arrays = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_arrays_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_input_arrays(i), target, stream);
  }

  // repeated string output_arrays = 2;
  for (int i = 0, n = this->_internal_output_arrays_size(); i < n; i++) {
    const auto& s = this->_internal_output_arrays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.ModelFlags.output_arrays");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool variable_batch = 10;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_variable_batch(), target);
  }

  // repeated .toco.RnnState rnn_states = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rnn_states_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_rnn_states(i), target, stream);
  }

  // repeated .toco.ModelFlags.ModelCheck model_checks = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_checks_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_model_checks(i), target, stream);
  }

  // optional bool allow_nonexistent_arrays = 16;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_allow_nonexistent_arrays(), target);
  }

  // optional bool allow_nonascii_arrays = 17;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_allow_nonascii_arrays(), target);
  }

  // optional .toco.ArraysExtraInfo arrays_extra_info = 18;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::arrays_extra_info(this), target, stream);
  }

  // optional bool change_concat_input_ranges = 19 [default = true];
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_change_concat_input_ranges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.ModelFlags)
  return target;
}

size_t ModelFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.ModelFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toco.InputArray input_arrays = 1;
  total_size += 1UL * this->_internal_input_arrays_size();
  for (const auto& msg : this->input_arrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_arrays = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_arrays_.size());
  for (int i = 0, n = output_arrays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_arrays_.Get(i));
  }

  // repeated .toco.RnnState rnn_states = 12;
  total_size += 1UL * this->_internal_rnn_states_size();
  for (const auto& msg : this->rnn_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .toco.ModelFlags.ModelCheck model_checks = 14;
  total_size += 1UL * this->_internal_model_checks_size();
  for (const auto& msg : this->model_checks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .toco.ArraysExtraInfo arrays_extra_info = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arrays_extra_info_);
    }

    // optional bool variable_batch = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool allow_nonexistent_arrays = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool allow_nonascii_arrays = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool change_concat_input_ranges = 19 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.ModelFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.ModelFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.ModelFlags)
    MergeFrom(*source);
  }
}

void ModelFlags::MergeFrom(const ModelFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.ModelFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_arrays_.MergeFrom(from.input_arrays_);
  output_arrays_.MergeFrom(from.output_arrays_);
  rnn_states_.MergeFrom(from.rnn_states_);
  model_checks_.MergeFrom(from.model_checks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_arrays_extra_info()->::toco::ArraysExtraInfo::MergeFrom(from._internal_arrays_extra_info());
    }
    if (cached_has_bits & 0x00000002u) {
      variable_batch_ = from.variable_batch_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_nonexistent_arrays_ = from.allow_nonexistent_arrays_;
    }
    if (cached_has_bits & 0x00000008u) {
      allow_nonascii_arrays_ = from.allow_nonascii_arrays_;
    }
    if (cached_has_bits & 0x00000010u) {
      change_concat_input_ranges_ = from.change_concat_input_ranges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.ModelFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelFlags::CopyFrom(const ModelFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.ModelFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFlags::IsInitialized() const {
  return true;
}

void ModelFlags::InternalSwap(ModelFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_arrays_.InternalSwap(&other->input_arrays_);
  output_arrays_.InternalSwap(&other->output_arrays_);
  rnn_states_.InternalSwap(&other->rnn_states_);
  model_checks_.InternalSwap(&other->model_checks_);
  swap(arrays_extra_info_, other->arrays_extra_info_);
  swap(variable_batch_, other->variable_batch_);
  swap(allow_nonexistent_arrays_, other->allow_nonexistent_arrays_);
  swap(allow_nonascii_arrays_, other->allow_nonascii_arrays_);
  swap(change_concat_input_ranges_, other->change_concat_input_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace toco
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toco::InputArrayShape* Arena::CreateMaybeMessage< ::toco::InputArrayShape >(Arena* arena) {
  return Arena::CreateInternal< ::toco::InputArrayShape >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::InputArray* Arena::CreateMaybeMessage< ::toco::InputArray >(Arena* arena) {
  return Arena::CreateInternal< ::toco::InputArray >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::RnnState* Arena::CreateMaybeMessage< ::toco::RnnState >(Arena* arena) {
  return Arena::CreateInternal< ::toco::RnnState >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::ArraysExtraInfo_Entry* Arena::CreateMaybeMessage< ::toco::ArraysExtraInfo_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::toco::ArraysExtraInfo_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::ArraysExtraInfo* Arena::CreateMaybeMessage< ::toco::ArraysExtraInfo >(Arena* arena) {
  return Arena::CreateInternal< ::toco::ArraysExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::ModelFlags_ModelCheck* Arena::CreateMaybeMessage< ::toco::ModelFlags_ModelCheck >(Arena* arena) {
  return Arena::CreateInternal< ::toco::ModelFlags_ModelCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::ModelFlags* Arena::CreateMaybeMessage< ::toco::ModelFlags >(Arena* arena) {
  return Arena::CreateInternal< ::toco::ModelFlags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
