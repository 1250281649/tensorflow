// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/toco_flags.proto

#include "tensorflow/lite/toco/toco_flags.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace toco {
class TocoFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TocoFlags> _instance;
} _TocoFlags_default_instance_;
}  // namespace toco
static void InitDefaultsscc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoFlags_default_instance_;
    new (ptr) ::toco::TocoFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::TocoFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, input_format_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, output_format_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, inference_input_type_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, inference_type_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, default_ranges_min_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, default_ranges_max_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, default_int16_ranges_min_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, default_int16_ranges_max_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, drop_fake_quant_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, reorder_across_fake_quant_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, allow_custom_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, drop_control_dependency_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, debug_disable_recurrent_cell_fusion_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, propagate_fake_quant_num_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, allow_nudging_weights_to_use_fast_gemm_kernel_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, dedupe_array_min_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, split_tflite_lstm_inputs_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, quantize_weights_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, dump_graphviz_dir_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, dump_graphviz_include_video_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, post_training_quantize_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, enable_select_tf_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, force_select_tf_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, quantize_to_float16_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, allow_dynamic_tensors_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, conversion_summary_dir_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoFlags, custom_opdefs_),
  2,
  3,
  11,
  4,
  5,
  6,
  12,
  13,
  7,
  8,
  9,
  10,
  14,
  15,
  16,
  25,
  23,
  17,
  0,
  18,
  19,
  20,
  21,
  22,
  24,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::toco::TocoFlags)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_TocoFlags_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%tensorflow/lite/toco/toco_flags.proto\022"
  "\004toco\032 tensorflow/lite/toco/types.proto\""
  "\326\007\n\tTocoFlags\022&\n\014input_format\030\001 \001(\0162\020.to"
  "co.FileFormat\022\'\n\routput_format\030\002 \001(\0162\020.t"
  "oco.FileFormat\022.\n\024inference_input_type\030\013"
  " \001(\0162\020.toco.IODataType\022(\n\016inference_type"
  "\030\004 \001(\0162\020.toco.IODataType\022\032\n\022default_rang"
  "es_min\030\005 \001(\002\022\032\n\022default_ranges_max\030\006 \001(\002"
  "\022 \n\030default_int16_ranges_min\030\017 \001(\002\022 \n\030de"
  "fault_int16_ranges_max\030\020 \001(\002\022\027\n\017drop_fak"
  "e_quant\030\007 \001(\010\022!\n\031reorder_across_fake_qua"
  "nt\030\010 \001(\010\022\030\n\020allow_custom_ops\030\n \001(\010\022\037\n\027dr"
  "op_control_dependency\030\014 \001(\010\022+\n#debug_dis"
  "able_recurrent_cell_fusion\030\r \001(\010\022%\n\035prop"
  "agate_fake_quant_num_bits\030\016 \001(\010\0225\n-allow"
  "_nudging_weights_to_use_fast_gemm_kernel"
  "\030\021 \001(\010\022\'\n\033dedupe_array_min_size_bytes\030\022 "
  "\001(\003:\00264\022&\n\030split_tflite_lstm_inputs\030\023 \001("
  "\010:\004true\022\037\n\020quantize_weights\030\024 \001(\010:\005false"
  "\022\031\n\021dump_graphviz_dir\030\030 \001(\t\022#\n\033dump_grap"
  "hviz_include_video\030\031 \001(\010\022%\n\026post_trainin"
  "g_quantize\030\032 \001(\010:\005false\022#\n\024enable_select"
  "_tf_ops\030\033 \001(\010:\005false\022\"\n\023force_select_tf_"
  "ops\030\034 \001(\010:\005false\022\"\n\023quantize_to_float16\030"
  "\035 \001(\010:\005false\022#\n\025allow_dynamic_tensors\030\036 "
  "\001(\010:\004true\022\036\n\026conversion_summary_dir\030\037 \001("
  "\t\022\025\n\rcustom_opdefs\030  \003(\t*\\\n\nFileFormat\022\027"
  "\n\023FILE_FORMAT_UNKNOWN\020\000\022\027\n\023TENSORFLOW_GR"
  "APHDEF\020\001\022\n\n\006TFLITE\020\002\022\020\n\014GRAPHVIZ_DOT\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2flite_2ftoco_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_sccs[1] = {
  &scc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_once;
static bool descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto = {
  &descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_initialized, descriptor_table_protodef_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto, "tensorflow/lite/toco/toco_flags.proto", 1158,
  &descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_once, descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_sccs, descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::offsets,
  file_level_metadata_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto, 1, file_level_enum_descriptors_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto, file_level_service_descriptors_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto), true);
namespace toco {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto[0];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TocoFlags::InitAsDefaultInstance() {
}
class TocoFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<TocoFlags>()._has_bits_);
  static void set_has_input_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inference_input_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_inference_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_ranges_min(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_ranges_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_int16_ranges_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_default_int16_ranges_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_drop_fake_quant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reorder_across_fake_quant(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_custom_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_drop_control_dependency(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_debug_disable_recurrent_cell_fusion(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_propagate_fake_quant_num_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_allow_nudging_weights_to_use_fast_gemm_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dedupe_array_min_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_split_tflite_lstm_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_quantize_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_dump_graphviz_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_graphviz_include_video(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_post_training_quantize(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_enable_select_tf_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_force_select_tf_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_quantize_to_float16(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_allow_dynamic_tensors(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_conversion_summary_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TocoFlags::TocoFlags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.TocoFlags)
}
TocoFlags::TocoFlags(const TocoFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      custom_opdefs_(from.custom_opdefs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dump_graphviz_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dump_graphviz_dir()) {
    dump_graphviz_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_graphviz_dir_);
  }
  conversion_summary_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_conversion_summary_dir()) {
    conversion_summary_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.conversion_summary_dir_);
  }
  ::memcpy(&input_format_, &from.input_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&dedupe_array_min_size_bytes_) -
    reinterpret_cast<char*>(&input_format_)) + sizeof(dedupe_array_min_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:toco.TocoFlags)
}

void TocoFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto.base);
  dump_graphviz_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_summary_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantize_to_float16_) -
      reinterpret_cast<char*>(&input_format_)) + sizeof(quantize_to_float16_));
  split_tflite_lstm_inputs_ = true;
  allow_dynamic_tensors_ = true;
  dedupe_array_min_size_bytes_ = PROTOBUF_LONGLONG(64);
}

TocoFlags::~TocoFlags() {
  // @@protoc_insertion_point(destructor:toco.TocoFlags)
  SharedDtor();
}

void TocoFlags::SharedDtor() {
  dump_graphviz_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_summary_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TocoFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TocoFlags& TocoFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TocoFlags_tensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto.base);
  return *internal_default_instance();
}


void TocoFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.TocoFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_opdefs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dump_graphviz_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      conversion_summary_dir_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&input_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drop_fake_quant_) -
        reinterpret_cast<char*>(&input_format_)) + sizeof(drop_fake_quant_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&reorder_across_fake_quant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&propagate_fake_quant_num_bits_) -
        reinterpret_cast<char*>(&reorder_across_fake_quant_)) + sizeof(propagate_fake_quant_num_bits_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&allow_nudging_weights_to_use_fast_gemm_kernel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantize_to_float16_) -
        reinterpret_cast<char*>(&allow_nudging_weights_to_use_fast_gemm_kernel_)) + sizeof(quantize_to_float16_));
    split_tflite_lstm_inputs_ = true;
  }
  if (cached_has_bits & 0x03000000u) {
    allow_dynamic_tensors_ = true;
    dedupe_array_min_size_bytes_ = PROTOBUF_LONGLONG(64);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TocoFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .toco.FileFormat input_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::FileFormat_IsValid(val))) {
            _internal_set_input_format(static_cast<::toco::FileFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .toco.FileFormat output_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::FileFormat_IsValid(val))) {
            _internal_set_output_format(static_cast<::toco::FileFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .toco.IODataType inference_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::IODataType_IsValid(val))) {
            _internal_set_inference_type(static_cast<::toco::IODataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float default_ranges_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_default_ranges_min(&has_bits);
          default_ranges_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float default_ranges_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_default_ranges_max(&has_bits);
          default_ranges_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool drop_fake_quant = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_drop_fake_quant(&has_bits);
          drop_fake_quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reorder_across_fake_quant = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reorder_across_fake_quant(&has_bits);
          reorder_across_fake_quant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_custom_ops = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_allow_custom_ops(&has_bits);
          allow_custom_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .toco.IODataType inference_input_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::toco::IODataType_IsValid(val))) {
            _internal_set_inference_input_type(static_cast<::toco::IODataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool drop_control_dependency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_drop_control_dependency(&has_bits);
          drop_control_dependency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_disable_recurrent_cell_fusion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_debug_disable_recurrent_cell_fusion(&has_bits);
          debug_disable_recurrent_cell_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool propagate_fake_quant_num_bits = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_propagate_fake_quant_num_bits(&has_bits);
          propagate_fake_quant_num_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float default_int16_ranges_min = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_default_int16_ranges_min(&has_bits);
          default_int16_ranges_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float default_int16_ranges_max = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_default_int16_ranges_max(&has_bits);
          default_int16_ranges_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_allow_nudging_weights_to_use_fast_gemm_kernel(&has_bits);
          allow_nudging_weights_to_use_fast_gemm_kernel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_dedupe_array_min_size_bytes(&has_bits);
          dedupe_array_min_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool split_tflite_lstm_inputs = 19 [default = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_split_tflite_lstm_inputs(&has_bits);
          split_tflite_lstm_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool quantize_weights = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_quantize_weights(&has_bits);
          quantize_weights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dump_graphviz_dir = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_dump_graphviz_dir(), ptr, ctx, "toco.TocoFlags.dump_graphviz_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dump_graphviz_include_video = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_dump_graphviz_include_video(&has_bits);
          dump_graphviz_include_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool post_training_quantize = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_post_training_quantize(&has_bits);
          post_training_quantize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_select_tf_ops = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_enable_select_tf_ops(&has_bits);
          enable_select_tf_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_select_tf_ops = 28 [default = false];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_force_select_tf_ops(&has_bits);
          force_select_tf_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool quantize_to_float16 = 29 [default = false];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_quantize_to_float16(&has_bits);
          quantize_to_float16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_dynamic_tensors = 30 [default = true];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_allow_dynamic_tensors(&has_bits);
          allow_dynamic_tensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string conversion_summary_dir = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_conversion_summary_dir(), ptr, ctx, "toco.TocoFlags.conversion_summary_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string custom_opdefs = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_custom_opdefs(), ptr, ctx, "toco.TocoFlags.custom_opdefs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TocoFlags::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.TocoFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .toco.FileFormat input_format = 1;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_input_format(), target);
  }

  // optional .toco.FileFormat output_format = 2;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_output_format(), target);
  }

  // optional .toco.IODataType inference_type = 4;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_inference_type(), target);
  }

  // optional float default_ranges_min = 5;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_default_ranges_min(), target);
  }

  // optional float default_ranges_max = 6;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_default_ranges_max(), target);
  }

  // optional bool drop_fake_quant = 7;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_drop_fake_quant(), target);
  }

  // optional bool reorder_across_fake_quant = 8;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_reorder_across_fake_quant(), target);
  }

  // optional bool allow_custom_ops = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_custom_ops(), target);
  }

  // optional .toco.IODataType inference_input_type = 11;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_inference_input_type(), target);
  }

  // optional bool drop_control_dependency = 12;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_drop_control_dependency(), target);
  }

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_debug_disable_recurrent_cell_fusion(), target);
  }

  // optional bool propagate_fake_quant_num_bits = 14;
  if (cached_has_bits & 0x00008000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_propagate_fake_quant_num_bits(), target);
  }

  // optional float default_int16_ranges_min = 15;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_default_int16_ranges_min(), target);
  }

  // optional float default_int16_ranges_max = 16;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_default_int16_ranges_max(), target);
  }

  // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
  if (cached_has_bits & 0x00010000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_allow_nudging_weights_to_use_fast_gemm_kernel(), target);
  }

  // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
  if (cached_has_bits & 0x02000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_dedupe_array_min_size_bytes(), target);
  }

  // optional bool split_tflite_lstm_inputs = 19 [default = true];
  if (cached_has_bits & 0x00800000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_split_tflite_lstm_inputs(), target);
  }

  // optional bool quantize_weights = 20 [default = false];
  if (cached_has_bits & 0x00020000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_quantize_weights(), target);
  }

  // optional string dump_graphviz_dir = 24;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dump_graphviz_dir().data(), static_cast<int>(this->_internal_dump_graphviz_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoFlags.dump_graphviz_dir");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_dump_graphviz_dir(), target);
  }

  // optional bool dump_graphviz_include_video = 25;
  if (cached_has_bits & 0x00040000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_dump_graphviz_include_video(), target);
  }

  // optional bool post_training_quantize = 26 [default = false];
  if (cached_has_bits & 0x00080000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_post_training_quantize(), target);
  }

  // optional bool enable_select_tf_ops = 27 [default = false];
  if (cached_has_bits & 0x00100000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_enable_select_tf_ops(), target);
  }

  // optional bool force_select_tf_ops = 28 [default = false];
  if (cached_has_bits & 0x00200000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_force_select_tf_ops(), target);
  }

  // optional bool quantize_to_float16 = 29 [default = false];
  if (cached_has_bits & 0x00400000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_quantize_to_float16(), target);
  }

  // optional bool allow_dynamic_tensors = 30 [default = true];
  if (cached_has_bits & 0x01000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_allow_dynamic_tensors(), target);
  }

  // optional string conversion_summary_dir = 31;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversion_summary_dir().data(), static_cast<int>(this->_internal_conversion_summary_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoFlags.conversion_summary_dir");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_conversion_summary_dir(), target);
  }

  // repeated string custom_opdefs = 32;
  for (int i = 0, n = this->_internal_custom_opdefs_size(); i < n; i++) {
    const auto& s = this->_internal_custom_opdefs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoFlags.custom_opdefs");
    target = stream->WriteString(32, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.TocoFlags)
  return target;
}

size_t TocoFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.TocoFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string custom_opdefs = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(custom_opdefs_.size());
  for (int i = 0, n = custom_opdefs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      custom_opdefs_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dump_graphviz_dir = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dump_graphviz_dir());
    }

    // optional string conversion_summary_dir = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversion_summary_dir());
    }

    // optional .toco.FileFormat input_format = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_format());
    }

    // optional .toco.FileFormat output_format = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_format());
    }

    // optional .toco.IODataType inference_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inference_type());
    }

    // optional float default_ranges_min = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float default_ranges_max = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool drop_fake_quant = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool reorder_across_fake_quant = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool allow_custom_ops = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool drop_control_dependency = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .toco.IODataType inference_input_type = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inference_input_type());
    }

    // optional float default_int16_ranges_min = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float default_int16_ranges_max = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional bool debug_disable_recurrent_cell_fusion = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool propagate_fake_quant_num_bits = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool quantize_weights = 20 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool dump_graphviz_include_video = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool post_training_quantize = 26 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_select_tf_ops = 27 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool force_select_tf_ops = 28 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool quantize_to_float16 = 29 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool split_tflite_lstm_inputs = 19 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional bool allow_dynamic_tensors = 30 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_dedupe_array_min_size_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TocoFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.TocoFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const TocoFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TocoFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.TocoFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.TocoFlags)
    MergeFrom(*source);
  }
}

void TocoFlags::MergeFrom(const TocoFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.TocoFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_opdefs_.MergeFrom(from.custom_opdefs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dump_graphviz_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_graphviz_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      conversion_summary_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.conversion_summary_dir_);
    }
    if (cached_has_bits & 0x00000004u) {
      input_format_ = from.input_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_format_ = from.output_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      inference_type_ = from.inference_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_ranges_min_ = from.default_ranges_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_ranges_max_ = from.default_ranges_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      drop_fake_quant_ = from.drop_fake_quant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      reorder_across_fake_quant_ = from.reorder_across_fake_quant_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_custom_ops_ = from.allow_custom_ops_;
    }
    if (cached_has_bits & 0x00000400u) {
      drop_control_dependency_ = from.drop_control_dependency_;
    }
    if (cached_has_bits & 0x00000800u) {
      inference_input_type_ = from.inference_input_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_int16_ranges_min_ = from.default_int16_ranges_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_int16_ranges_max_ = from.default_int16_ranges_max_;
    }
    if (cached_has_bits & 0x00004000u) {
      debug_disable_recurrent_cell_fusion_ = from.debug_disable_recurrent_cell_fusion_;
    }
    if (cached_has_bits & 0x00008000u) {
      propagate_fake_quant_num_bits_ = from.propagate_fake_quant_num_bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      allow_nudging_weights_to_use_fast_gemm_kernel_ = from.allow_nudging_weights_to_use_fast_gemm_kernel_;
    }
    if (cached_has_bits & 0x00020000u) {
      quantize_weights_ = from.quantize_weights_;
    }
    if (cached_has_bits & 0x00040000u) {
      dump_graphviz_include_video_ = from.dump_graphviz_include_video_;
    }
    if (cached_has_bits & 0x00080000u) {
      post_training_quantize_ = from.post_training_quantize_;
    }
    if (cached_has_bits & 0x00100000u) {
      enable_select_tf_ops_ = from.enable_select_tf_ops_;
    }
    if (cached_has_bits & 0x00200000u) {
      force_select_tf_ops_ = from.force_select_tf_ops_;
    }
    if (cached_has_bits & 0x00400000u) {
      quantize_to_float16_ = from.quantize_to_float16_;
    }
    if (cached_has_bits & 0x00800000u) {
      split_tflite_lstm_inputs_ = from.split_tflite_lstm_inputs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      allow_dynamic_tensors_ = from.allow_dynamic_tensors_;
    }
    if (cached_has_bits & 0x02000000u) {
      dedupe_array_min_size_bytes_ = from.dedupe_array_min_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TocoFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.TocoFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TocoFlags::CopyFrom(const TocoFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.TocoFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TocoFlags::IsInitialized() const {
  return true;
}

void TocoFlags::InternalSwap(TocoFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_opdefs_.InternalSwap(&other->custom_opdefs_);
  dump_graphviz_dir_.Swap(&other->dump_graphviz_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  conversion_summary_dir_.Swap(&other->conversion_summary_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_format_, other->input_format_);
  swap(output_format_, other->output_format_);
  swap(inference_type_, other->inference_type_);
  swap(default_ranges_min_, other->default_ranges_min_);
  swap(default_ranges_max_, other->default_ranges_max_);
  swap(drop_fake_quant_, other->drop_fake_quant_);
  swap(reorder_across_fake_quant_, other->reorder_across_fake_quant_);
  swap(allow_custom_ops_, other->allow_custom_ops_);
  swap(drop_control_dependency_, other->drop_control_dependency_);
  swap(inference_input_type_, other->inference_input_type_);
  swap(default_int16_ranges_min_, other->default_int16_ranges_min_);
  swap(default_int16_ranges_max_, other->default_int16_ranges_max_);
  swap(debug_disable_recurrent_cell_fusion_, other->debug_disable_recurrent_cell_fusion_);
  swap(propagate_fake_quant_num_bits_, other->propagate_fake_quant_num_bits_);
  swap(allow_nudging_weights_to_use_fast_gemm_kernel_, other->allow_nudging_weights_to_use_fast_gemm_kernel_);
  swap(quantize_weights_, other->quantize_weights_);
  swap(dump_graphviz_include_video_, other->dump_graphviz_include_video_);
  swap(post_training_quantize_, other->post_training_quantize_);
  swap(enable_select_tf_ops_, other->enable_select_tf_ops_);
  swap(force_select_tf_ops_, other->force_select_tf_ops_);
  swap(quantize_to_float16_, other->quantize_to_float16_);
  swap(split_tflite_lstm_inputs_, other->split_tflite_lstm_inputs_);
  swap(allow_dynamic_tensors_, other->allow_dynamic_tensors_);
  swap(dedupe_array_min_size_bytes_, other->dedupe_array_min_size_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TocoFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace toco
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toco::TocoFlags* Arena::CreateMaybeMessage< ::toco::TocoFlags >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoFlags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
