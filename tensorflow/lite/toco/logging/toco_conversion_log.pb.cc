// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/toco/logging/toco_conversion_log.proto

#include "tensorflow/lite/toco/logging/toco_conversion_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto;
namespace toco {
class TocoConversionLog_BuiltInOpsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TocoConversionLog_BuiltInOpsEntry_DoNotUse> _instance;
} _TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_CustomOpsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TocoConversionLog_CustomOpsEntry_DoNotUse> _instance;
} _TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_;
class TocoConversionLog_SelectOpsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TocoConversionLog_SelectOpsEntry_DoNotUse> _instance;
} _TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_;
class TocoConversionLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TocoConversionLog> _instance;
} _TocoConversionLog_default_instance_;
}  // namespace toco
static void InitDefaultsscc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoConversionLog_default_instance_;
    new (ptr) ::toco::TocoConversionLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::TocoConversionLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto}, {
      &scc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
      &scc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
      &scc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,}};

static void InitDefaultsscc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_;
    new (ptr) ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse();
  }
  ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto}, {}};

static void InitDefaultsscc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_;
    new (ptr) ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse();
  }
  ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto}, {}};

static void InitDefaultsscc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_;
    new (ptr) ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse();
  }
  ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_CustomOpsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_CustomOpsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_CustomOpsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_CustomOpsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_SelectOpsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_SelectOpsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_SelectOpsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog_SelectOpsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, op_list_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, built_in_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, custom_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, select_ops_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, op_signatures_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, input_tensor_types_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, output_tensor_types_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, log_generation_ts_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, model_size_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, tf_lite_version_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, os_version_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, model_hash_),
  PROTOBUF_FIELD_OFFSET(::toco::TocoConversionLog, toco_err_logs_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse)},
  { 9, 16, sizeof(::toco::TocoConversionLog_CustomOpsEntry_DoNotUse)},
  { 18, 25, sizeof(::toco::TocoConversionLog_SelectOpsEntry_DoNotUse)},
  { 27, 45, sizeof(::toco::TocoConversionLog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_TocoConversionLog_BuiltInOpsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_TocoConversionLog_CustomOpsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_TocoConversionLog_SelectOpsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toco::_TocoConversionLog_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6tensorflow/lite/toco/logging/toco_conv"
  "ersion_log.proto\022\004toco\"\311\004\n\021TocoConversio"
  "nLog\022\017\n\007op_list\030\001 \003(\t\022=\n\014built_in_ops\030\002 "
  "\003(\0132\'.toco.TocoConversionLog.BuiltInOpsE"
  "ntry\022:\n\ncustom_ops\030\003 \003(\0132&.toco.TocoConv"
  "ersionLog.CustomOpsEntry\022:\n\nselect_ops\030\004"
  " \003(\0132&.toco.TocoConversionLog.SelectOpsE"
  "ntry\022\025\n\rop_signatures\030\005 \003(\t\022\032\n\022input_ten"
  "sor_types\030\006 \003(\t\022\033\n\023output_tensor_types\030\007"
  " \003(\t\022\031\n\021log_generation_ts\030\010 \001(\003\022\022\n\nmodel"
  "_size\030\t \001(\005\022\027\n\017tf_lite_version\030\n \001(\t\022\022\n\n"
  "os_version\030\013 \001(\t\022\022\n\nmodel_hash\030\014 \001(\t\022\025\n\r"
  "toco_err_logs\030\r \001(\t\0321\n\017BuiltInOpsEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0320\n\016Custom"
  "OpsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001"
  "\0320\n\016SelectOpsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\005:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_sccs[4] = {
  &scc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
  &scc_info_TocoConversionLog_BuiltInOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
  &scc_info_TocoConversionLog_CustomOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
  &scc_info_TocoConversionLog_SelectOpsEntry_DoNotUse_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_once;
static bool descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto = {
  &descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_initialized, descriptor_table_protodef_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto, "tensorflow/lite/toco/logging/toco_conversion_log.proto", 650,
  &descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_once, descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_sccs, descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto::offsets,
  file_level_metadata_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto, 4, file_level_enum_descriptors_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto, file_level_service_descriptors_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto), true);
namespace toco {

// ===================================================================

TocoConversionLog_BuiltInOpsEntry_DoNotUse::TocoConversionLog_BuiltInOpsEntry_DoNotUse() {}
TocoConversionLog_BuiltInOpsEntry_DoNotUse::TocoConversionLog_BuiltInOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TocoConversionLog_BuiltInOpsEntry_DoNotUse::MergeFrom(const TocoConversionLog_BuiltInOpsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TocoConversionLog_BuiltInOpsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TocoConversionLog_BuiltInOpsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TocoConversionLog_CustomOpsEntry_DoNotUse::TocoConversionLog_CustomOpsEntry_DoNotUse() {}
TocoConversionLog_CustomOpsEntry_DoNotUse::TocoConversionLog_CustomOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TocoConversionLog_CustomOpsEntry_DoNotUse::MergeFrom(const TocoConversionLog_CustomOpsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TocoConversionLog_CustomOpsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TocoConversionLog_CustomOpsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TocoConversionLog_SelectOpsEntry_DoNotUse::TocoConversionLog_SelectOpsEntry_DoNotUse() {}
TocoConversionLog_SelectOpsEntry_DoNotUse::TocoConversionLog_SelectOpsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TocoConversionLog_SelectOpsEntry_DoNotUse::MergeFrom(const TocoConversionLog_SelectOpsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TocoConversionLog_SelectOpsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TocoConversionLog_SelectOpsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TocoConversionLog::InitAsDefaultInstance() {
}
class TocoConversionLog::_Internal {
 public:
  using HasBits = decltype(std::declval<TocoConversionLog>()._has_bits_);
  static void set_has_log_generation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tf_lite_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_toco_err_logs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TocoConversionLog::TocoConversionLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.TocoConversionLog)
}
TocoConversionLog::TocoConversionLog(const TocoConversionLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      op_list_(from.op_list_),
      op_signatures_(from.op_signatures_),
      input_tensor_types_(from.input_tensor_types_),
      output_tensor_types_(from.output_tensor_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  built_in_ops_.MergeFrom(from.built_in_ops_);
  custom_ops_.MergeFrom(from.custom_ops_);
  select_ops_.MergeFrom(from.select_ops_);
  tf_lite_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tf_lite_version()) {
    tf_lite_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tf_lite_version_);
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_os_version()) {
    os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  model_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_hash()) {
    model_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_hash_);
  }
  toco_err_logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toco_err_logs()) {
    toco_err_logs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toco_err_logs_);
  }
  ::memcpy(&log_generation_ts_, &from.log_generation_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_size_) -
    reinterpret_cast<char*>(&log_generation_ts_)) + sizeof(model_size_));
  // @@protoc_insertion_point(copy_constructor:toco.TocoConversionLog)
}

void TocoConversionLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base);
  tf_lite_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toco_err_logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_generation_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_size_) -
      reinterpret_cast<char*>(&log_generation_ts_)) + sizeof(model_size_));
}

TocoConversionLog::~TocoConversionLog() {
  // @@protoc_insertion_point(destructor:toco.TocoConversionLog)
  SharedDtor();
}

void TocoConversionLog::SharedDtor() {
  tf_lite_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toco_err_logs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TocoConversionLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TocoConversionLog& TocoConversionLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TocoConversionLog_tensorflow_2flite_2ftoco_2flogging_2ftoco_5fconversion_5flog_2eproto.base);
  return *internal_default_instance();
}


void TocoConversionLog::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.TocoConversionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_list_.Clear();
  built_in_ops_.Clear();
  custom_ops_.Clear();
  select_ops_.Clear();
  op_signatures_.Clear();
  input_tensor_types_.Clear();
  output_tensor_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tf_lite_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      toco_err_logs_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&log_generation_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_size_) -
        reinterpret_cast<char*>(&log_generation_ts_)) + sizeof(model_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TocoConversionLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string op_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_op_list(), ptr, ctx, "toco.TocoConversionLog.op_list");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> built_in_ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&built_in_ops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> custom_ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&custom_ops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> select_ops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&select_ops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string op_signatures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_op_signatures(), ptr, ctx, "toco.TocoConversionLog.op_signatures");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_tensor_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_input_tensor_types(), ptr, ctx, "toco.TocoConversionLog.input_tensor_types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_tensor_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_add_output_tensor_types(), ptr, ctx, "toco.TocoConversionLog.output_tensor_types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 log_generation_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_log_generation_ts(&has_bits);
          log_generation_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 model_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_model_size(&has_bits);
          model_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tf_lite_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_tf_lite_version(), ptr, ctx, "toco.TocoConversionLog.tf_lite_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_os_version(), ptr, ctx, "toco.TocoConversionLog.os_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string model_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_model_hash(), ptr, ctx, "toco.TocoConversionLog.model_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string toco_err_logs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_toco_err_logs(), ptr, ctx, "toco.TocoConversionLog.toco_err_logs");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TocoConversionLog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toco.TocoConversionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string op_list = 1;
  for (int i = 0, n = this->_internal_op_list_size(); i < n; i++) {
    const auto& s = this->_internal_op_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.op_list");
    target = stream->WriteString(1, s, target);
  }

  // map<string, int32> built_in_ops = 2;
  if (!this->_internal_built_in_ops().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "toco.TocoConversionLog.BuiltInOpsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_built_in_ops().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_built_in_ops().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_built_in_ops().begin();
          it != this->_internal_built_in_ops().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TocoConversionLog_BuiltInOpsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_built_in_ops().begin();
          it != this->_internal_built_in_ops().end(); ++it) {
        target = TocoConversionLog_BuiltInOpsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> custom_ops = 3;
  if (!this->_internal_custom_ops().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "toco.TocoConversionLog.CustomOpsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_custom_ops().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_custom_ops().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_custom_ops().begin();
          it != this->_internal_custom_ops().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TocoConversionLog_CustomOpsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_custom_ops().begin();
          it != this->_internal_custom_ops().end(); ++it) {
        target = TocoConversionLog_CustomOpsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> select_ops = 4;
  if (!this->_internal_select_ops().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "toco.TocoConversionLog.SelectOpsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_select_ops().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_select_ops().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_select_ops().begin();
          it != this->_internal_select_ops().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TocoConversionLog_SelectOpsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_select_ops().begin();
          it != this->_internal_select_ops().end(); ++it) {
        target = TocoConversionLog_SelectOpsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string op_signatures = 5;
  for (int i = 0, n = this->_internal_op_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_op_signatures(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.op_signatures");
    target = stream->WriteString(5, s, target);
  }

  // repeated string input_tensor_types = 6;
  for (int i = 0, n = this->_internal_input_tensor_types_size(); i < n; i++) {
    const auto& s = this->_internal_input_tensor_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.input_tensor_types");
    target = stream->WriteString(6, s, target);
  }

  // repeated string output_tensor_types = 7;
  for (int i = 0, n = this->_internal_output_tensor_types_size(); i < n; i++) {
    const auto& s = this->_internal_output_tensor_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.output_tensor_types");
    target = stream->WriteString(7, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 log_generation_ts = 8;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_log_generation_ts(), target);
  }

  // optional int32 model_size = 9;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_model_size(), target);
  }

  // optional string tf_lite_version = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tf_lite_version().data(), static_cast<int>(this->_internal_tf_lite_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.tf_lite_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tf_lite_version(), target);
  }

  // optional string os_version = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.os_version");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_os_version(), target);
  }

  // optional string model_hash = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_hash().data(), static_cast<int>(this->_internal_model_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.model_hash");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_model_hash(), target);
  }

  // optional string toco_err_logs = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toco_err_logs().data(), static_cast<int>(this->_internal_toco_err_logs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "toco.TocoConversionLog.toco_err_logs");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_toco_err_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.TocoConversionLog)
  return target;
}

size_t TocoConversionLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.TocoConversionLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string op_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(op_list_.size());
  for (int i = 0, n = op_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      op_list_.Get(i));
  }

  // map<string, int32> built_in_ops = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_built_in_ops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_built_in_ops().begin();
      it != this->_internal_built_in_ops().end(); ++it) {
    total_size += TocoConversionLog_BuiltInOpsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> custom_ops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_ops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_custom_ops().begin();
      it != this->_internal_custom_ops().end(); ++it) {
    total_size += TocoConversionLog_CustomOpsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> select_ops = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_select_ops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_select_ops().begin();
      it != this->_internal_select_ops().end(); ++it) {
    total_size += TocoConversionLog_SelectOpsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string op_signatures = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(op_signatures_.size());
  for (int i = 0, n = op_signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      op_signatures_.Get(i));
  }

  // repeated string input_tensor_types = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_tensor_types_.size());
  for (int i = 0, n = input_tensor_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_tensor_types_.Get(i));
  }

  // repeated string output_tensor_types = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_tensor_types_.size());
  for (int i = 0, n = output_tensor_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_tensor_types_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tf_lite_version = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tf_lite_version());
    }

    // optional string os_version = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os_version());
    }

    // optional string model_hash = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_hash());
    }

    // optional string toco_err_logs = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toco_err_logs());
    }

    // optional int64 log_generation_ts = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_log_generation_ts());
    }

    // optional int32 model_size = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_model_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TocoConversionLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.TocoConversionLog)
  GOOGLE_DCHECK_NE(&from, this);
  const TocoConversionLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TocoConversionLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.TocoConversionLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.TocoConversionLog)
    MergeFrom(*source);
  }
}

void TocoConversionLog::MergeFrom(const TocoConversionLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.TocoConversionLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_list_.MergeFrom(from.op_list_);
  built_in_ops_.MergeFrom(from.built_in_ops_);
  custom_ops_.MergeFrom(from.custom_ops_);
  select_ops_.MergeFrom(from.select_ops_);
  op_signatures_.MergeFrom(from.op_signatures_);
  input_tensor_types_.MergeFrom(from.input_tensor_types_);
  output_tensor_types_.MergeFrom(from.output_tensor_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tf_lite_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tf_lite_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      os_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      model_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      toco_err_logs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toco_err_logs_);
    }
    if (cached_has_bits & 0x00000010u) {
      log_generation_ts_ = from.log_generation_ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      model_size_ = from.model_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TocoConversionLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.TocoConversionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TocoConversionLog::CopyFrom(const TocoConversionLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.TocoConversionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TocoConversionLog::IsInitialized() const {
  return true;
}

void TocoConversionLog::InternalSwap(TocoConversionLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  op_list_.InternalSwap(&other->op_list_);
  built_in_ops_.Swap(&other->built_in_ops_);
  custom_ops_.Swap(&other->custom_ops_);
  select_ops_.Swap(&other->select_ops_);
  op_signatures_.InternalSwap(&other->op_signatures_);
  input_tensor_types_.InternalSwap(&other->input_tensor_types_);
  output_tensor_types_.InternalSwap(&other->output_tensor_types_);
  tf_lite_version_.Swap(&other->tf_lite_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_hash_.Swap(&other->model_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toco_err_logs_.Swap(&other->toco_err_logs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_generation_ts_, other->log_generation_ts_);
  swap(model_size_, other->model_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TocoConversionLog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace toco
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse* Arena::CreateMaybeMessage< ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoConversionLog_BuiltInOpsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse* Arena::CreateMaybeMessage< ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoConversionLog_CustomOpsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse* Arena::CreateMaybeMessage< ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoConversionLog_SelectOpsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::toco::TocoConversionLog* Arena::CreateMaybeMessage< ::toco::TocoConversionLog >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoConversionLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
